
Stepper_Soft2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c0  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003358  08003358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  000050f4  2**0
                  CONTENTS
  4 .ARM          00000008  08003390  08003390  00004390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003398  08003398  000050f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00004398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800339c  0800339c  0000439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f4  20000000  080033a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200000f4  08003494  000050f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003494  000051ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc02  00000000  00000000  00005124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002194  00000000  00000000  00011d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00013ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090c  00000000  00000000  00014a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c1  00000000  00000000  00015374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001043c  00000000  00000000  0002c635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dcbe  00000000  00000000  0003ca71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca72f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f4c  00000000  00000000  000ca774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cd6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000f4 	.word	0x200000f4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003340 	.word	0x08003340

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000f8 	.word	0x200000f8
 80001d4:	08003340 	.word	0x08003340

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_4){
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b10      	cmp	r3, #16
 80004d6:	d125      	bne.n	8000524 <HAL_GPIO_EXTI_Callback+0x5c>
		//debouncing
		HAL_Delay(100);
 80004d8:	2064      	movs	r0, #100	@ 0x64
 80004da:	f000 fc25 	bl	8000d28 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4)){
 80004de:	2110      	movs	r1, #16
 80004e0:	483a      	ldr	r0, [pc, #232]	@ (80005cc <HAL_GPIO_EXTI_Callback+0x104>)
 80004e2:	f000 ff6d 	bl	80013c0 <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d11b      	bne.n	8000524 <HAL_GPIO_EXTI_Callback+0x5c>

			restart = false;
 80004ec:	4b38      	ldr	r3, [pc, #224]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
			forcedMove = false;
 80004f2:	4b38      	ldr	r3, [pc, #224]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, Message, sizeof(Message));
 80004f8:	2258      	movs	r2, #88	@ 0x58
 80004fa:	4937      	ldr	r1, [pc, #220]	@ (80005d8 <HAL_GPIO_EXTI_Callback+0x110>)
 80004fc:	4837      	ldr	r0, [pc, #220]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x114>)
 80004fe:	f001 fdef 	bl	80020e0 <HAL_UART_Transmit_IT>
			while(1){
				HAL_Delay(1000);
 8000502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000506:	f000 fc0f 	bl	8000d28 <HAL_Delay>
				if(restart){
 800050a:	4b31      	ldr	r3, [pc, #196]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d107      	bne.n	8000522 <HAL_GPIO_EXTI_Callback+0x5a>
					break;
				}
				else if(forcedMove){
 8000512:	4b30      	ldr	r3, [pc, #192]	@ (80005d4 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f3      	beq.n	8000502 <HAL_GPIO_EXTI_Callback+0x3a>
					interruptFlag = true;
 800051a:	4b31      	ldr	r3, [pc, #196]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x118>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
					break;
 8000520:	e000      	b.n	8000524 <HAL_GPIO_EXTI_Callback+0x5c>
					break;
 8000522:	bf00      	nop
				}
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_15){
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800052a:	d109      	bne.n	8000540 <HAL_GPIO_EXTI_Callback+0x78>
		currentFloor = 1;
 800052c:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
		currentFloorLED(currentFloor-1);
 8000532:	4b2c      	ldr	r3, [pc, #176]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	3b01      	subs	r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fdf4 	bl	8003128 <currentFloorLED>
	}
	if(GPIO_Pin == GPIO_PIN_14){
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000546:	d109      	bne.n	800055c <HAL_GPIO_EXTI_Callback+0x94>
		currentFloor = 2;
 8000548:	4b26      	ldr	r3, [pc, #152]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 800054a:	2202      	movs	r2, #2
 800054c:	701a      	strb	r2, [r3, #0]
		currentFloorLED(currentFloor-1);
 800054e:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f002 fde6 	bl	8003128 <currentFloorLED>
	}
	if(GPIO_Pin == GPIO_PIN_13){
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000562:	d10a      	bne.n	800057a <HAL_GPIO_EXTI_Callback+0xb2>
		currentFloor = 3;
 8000564:	4b1f      	ldr	r3, [pc, #124]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000566:	2203      	movs	r2, #3
 8000568:	701a      	strb	r2, [r3, #0]
		currentFloorLED(currentFloor-1);
 800056a:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	3b01      	subs	r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fdd8 	bl	8003128 <currentFloorLED>
					wait();
					break;
			}
		}
	}
}
 8000578:	e024      	b.n	80005c4 <HAL_GPIO_EXTI_Callback+0xfc>
	else if(GPIO_Pin == GPIO_PIN_3){
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	2b08      	cmp	r3, #8
 800057e:	d121      	bne.n	80005c4 <HAL_GPIO_EXTI_Callback+0xfc>
		HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f000 fbd1 	bl	8000d28 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 8000586:	2108      	movs	r1, #8
 8000588:	4817      	ldr	r0, [pc, #92]	@ (80005e8 <HAL_GPIO_EXTI_Callback+0x120>)
 800058a:	f000 ff19 	bl	80013c0 <HAL_GPIO_ReadPin>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d117      	bne.n	80005c4 <HAL_GPIO_EXTI_Callback+0xfc>
			switch(currentFloor){
 8000594:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d00c      	beq.n	80005b6 <HAL_GPIO_EXTI_Callback+0xee>
 800059c:	2b03      	cmp	r3, #3
 800059e:	dc11      	bgt.n	80005c4 <HAL_GPIO_EXTI_Callback+0xfc>
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d001      	beq.n	80005a8 <HAL_GPIO_EXTI_Callback+0xe0>
 80005a4:	2b02      	cmp	r3, #2
					break;
 80005a6:	e00d      	b.n	80005c4 <HAL_GPIO_EXTI_Callback+0xfc>
					infiniteRotation(DIR_CW, 2);
 80005a8:	2102      	movs	r1, #2
 80005aa:	2000      	movs	r0, #0
 80005ac:	f002 fe0c 	bl	80031c8 <infiniteRotation>
					wait();
 80005b0:	f002 fd66 	bl	8003080 <wait>
					break;
 80005b4:	e006      	b.n	80005c4 <HAL_GPIO_EXTI_Callback+0xfc>
					infiniteRotation(DIR_CCW, 2);
 80005b6:	2102      	movs	r1, #2
 80005b8:	2001      	movs	r0, #1
 80005ba:	f002 fe05 	bl	80031c8 <infiniteRotation>
					wait();
 80005be:	f002 fd5f 	bl	8003080 <wait>
					break;
 80005c2:	bf00      	nop
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020800 	.word	0x40020800
 80005d0:	200001a1 	.word	0x200001a1
 80005d4:	200001ab 	.word	0x200001ab
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000158 	.word	0x20000158
 80005e0:	200001a2 	.word	0x200001a2
 80005e4:	20000058 	.word	0x20000058
 80005e8:	40020400 	.word	0x40020400

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fb28 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f858 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f90c 	bl	8000814 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f8e0 	bl	80007c0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000600:	f000 f8ba 	bl	8000778 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000604:	2201      	movs	r2, #1
 8000606:	4924      	ldr	r1, [pc, #144]	@ (8000698 <main+0xac>)
 8000608:	4824      	ldr	r0, [pc, #144]	@ (800069c <main+0xb0>)
 800060a:	f001 fd9f 	bl	800214c <HAL_UART_Receive_IT>
  LEDInit();
 800060e:	f002 fd45 	bl	800309c <LEDInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  interruptFlag = false;
 8000612:	4b23      	ldr	r3, [pc, #140]	@ (80006a0 <main+0xb4>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	  // floor 3
	  if(btnPress(2)){
 8000618:	2002      	movs	r0, #2
 800061a:	f002 fcbb 	bl	8002f94 <btnPress>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d019      	beq.n	8000658 <main+0x6c>
		  switch(currentFloor){
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <main+0xb8>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d014      	beq.n	8000656 <main+0x6a>
 800062c:	2b03      	cmp	r3, #3
 800062e:	dc13      	bgt.n	8000658 <main+0x6c>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d002      	beq.n	800063a <main+0x4e>
 8000634:	2b02      	cmp	r3, #2
 8000636:	d007      	beq.n	8000648 <main+0x5c>
 8000638:	e00e      	b.n	8000658 <main+0x6c>
		  	  case 1:
		  		  infiniteRotation(DIR_CW, 3);
 800063a:	2103      	movs	r1, #3
 800063c:	2000      	movs	r0, #0
 800063e:	f002 fdc3 	bl	80031c8 <infiniteRotation>
		  		  wait();
 8000642:	f002 fd1d 	bl	8003080 <wait>
		  		  break;
 8000646:	e007      	b.n	8000658 <main+0x6c>
		  	  case 2:
		  		  infiniteRotation(DIR_CW, 3);
 8000648:	2103      	movs	r1, #3
 800064a:	2000      	movs	r0, #0
 800064c:	f002 fdbc 	bl	80031c8 <infiniteRotation>
		  		  wait();
 8000650:	f002 fd16 	bl	8003080 <wait>
		  		  break;
 8000654:	e000      	b.n	8000658 <main+0x6c>
		  	  case 3:
		  		  break;
 8000656:	bf00      	nop
		  }
//		  currentFloor = 3;
	  }
	  // floor 1
	  if(btnPress(0)){
 8000658:	2000      	movs	r0, #0
 800065a:	f002 fc9b 	bl	8002f94 <btnPress>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d6      	beq.n	8000612 <main+0x26>
		  switch(currentFloor){
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <main+0xb8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d00c      	beq.n	8000686 <main+0x9a>
 800066c:	2b03      	cmp	r3, #3
 800066e:	dcd0      	bgt.n	8000612 <main+0x26>
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00f      	beq.n	8000694 <main+0xa8>
 8000674:	2b02      	cmp	r3, #2
 8000676:	d10e      	bne.n	8000696 <main+0xaa>
		  	  case 1:
	  	  		  break;
	  	  	  case 2:
	  	  		  infiniteRotation(DIR_CCW, 1);
 8000678:	2101      	movs	r1, #1
 800067a:	2001      	movs	r0, #1
 800067c:	f002 fda4 	bl	80031c8 <infiniteRotation>
	  	  		  wait();
 8000680:	f002 fcfe 	bl	8003080 <wait>
	  	  		  break;
 8000684:	e007      	b.n	8000696 <main+0xaa>
	  	  	  case 3:
	  	  		  infiniteRotation(DIR_CCW, 1);
 8000686:	2101      	movs	r1, #1
 8000688:	2001      	movs	r0, #1
 800068a:	f002 fd9d 	bl	80031c8 <infiniteRotation>
	  	  		  wait();
 800068e:	f002 fcf7 	bl	8003080 <wait>
	   		  	  break;
 8000692:	e000      	b.n	8000696 <main+0xaa>
	  	  		  break;
 8000694:	bf00      	nop
	  interruptFlag = false;
 8000696:	e7bc      	b.n	8000612 <main+0x26>
 8000698:	200001a0 	.word	0x200001a0
 800069c:	20000158 	.word	0x20000158
 80006a0:	200001a2 	.word	0x200001a2
 80006a4:	20000058 	.word	0x20000058

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	@ 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f002 fe16 	bl	80032e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b27      	ldr	r3, [pc, #156]	@ (8000770 <SystemClock_Config+0xc8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a26      	ldr	r2, [pc, #152]	@ (8000770 <SystemClock_Config+0xc8>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xc8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemClock_Config+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a20      	ldr	r2, [pc, #128]	@ (8000774 <SystemClock_Config+0xcc>)
 80006f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemClock_Config+0xcc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000708:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800071c:	2364      	movs	r3, #100	@ 0x64
 800071e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fe91 	bl	8001454 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 f950 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f8f3 	bl	8001944 <HAL_RCC_ClockConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000764:	f000 f93a 	bl	80009dc <Error_Handler>
  }
}
 8000768:	bf00      	nop
 800076a:	3750      	adds	r7, #80	@ 0x50
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_TIM10_Init+0x40>)
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <MX_TIM10_Init+0x44>)
 8000780:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <MX_TIM10_Init+0x40>)
 8000784:	2263      	movs	r2, #99	@ 0x63
 8000786:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_TIM10_Init+0x40>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_TIM10_Init+0x40>)
 8000790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000794:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_TIM10_Init+0x40>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_TIM10_Init+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_TIM10_Init+0x40>)
 80007a4:	f001 faee 	bl	8001d84 <HAL_TIM_Base_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80007ae:	f000 f915 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000110 	.word	0x20000110
 80007bc:	40014400 	.word	0x40014400

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <MX_USART2_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USART2_UART_Init+0x4c>)
 80007f8:	f001 fc22 	bl	8002040 <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f000 f8eb 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000158 	.word	0x20000158
 8000810:	40004400 	.word	0x40004400

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b67      	ldr	r3, [pc, #412]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a66      	ldr	r2, [pc, #408]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b64      	ldr	r3, [pc, #400]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b60      	ldr	r3, [pc, #384]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a5f      	ldr	r2, [pc, #380]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b5d      	ldr	r3, [pc, #372]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b59      	ldr	r3, [pc, #356]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a58      	ldr	r2, [pc, #352]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b56      	ldr	r3, [pc, #344]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b52      	ldr	r3, [pc, #328]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a51      	ldr	r2, [pc, #324]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b4f      	ldr	r3, [pc, #316]	@ (80009cc <MX_GPIO_Init+0x1b8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	21e0      	movs	r1, #224	@ 0xe0
 800089e:	484c      	ldr	r0, [pc, #304]	@ (80009d0 <MX_GPIO_Init+0x1bc>)
 80008a0:	f000 fda6 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80008aa:	484a      	ldr	r0, [pc, #296]	@ (80009d4 <MX_GPIO_Init+0x1c0>)
 80008ac:	f000 fda0 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	@ 0x40
 80008b4:	4848      	ldr	r0, [pc, #288]	@ (80009d8 <MX_GPIO_Init+0x1c4>)
 80008b6:	f000 fd9b 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008ba:	23e0      	movs	r3, #224	@ 0xe0
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	483f      	ldr	r0, [pc, #252]	@ (80009d0 <MX_GPIO_Init+0x1bc>)
 80008d2:	f000 fbf1 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008d6:	2310      	movs	r3, #16
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	483a      	ldr	r0, [pc, #232]	@ (80009d4 <MX_GPIO_Init+0x1c0>)
 80008ec:	f000 fbe4 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008f0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4834      	ldr	r0, [pc, #208]	@ (80009d8 <MX_GPIO_Init+0x1c4>)
 8000908:	f000 fbd6 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800090c:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	482b      	ldr	r0, [pc, #172]	@ (80009d4 <MX_GPIO_Init+0x1c0>)
 8000926:	f000 fbc7 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4824      	ldr	r0, [pc, #144]	@ (80009d0 <MX_GPIO_Init+0x1bc>)
 8000940:	f000 fbba 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000944:	2308      	movs	r3, #8
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	481f      	ldr	r0, [pc, #124]	@ (80009d8 <MX_GPIO_Init+0x1c4>)
 800095a:	f000 fbad 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800095e:	2320      	movs	r3, #32
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4819      	ldr	r0, [pc, #100]	@ (80009d8 <MX_GPIO_Init+0x1c4>)
 8000972:	f000 fba1 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000976:	2340      	movs	r3, #64	@ 0x40
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4812      	ldr	r0, [pc, #72]	@ (80009d8 <MX_GPIO_Init+0x1c4>)
 800098e:	f000 fb93 	bl	80010b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2103      	movs	r1, #3
 8000996:	2009      	movs	r0, #9
 8000998:	f000 fac5 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800099c:	2009      	movs	r0, #9
 800099e:	f000 fade 	bl	8000f5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2102      	movs	r1, #2
 80009a6:	200a      	movs	r0, #10
 80009a8:	f000 fabd 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009ac:	200a      	movs	r0, #10
 80009ae:	f000 fad6 	bl	8000f5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2028      	movs	r0, #40	@ 0x28
 80009b8:	f000 fab5 	bl	8000f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009bc:	2028      	movs	r0, #40	@ 0x28
 80009be:	f000 face 	bl	8000f5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	@ 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020400 	.word	0x40020400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <Error_Handler+0x8>

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_MspInit+0x4c>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <HAL_MspInit+0x4c>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000a26:	2005      	movs	r0, #5
 8000a28:	f000 fa72 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <HAL_TIM_Base_MspInit+0x3c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10d      	bne.n	8000a66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <HAL_TIM_Base_MspInit+0x40>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <HAL_TIM_Base_MspInit+0x40>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <HAL_TIM_Base_MspInit+0x40>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40014400 	.word	0x40014400
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <HAL_UART_MspInit+0x94>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d133      	bne.n	8000b06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <HAL_UART_MspInit+0x9c>)
 8000af2:	f000 fae1 	bl	80010b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2101      	movs	r1, #1
 8000afa:	2026      	movs	r0, #38	@ 0x26
 8000afc:	f000 fa13 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b00:	2026      	movs	r0, #38	@ 0x26
 8000b02:	f000 fa2c 	bl	8000f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004400 	.word	0x40004400
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f8b9 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b7e:	2008      	movs	r0, #8
 8000b80:	f000 fc50 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b8c:	2010      	movs	r0, #16
 8000b8e:	f000 fc49 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b9c:	4802      	ldr	r0, [pc, #8]	@ (8000ba8 <USART2_IRQHandler+0x10>)
 8000b9e:	f001 fafb 	bl	8002198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000158 	.word	0x20000158

08000bac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000bb4:	f000 fc36 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000bb8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000bbc:	f000 fc32 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000bc0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000bc4:	f000 fc2e 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf4:	f7ff ffea 	bl	8000bcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	@ (8000c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	@ (8000c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 fb6b 	bl	80032f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fce3 	bl	80005ec <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8000c34:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 8000c38:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 8000c3c:	200001ac 	.word	0x200001ac

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f94f 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff feb6 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f967 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f92f 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	2000005c 	.word	0x2000005c
 8000ce0:	20000064 	.word	0x20000064
 8000ce4:	20000060 	.word	0x20000060

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000064 	.word	0x20000064
 8000d0c:	200001a4 	.word	0x200001a4

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200001a4 	.word	0x200001a4

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000064 	.word	0x20000064

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	@ (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	@ (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	@ 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff feb6 	bl	8000d10 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d008      	beq.n	8000fc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2280      	movs	r2, #128	@ 0x80
 8000fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e052      	b.n	800106a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0216 	bic.w	r2, r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fe2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <HAL_DMA_Abort+0x62>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0208 	bic.w	r2, r2, #8
 8001002:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001014:	e013      	b.n	800103e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001016:	f7ff fe7b 	bl	8000d10 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b05      	cmp	r3, #5
 8001022:	d90c      	bls.n	800103e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e015      	b.n	800106a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e4      	bne.n	8001016 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001050:	223f      	movs	r2, #63	@ 0x3f
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d004      	beq.n	8001090 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e00c      	b.n	80010aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e159      	b.n	8001388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8148 	bne.w	8001382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80a2 	beq.w	8001382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b57      	ldr	r3, [pc, #348]	@ (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a56      	ldr	r2, [pc, #344]	@ (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b54      	ldr	r3, [pc, #336]	@ (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a52      	ldr	r2, [pc, #328]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	@ (80013a8 <HAL_GPIO_Init+0x2f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x202>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	@ (80013ac <HAL_GPIO_Init+0x2f4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1fe>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a47      	ldr	r2, [pc, #284]	@ (80013b0 <HAL_GPIO_Init+0x2f8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1fa>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a46      	ldr	r2, [pc, #280]	@ (80013b4 <HAL_GPIO_Init+0x2fc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1f6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a45      	ldr	r2, [pc, #276]	@ (80013b8 <HAL_GPIO_Init+0x300>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1f2>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	@ (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <HAL_GPIO_Init+0x304>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a2f      	ldr	r2, [pc, #188]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b2d      	ldr	r3, [pc, #180]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a24      	ldr	r2, [pc, #144]	@ (80013bc <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1a      	ldr	r2, [pc, #104]	@ (80013bc <HAL_GPIO_Init+0x304>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <HAL_GPIO_Init+0x304>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a0f      	ldr	r2, [pc, #60]	@ (80013bc <HAL_GPIO_Init+0x304>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f aea2 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	@ 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f840 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40013c00 	.word	0x40013c00

08001454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e267      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d075      	beq.n	800155e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	4b88      	ldr	r3, [pc, #544]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b04      	cmp	r3, #4
 800147c:	d00c      	beq.n	8001498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147e:	4b85      	ldr	r3, [pc, #532]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001486:	2b08      	cmp	r3, #8
 8001488:	d112      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4b82      	ldr	r3, [pc, #520]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001496:	d10b      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4b7e      	ldr	r3, [pc, #504]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d05b      	beq.n	800155c <HAL_RCC_OscConfig+0x108>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d157      	bne.n	800155c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e242      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b8:	d106      	bne.n	80014c8 <HAL_RCC_OscConfig+0x74>
 80014ba:	4b76      	ldr	r3, [pc, #472]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a75      	ldr	r2, [pc, #468]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e01d      	b.n	8001504 <HAL_RCC_OscConfig+0xb0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x98>
 80014d2:	4b70      	ldr	r3, [pc, #448]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b6d      	ldr	r3, [pc, #436]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xb0>
 80014ec:	4b69      	ldr	r3, [pc, #420]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a68      	ldr	r2, [pc, #416]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b66      	ldr	r3, [pc, #408]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a65      	ldr	r2, [pc, #404]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fc00 	bl	8000d10 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fbfc 	bl	8000d10 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	@ 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e207      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b5b      	ldr	r3, [pc, #364]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0xc0>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fbec 	bl	8000d10 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fbe8 	bl	8000d10 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	@ 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e1f3      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	4b51      	ldr	r3, [pc, #324]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0xe8>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d063      	beq.n	8001632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156a:	4b4a      	ldr	r3, [pc, #296]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b47      	ldr	r3, [pc, #284]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d11c      	bne.n	80015bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b44      	ldr	r3, [pc, #272]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d116      	bne.n	80015bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x152>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e1c7      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4937      	ldr	r1, [pc, #220]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	e03a      	b.n	8001632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c4:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <HAL_RCC_OscConfig+0x244>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fba1 	bl	8000d10 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fb9d 	bl	8000d10 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e1a8      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4925      	ldr	r1, [pc, #148]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	e015      	b.n	8001632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <HAL_RCC_OscConfig+0x244>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fb80 	bl	8000d10 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001614:	f7ff fb7c 	bl	8000d10 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e187      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d036      	beq.n	80016ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d016      	beq.n	8001674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_RCC_OscConfig+0x248>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fb60 	bl	8000d10 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fb5c 	bl	8000d10 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e167      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_RCC_OscConfig+0x240>)
 8001668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x200>
 8001672:	e01b      	b.n	80016ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_OscConfig+0x248>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7ff fb49 	bl	8000d10 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	e00e      	b.n	80016a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fb45 	bl	8000d10 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d907      	bls.n	80016a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e150      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
 8001694:	40023800 	.word	0x40023800
 8001698:	42470000 	.word	0x42470000
 800169c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b88      	ldr	r3, [pc, #544]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ea      	bne.n	8001682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8097 	beq.w	80017e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b81      	ldr	r3, [pc, #516]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b7d      	ldr	r3, [pc, #500]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a7c      	ldr	r2, [pc, #496]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b7a      	ldr	r3, [pc, #488]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b77      	ldr	r3, [pc, #476]	@ (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b74      	ldr	r3, [pc, #464]	@ (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a73      	ldr	r2, [pc, #460]	@ (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fb05 	bl	8000d10 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff fb01 	bl	8000d10 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e10c      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b6a      	ldr	r3, [pc, #424]	@ (80018c8 <HAL_RCC_OscConfig+0x474>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x2ea>
 8001730:	4b64      	ldr	r3, [pc, #400]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001734:	4a63      	ldr	r2, [pc, #396]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	@ 0x70
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x324>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x30c>
 8001746:	4b5f      	ldr	r3, [pc, #380]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	4a5e      	ldr	r2, [pc, #376]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	@ 0x70
 8001752:	4b5c      	ldr	r3, [pc, #368]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001756:	4a5b      	ldr	r2, [pc, #364]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6713      	str	r3, [r2, #112]	@ 0x70
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x324>
 8001760:	4b58      	ldr	r3, [pc, #352]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001764:	4a57      	ldr	r2, [pc, #348]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	@ 0x70
 800176c:	4b55      	ldr	r3, [pc, #340]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001770:	4a54      	ldr	r2, [pc, #336]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001772:	f023 0304 	bic.w	r3, r3, #4
 8001776:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d015      	beq.n	80017ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fac6 	bl	8000d10 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fac2 	bl	8000d10 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0cb      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179e:	4b49      	ldr	r3, [pc, #292]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0ee      	beq.n	8001788 <HAL_RCC_OscConfig+0x334>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff fab0 	bl	8000d10 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff faac 	bl	8000d10 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0b5      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ca:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ee      	bne.n	80017b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b39      	ldr	r3, [pc, #228]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	4a38      	ldr	r2, [pc, #224]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a1 	beq.w	8001934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017f2:	4b34      	ldr	r3, [pc, #208]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d05c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d141      	bne.n	800188a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fa80 	bl	8000d10 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fa7c 	bl	8000d10 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e087      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	491b      	ldr	r1, [pc, #108]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	4b1b      	ldr	r3, [pc, #108]	@ (80018cc <HAL_RCC_OscConfig+0x478>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fa55 	bl	8000d10 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fa51 	bl	8000d10 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e05c      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x416>
 8001888:	e054      	b.n	8001934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <HAL_RCC_OscConfig+0x478>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fa3e 	bl	8000d10 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fa3a 	bl	8000d10 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e045      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_RCC_OscConfig+0x470>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x444>
 80018b6:	e03d      	b.n	8001934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e038      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40007000 	.word	0x40007000
 80018cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <HAL_RCC_OscConfig+0x4ec>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d028      	beq.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d121      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d11a      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	4293      	cmp	r3, r2
 800190a:	d111      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3b01      	subs	r3, #1
 800191a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cc      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b68      	ldr	r3, [pc, #416]	@ (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d90c      	bls.n	8001980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b65      	ldr	r3, [pc, #404]	@ (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	@ (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a58      	ldr	r2, [pc, #352]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a52      	ldr	r2, [pc, #328]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d044      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b3f      	ldr	r3, [pc, #252]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e067      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b37      	ldr	r3, [pc, #220]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4934      	ldr	r1, [pc, #208]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff f96c 	bl	8000d10 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f968 	bl	8000d10 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d20c      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	@ (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f8cc 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08003358 	.word	0x08003358
 8001b08:	2000005c 	.word	0x2000005c
 8001b0c:	20000060 	.word	0x20000060

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b14:	b094      	sub	sp, #80	@ 0x50
 8001b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b20:	2300      	movs	r3, #0
 8001b22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b28:	4b79      	ldr	r3, [pc, #484]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d00d      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x40>
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	f200 80e1 	bhi.w	8001cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b42:	e0db      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b44:	4b73      	ldr	r3, [pc, #460]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b46:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b48:	e0db      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b4a:	4b73      	ldr	r3, [pc, #460]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b4e:	e0d8      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b50:	4b6f      	ldr	r3, [pc, #444]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b58:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d063      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b82:	4622      	mov	r2, r4
 8001b84:	462b      	mov	r3, r5
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	0159      	lsls	r1, r3, #5
 8001b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b94:	0150      	lsls	r0, r2, #5
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	1a51      	subs	r1, r2, r1
 8001b9e:	6139      	str	r1, [r7, #16]
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bb4:	4659      	mov	r1, fp
 8001bb6:	018b      	lsls	r3, r1, #6
 8001bb8:	4651      	mov	r1, sl
 8001bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bbe:	4651      	mov	r1, sl
 8001bc0:	018a      	lsls	r2, r1, #6
 8001bc2:	4651      	mov	r1, sl
 8001bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001bc8:	4659      	mov	r1, fp
 8001bca:	eb63 0901 	sbc.w	r9, r3, r1
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001be2:	4690      	mov	r8, r2
 8001be4:	4699      	mov	r9, r3
 8001be6:	4623      	mov	r3, r4
 8001be8:	eb18 0303 	adds.w	r3, r8, r3
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	462b      	mov	r3, r5
 8001bf0:	eb49 0303 	adc.w	r3, r9, r3
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c02:	4629      	mov	r1, r5
 8001c04:	024b      	lsls	r3, r1, #9
 8001c06:	4621      	mov	r1, r4
 8001c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	024a      	lsls	r2, r1, #9
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c16:	2200      	movs	r2, #0
 8001c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c20:	f7fe fada 	bl	80001d8 <__aeabi_uldivmod>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c2c:	e058      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2e:	4b38      	ldr	r3, [pc, #224]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	2200      	movs	r2, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	4611      	mov	r1, r2
 8001c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c48:	4642      	mov	r2, r8
 8001c4a:	464b      	mov	r3, r9
 8001c4c:	f04f 0000 	mov.w	r0, #0
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	0159      	lsls	r1, r3, #5
 8001c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5a:	0150      	lsls	r0, r2, #5
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4641      	mov	r1, r8
 8001c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c66:	4649      	mov	r1, r9
 8001c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c80:	ebb2 040a 	subs.w	r4, r2, sl
 8001c84:	eb63 050b 	sbc.w	r5, r3, fp
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	00eb      	lsls	r3, r5, #3
 8001c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c96:	00e2      	lsls	r2, r4, #3
 8001c98:	4614      	mov	r4, r2
 8001c9a:	461d      	mov	r5, r3
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	18e3      	adds	r3, r4, r3
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	eb45 0303 	adc.w	r3, r5, r3
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	028b      	lsls	r3, r1, #10
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	028a      	lsls	r2, r1, #10
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	61fa      	str	r2, [r7, #28]
 8001cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd4:	f7fe fa80 	bl	80001d8 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	3301      	adds	r3, #1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001cf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cfa:	e002      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3750      	adds	r7, #80	@ 0x50
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	2000005c 	.word	0x2000005c

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08003368 	.word	0x08003368

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d60:	f7ff ffdc 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0b5b      	lsrs	r3, r3, #13
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	@ (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08003368 	.word	0x08003368

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7fe fe44 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f8b0 	bl	8001f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e03c      	b.n	8001eb6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <HAL_TIM_Base_Start+0xa0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d018      	beq.n	8001e80 <HAL_TIM_Base_Start+0x5c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e56:	d013      	beq.n	8001e80 <HAL_TIM_Base_Start+0x5c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec8 <HAL_TIM_Base_Start+0xa4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00e      	beq.n	8001e80 <HAL_TIM_Base_Start+0x5c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a19      	ldr	r2, [pc, #100]	@ (8001ecc <HAL_TIM_Base_Start+0xa8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_TIM_Base_Start+0x5c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a17      	ldr	r2, [pc, #92]	@ (8001ed0 <HAL_TIM_Base_Start+0xac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <HAL_TIM_Base_Start+0x5c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a16      	ldr	r2, [pc, #88]	@ (8001ed4 <HAL_TIM_Base_Start+0xb0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d111      	bne.n	8001ea4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2b06      	cmp	r3, #6
 8001e90:	d010      	beq.n	8001eb4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f042 0201 	orr.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea2:	e007      	b.n	8001eb4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40014000 	.word	0x40014000

08001ed8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a1a      	ldr	r2, [r3, #32]
 8001ee6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10f      	bne.n	8001f10 <HAL_TIM_Base_Stop+0x38>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	f240 4344 	movw	r3, #1092	@ 0x444
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_Base_Stop+0x38>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002024 <TIM_Base_SetConfig+0xfc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d00f      	beq.n	8001f60 <TIM_Base_SetConfig+0x38>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f46:	d00b      	beq.n	8001f60 <TIM_Base_SetConfig+0x38>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a37      	ldr	r2, [pc, #220]	@ (8002028 <TIM_Base_SetConfig+0x100>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <TIM_Base_SetConfig+0x38>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a36      	ldr	r2, [pc, #216]	@ (800202c <TIM_Base_SetConfig+0x104>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0x38>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a35      	ldr	r2, [pc, #212]	@ (8002030 <TIM_Base_SetConfig+0x108>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2b      	ldr	r2, [pc, #172]	@ (8002024 <TIM_Base_SetConfig+0xfc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01b      	beq.n	8001fb2 <TIM_Base_SetConfig+0x8a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f80:	d017      	beq.n	8001fb2 <TIM_Base_SetConfig+0x8a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <TIM_Base_SetConfig+0x100>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <TIM_Base_SetConfig+0x8a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	@ (800202c <TIM_Base_SetConfig+0x104>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00f      	beq.n	8001fb2 <TIM_Base_SetConfig+0x8a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a26      	ldr	r2, [pc, #152]	@ (8002030 <TIM_Base_SetConfig+0x108>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_Base_SetConfig+0x8a>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	@ (8002034 <TIM_Base_SetConfig+0x10c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <TIM_Base_SetConfig+0x8a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	@ (8002038 <TIM_Base_SetConfig+0x110>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0x8a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a23      	ldr	r2, [pc, #140]	@ (800203c <TIM_Base_SetConfig+0x114>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <TIM_Base_SetConfig+0xfc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d103      	bne.n	8001ff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f023 0201 	bic.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	611a      	str	r2, [r3, #16]
  }
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800

08002040 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e042      	b.n	80020d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7fe fd08 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	@ 0x24
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002082:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fd11 	bl	8002aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002098:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b20      	cmp	r3, #32
 80020f8:	d121      	bne.n	800213e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_UART_Transmit_IT+0x26>
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e01a      	b.n	8002140 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2221      	movs	r2, #33	@ 0x21
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002138:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	4613      	mov	r3, r2
 8002158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	d112      	bne.n	800218c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_UART_Receive_IT+0x26>
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e00b      	b.n	800218e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	461a      	mov	r2, r3
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 faba 	bl	80026fc <UART_Start_Receive_IT>
 8002188:	4603      	mov	r3, r0
 800218a:	e000      	b.n	800218e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0ba      	sub	sp, #232	@ 0xe8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80021d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10f      	bne.n	80021fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_UART_IRQHandler+0x66>
 80021ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fb99 	bl	800292e <UART_Receive_IT>
      return;
 80021fc:	e25b      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80de 	beq.w	80023c4 <HAL_UART_IRQHandler+0x22c>
 8002208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d106      	bne.n	8002222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002218:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80d1 	beq.w	80023c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00b      	beq.n	8002246 <HAL_UART_IRQHandler+0xae>
 800222e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_UART_IRQHandler+0xd2>
 8002252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800226a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_UART_IRQHandler+0xf6>
 8002276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f043 0204 	orr.w	r2, r3, #4
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800228e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d011      	beq.n	80022be <HAL_UART_IRQHandler+0x126>
 800229a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d005      	beq.n	80022be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f043 0208 	orr.w	r2, r3, #8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 81f2 	beq.w	80026ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_UART_IRQHandler+0x14e>
 80022d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fb24 	bl	800292e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022f0:	2b40      	cmp	r3, #64	@ 0x40
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d103      	bne.n	8002312 <HAL_UART_IRQHandler+0x17a>
 800230a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d04f      	beq.n	80023b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fa2c 	bl	8002770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002322:	2b40      	cmp	r3, #64	@ 0x40
 8002324:	d141      	bne.n	80023aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3314      	adds	r3, #20
 800232c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800233c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3314      	adds	r3, #20
 800234e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002352:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800235a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800235e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002362:	e841 2300 	strex	r3, r2, [r1]
 8002366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800236a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1d9      	bne.n	8002326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d013      	beq.n	80023a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800237e:	4a7e      	ldr	r2, [pc, #504]	@ (8002578 <HAL_UART_IRQHandler+0x3e0>)
 8002380:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fe73 	bl	8001072 <HAL_DMA_Abort_IT>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800239c:	4610      	mov	r0, r2
 800239e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a0:	e00e      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f994 	bl	80026d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	e00a      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f990 	bl	80026d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	e006      	b.n	80023c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f98c 	bl	80026d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023be:	e175      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c0:	bf00      	nop
    return;
 80023c2:	e173      	b.n	80026ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 814f 	bne.w	800266c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8148 	beq.w	800266c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8141 	beq.w	800266c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800240a:	2b40      	cmp	r3, #64	@ 0x40
 800240c:	f040 80b6 	bne.w	800257c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800241c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8145 	beq.w	80026b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800242a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800242e:	429a      	cmp	r2, r3
 8002430:	f080 813e 	bcs.w	80026b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800243a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002446:	f000 8088 	beq.w	800255a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	330c      	adds	r3, #12
 8002450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002454:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002458:	e853 3f00 	ldrex	r3, [r3]
 800245c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002476:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800247a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002482:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002486:	e841 2300 	strex	r3, r2, [r1]
 800248a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800248e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1d9      	bne.n	800244a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3314      	adds	r3, #20
 800249c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024a0:	e853 3f00 	ldrex	r3, [r3]
 80024a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3314      	adds	r3, #20
 80024b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024c6:	e841 2300 	strex	r3, r2, [r1]
 80024ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80024cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1e1      	bne.n	8002496 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3314      	adds	r3, #20
 80024d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80024e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80024e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3314      	adds	r3, #20
 80024f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80024f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e3      	bne.n	80024d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800253c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800253e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002544:	e841 2300 	strex	r3, r2, [r1]
 8002548:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800254a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e3      	bne.n	8002518 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fd1c 	bl	8000f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002568:	b29b      	uxth	r3, r3
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	b29b      	uxth	r3, r3
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 f8b7 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002576:	e09b      	b.n	80026b0 <HAL_UART_IRQHandler+0x518>
 8002578:	08002837 	.word	0x08002837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002584:	b29b      	uxth	r3, r3
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 808e 	beq.w	80026b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8089 	beq.w	80026b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	330c      	adds	r3, #12
 80025a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ac:	e853 3f00 	ldrex	r3, [r3]
 80025b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	330c      	adds	r3, #12
 80025c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80025c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80025cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025ce:	e841 2300 	strex	r3, r2, [r1]
 80025d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80025d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1e3      	bne.n	80025a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3314      	adds	r3, #20
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	623b      	str	r3, [r7, #32]
   return(result);
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3314      	adds	r3, #20
 80025fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e3      	bne.n	80025da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0310 	bic.w	r3, r3, #16
 8002636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002644:	61fa      	str	r2, [r7, #28]
 8002646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002648:	69b9      	ldr	r1, [r7, #24]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	e841 2300 	strex	r3, r2, [r1]
 8002650:	617b      	str	r3, [r7, #20]
   return(result);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e3      	bne.n	8002620 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800265e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002662:	4619      	mov	r1, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f83d 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800266a:	e023      	b.n	80026b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800266c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_UART_IRQHandler+0x4f4>
 8002678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800267c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f8ea 	bl	800285e <UART_Transmit_IT>
    return;
 800268a:	e014      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800268c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <HAL_UART_IRQHandler+0x51e>
 8002698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f92a 	bl	80028fe <UART_EndTransmit_IT>
    return;
 80026aa:	e004      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80026ac:	bf00      	nop
 80026ae:	e002      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80026b0:	bf00      	nop
 80026b2:	e000      	b.n	80026b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80026b4:	bf00      	nop
  }
}
 80026b6:	37e8      	adds	r7, #232	@ 0xe8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2222      	movs	r2, #34	@ 0x22
 8002726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002740:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002770:	b480      	push	{r7}
 8002772:	b095      	sub	sp, #84	@ 0x54
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800278e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002798:	643a      	str	r2, [r7, #64]	@ 0x40
 800279a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800279e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e5      	bne.n	8002778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e5      	bne.n	80027ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d119      	bne.n	800281c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	330c      	adds	r3, #12
 80027ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	e853 3f00 	ldrex	r3, [r3]
 80027f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0310 	bic.w	r3, r3, #16
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002808:	61ba      	str	r2, [r7, #24]
 800280a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	6979      	ldr	r1, [r7, #20]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	613b      	str	r3, [r7, #16]
   return(result);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e5      	bne.n	80027e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800282a:	bf00      	nop
 800282c:	3754      	adds	r7, #84	@ 0x54
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff3d 	bl	80026d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b21      	cmp	r3, #33	@ 0x21
 8002870:	d13e      	bne.n	80028f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287a:	d114      	bne.n	80028a6 <UART_Transmit_IT+0x48>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d110      	bne.n	80028a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	621a      	str	r2, [r3, #32]
 80028a4:	e008      	b.n	80028b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	1c59      	adds	r1, r3, #1
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6211      	str	r1, [r2, #32]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4619      	mov	r1, r3
 80028c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fecc 	bl	80026bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08c      	sub	sp, #48	@ 0x30
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b22      	cmp	r3, #34	@ 0x22
 8002940:	f040 80ae 	bne.w	8002aa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294c:	d117      	bne.n	800297e <UART_Receive_IT+0x50>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d113      	bne.n	800297e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296c:	b29a      	uxth	r2, r3
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	1c9a      	adds	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
 800297c:	e026      	b.n	80029cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002990:	d007      	beq.n	80029a2 <UART_Receive_IT+0x74>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <UART_Receive_IT+0x82>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e008      	b.n	80029c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d15d      	bne.n	8002a9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0220 	bic.w	r2, r2, #32
 80029ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d135      	bne.n	8002a92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	330c      	adds	r3, #12
 8002a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	e853 3f00 	ldrex	r3, [r3]
 8002a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f023 0310 	bic.w	r3, r3, #16
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4c:	623a      	str	r2, [r7, #32]
 8002a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a50:	69f9      	ldr	r1, [r7, #28]
 8002a52:	6a3a      	ldr	r2, [r7, #32]
 8002a54:	e841 2300 	strex	r3, r2, [r1]
 8002a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e5      	bne.n	8002a2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d10a      	bne.n	8002a84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fe2a 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
 8002a90:	e002      	b.n	8002a98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fbd0 	bl	8003238 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e002      	b.n	8002aa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e000      	b.n	8002aa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	@ 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab0:	b0c0      	sub	sp, #256	@ 0x100
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	ea40 0301 	orr.w	r3, r0, r1
 8002ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b04:	f021 010c 	bic.w	r1, r1, #12
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b12:	430b      	orrs	r3, r1
 8002b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	6999      	ldr	r1, [r3, #24]
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	ea40 0301 	orr.w	r3, r0, r1
 8002b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8002d78 <UART_SetConfig+0x2cc>)
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d005      	beq.n	8002b4c <UART_SetConfig+0xa0>
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b8d      	ldr	r3, [pc, #564]	@ (8002d7c <UART_SetConfig+0x2d0>)
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d104      	bne.n	8002b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b4c:	f7ff f906 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8002b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b54:	e003      	b.n	8002b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b56:	f7ff f8ed 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8002b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b68:	f040 810c 	bne.w	8002d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b7e:	4622      	mov	r2, r4
 8002b80:	462b      	mov	r3, r5
 8002b82:	1891      	adds	r1, r2, r2
 8002b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b86:	415b      	adcs	r3, r3
 8002b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b8e:	4621      	mov	r1, r4
 8002b90:	eb12 0801 	adds.w	r8, r2, r1
 8002b94:	4629      	mov	r1, r5
 8002b96:	eb43 0901 	adc.w	r9, r3, r1
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bae:	4690      	mov	r8, r2
 8002bb0:	4699      	mov	r9, r3
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	eb18 0303 	adds.w	r3, r8, r3
 8002bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	eb49 0303 	adc.w	r3, r9, r3
 8002bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002bda:	460b      	mov	r3, r1
 8002bdc:	18db      	adds	r3, r3, r3
 8002bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be0:	4613      	mov	r3, r2
 8002be2:	eb42 0303 	adc.w	r3, r2, r3
 8002be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002bf0:	f7fd faf2 	bl	80001d8 <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4b61      	ldr	r3, [pc, #388]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	011c      	lsls	r4, r3, #4
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	1891      	adds	r1, r2, r2
 8002c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c1c:	415b      	adcs	r3, r3
 8002c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c24:	4641      	mov	r1, r8
 8002c26:	eb12 0a01 	adds.w	sl, r2, r1
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c44:	4692      	mov	sl, r2
 8002c46:	469b      	mov	fp, r3
 8002c48:	4643      	mov	r3, r8
 8002c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8002c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c52:	464b      	mov	r3, r9
 8002c54:	eb4b 0303 	adc.w	r3, fp, r3
 8002c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c70:	460b      	mov	r3, r1
 8002c72:	18db      	adds	r3, r3, r3
 8002c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c76:	4613      	mov	r3, r2
 8002c78:	eb42 0303 	adc.w	r3, r2, r3
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c86:	f7fd faa7 	bl	80001d8 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002c92:	fba3 2301 	umull	r2, r3, r3, r1
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2264      	movs	r2, #100	@ 0x64
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	1acb      	subs	r3, r1, r3
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ca6:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002cb4:	441c      	add	r4, r3
 8002cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002cc8:	4642      	mov	r2, r8
 8002cca:	464b      	mov	r3, r9
 8002ccc:	1891      	adds	r1, r2, r2
 8002cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002cd0:	415b      	adcs	r3, r3
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002cd8:	4641      	mov	r1, r8
 8002cda:	1851      	adds	r1, r2, r1
 8002cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002cde:	4649      	mov	r1, r9
 8002ce0:	414b      	adcs	r3, r1
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002cf0:	4659      	mov	r1, fp
 8002cf2:	00cb      	lsls	r3, r1, #3
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	00ca      	lsls	r2, r1, #3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	4642      	mov	r2, r8
 8002d06:	189b      	adds	r3, r3, r2
 8002d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	460a      	mov	r2, r1
 8002d10:	eb42 0303 	adc.w	r3, r2, r3
 8002d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	18db      	adds	r3, r3, r3
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d32:	4613      	mov	r3, r2
 8002d34:	eb42 0303 	adc.w	r3, r2, r3
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d42:	f7fd fa49 	bl	80001d8 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	2164      	movs	r1, #100	@ 0x64
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	3332      	adds	r3, #50	@ 0x32
 8002d5e:	4a08      	ldr	r2, [pc, #32]	@ (8002d80 <UART_SetConfig+0x2d4>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4422      	add	r2, r4
 8002d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d74:	e106      	b.n	8002f84 <UART_SetConfig+0x4d8>
 8002d76:	bf00      	nop
 8002d78:	40011000 	.word	0x40011000
 8002d7c:	40011400 	.word	0x40011400
 8002d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d96:	4642      	mov	r2, r8
 8002d98:	464b      	mov	r3, r9
 8002d9a:	1891      	adds	r1, r2, r2
 8002d9c:	6239      	str	r1, [r7, #32]
 8002d9e:	415b      	adcs	r3, r3
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002da6:	4641      	mov	r1, r8
 8002da8:	1854      	adds	r4, r2, r1
 8002daa:	4649      	mov	r1, r9
 8002dac:	eb43 0501 	adc.w	r5, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	00eb      	lsls	r3, r5, #3
 8002dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dbe:	00e2      	lsls	r2, r4, #3
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	461d      	mov	r5, r3
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	18e3      	adds	r3, r4, r3
 8002dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002dcc:	464b      	mov	r3, r9
 8002dce:	eb45 0303 	adc.w	r3, r5, r3
 8002dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002df2:	4629      	mov	r1, r5
 8002df4:	008b      	lsls	r3, r1, #2
 8002df6:	4621      	mov	r1, r4
 8002df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	008a      	lsls	r2, r1, #2
 8002e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e04:	f7fd f9e8 	bl	80001d8 <__aeabi_uldivmod>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4b60      	ldr	r3, [pc, #384]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	011c      	lsls	r4, r3, #4
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e28:	4642      	mov	r2, r8
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	1891      	adds	r1, r2, r2
 8002e2e:	61b9      	str	r1, [r7, #24]
 8002e30:	415b      	adcs	r3, r3
 8002e32:	61fb      	str	r3, [r7, #28]
 8002e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e38:	4641      	mov	r1, r8
 8002e3a:	1851      	adds	r1, r2, r1
 8002e3c:	6139      	str	r1, [r7, #16]
 8002e3e:	4649      	mov	r1, r9
 8002e40:	414b      	adcs	r3, r1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e50:	4659      	mov	r1, fp
 8002e52:	00cb      	lsls	r3, r1, #3
 8002e54:	4651      	mov	r1, sl
 8002e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	00ca      	lsls	r2, r1, #3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	4603      	mov	r3, r0
 8002e64:	4642      	mov	r2, r8
 8002e66:	189b      	adds	r3, r3, r2
 8002e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e6c:	464b      	mov	r3, r9
 8002e6e:	460a      	mov	r2, r1
 8002e70:	eb42 0303 	adc.w	r3, r2, r3
 8002e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e90:	4649      	mov	r1, r9
 8002e92:	008b      	lsls	r3, r1, #2
 8002e94:	4641      	mov	r1, r8
 8002e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e9a:	4641      	mov	r1, r8
 8002e9c:	008a      	lsls	r2, r1, #2
 8002e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ea2:	f7fd f999 	bl	80001d8 <__aeabi_uldivmod>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002eae:	fba3 2301 	umull	r2, r3, r3, r1
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2264      	movs	r2, #100	@ 0x64
 8002eb6:	fb02 f303 	mul.w	r3, r2, r3
 8002eba:	1acb      	subs	r3, r1, r3
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	@ 0x32
 8002ec0:	4a33      	ldr	r2, [pc, #204]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ecc:	441c      	add	r4, r3
 8002ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	1891      	adds	r1, r2, r2
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	415b      	adcs	r3, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eec:	4641      	mov	r1, r8
 8002eee:	1851      	adds	r1, r2, r1
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	414b      	adcs	r3, r1
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f04:	4659      	mov	r1, fp
 8002f06:	00cb      	lsls	r3, r1, #3
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0e:	4651      	mov	r1, sl
 8002f10:	00ca      	lsls	r2, r1, #3
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	4642      	mov	r2, r8
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f1e:	464b      	mov	r3, r9
 8002f20:	460a      	mov	r2, r1
 8002f22:	eb42 0303 	adc.w	r3, r2, r3
 8002f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f40:	4649      	mov	r1, r9
 8002f42:	008b      	lsls	r3, r1, #2
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	008a      	lsls	r2, r1, #2
 8002f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f52:	f7fd f941 	bl	80001d8 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	2164      	movs	r1, #100	@ 0x64
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	3332      	adds	r3, #50	@ 0x32
 8002f6e:	4a08      	ldr	r2, [pc, #32]	@ (8002f90 <UART_SetConfig+0x4e4>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	f003 020f 	and.w	r2, r3, #15
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4422      	add	r2, r4
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f90:	51eb851f 	.word	0x51eb851f

08002f94 <btnPress>:
			return false;
	}
	return false;
}

bool btnPress(uint8_t ch){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
    static bool btnState[_BTN_MAX_CH] = {false};  // 버튼 상태 저장 배열
    bool currentState;

    if(ch >= _BTN_MAX_CH){
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <btnPress+0x14>
        return false;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e047      	b.n	8003038 <btnPress+0xa4>
    }

    currentState = !HAL_GPIO_ReadPin(btn_tbl[ch].port, btn_tbl[ch].pinNumber);
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	4a25      	ldr	r2, [pc, #148]	@ (8003040 <btnPress+0xac>)
 8002fac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	4923      	ldr	r1, [pc, #140]	@ (8003040 <btnPress+0xac>)
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	440b      	add	r3, r1
 8002fb8:	889b      	ldrh	r3, [r3, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f7fe f9ff 	bl	80013c0 <HAL_GPIO_ReadPin>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]

    if(currentState && !btnState[ch]) {
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d026      	beq.n	8003022 <btnPress+0x8e>
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <btnPress+0xb0>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01e      	beq.n	8003022 <btnPress+0x8e>
        HAL_Delay(100);  // Debounce delay
 8002fe4:	2064      	movs	r0, #100	@ 0x64
 8002fe6:	f7fd fe9f 	bl	8000d28 <HAL_Delay>
        currentState = !HAL_GPIO_ReadPin(btn_tbl[ch].port, btn_tbl[ch].pinNumber);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	4a14      	ldr	r2, [pc, #80]	@ (8003040 <btnPress+0xac>)
 8002fee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4912      	ldr	r1, [pc, #72]	@ (8003040 <btnPress+0xac>)
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	440b      	add	r3, r1
 8002ffa:	889b      	ldrh	r3, [r3, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f7fe f9de 	bl	80013c0 <HAL_GPIO_ReadPin>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
        if(currentState) {
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00f      	beq.n	8003036 <btnPress+0xa2>
            btnState[ch] = true;  // 버튼 상태 업데이트
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <btnPress+0xb0>)
 800301a:	2101      	movs	r1, #1
 800301c:	54d1      	strb	r1, [r2, r3]
            return true;  // 버튼이 눌렸음을 반환
 800301e:	2301      	movs	r3, #1
 8003020:	e00a      	b.n	8003038 <btnPress+0xa4>
        }
    } else if(!currentState) {
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <btnPress+0xa2>
        btnState[ch] = false;  // 버튼이 떼어졌음을 업데이트
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <btnPress+0xb0>)
 8003032:	2100      	movs	r1, #0
 8003034:	54d1      	strb	r1, [r2, r3]
    }

    return false;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000068 	.word	0x20000068
 8003044:	200001a8 	.word	0x200001a8

08003048 <delay_us>:

#include "delay.h"

extern TIM_HandleTypeDef htim10;

void delay_us(uint16_t us){
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8003052:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <delay_us+0x34>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim10);
 800305a:	4808      	ldr	r0, [pc, #32]	@ (800307c <delay_us+0x34>)
 800305c:	f7fe fee2 	bl	8001e24 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim10) < us);
 8003060:	bf00      	nop
 8003062:	4b06      	ldr	r3, [pc, #24]	@ (800307c <delay_us+0x34>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	429a      	cmp	r2, r3
 800306c:	d3f9      	bcc.n	8003062 <delay_us+0x1a>

	HAL_TIM_Base_Stop(&htim10);
 800306e:	4803      	ldr	r0, [pc, #12]	@ (800307c <delay_us+0x34>)
 8003070:	f7fe ff32 	bl	8001ed8 <HAL_TIM_Base_Stop>
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000110 	.word	0x20000110

08003080 <wait>:

void wait(){
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	ledOn(3);
 8003084:	2003      	movs	r0, #3
 8003086:	f000 f817 	bl	80030b8 <ledOn>
	HAL_Delay(2000);
 800308a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800308e:	f7fd fe4b 	bl	8000d28 <HAL_Delay>
	ledOff(3);
 8003092:	2003      	movs	r0, #3
 8003094:	f000 f82c 	bl	80030f0 <ledOff>
}
 8003098:	bf00      	nop
 800309a:	bd80      	pop	{r7, pc}

0800309c <LEDInit>:
//						{GPIOA, GPIO_PIN_9, GPIO_PIN_SET, GPIO_PIN_RESET},
//						{GPIOA, GPIO_PIN_8, GPIO_PIN_SET, GPIO_PIN_RESET},
//						{GPIOB, GPIO_PIN_10, GPIO_PIN_SET, GPIO_PIN_RESET}
						};

void LEDInit(){
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	currentFloorLED(currentFloor-1);
 80030a0:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <LEDInit+0x18>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f83d 	bl	8003128 <currentFloorLED>
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000058 	.word	0x20000058

080030b8 <ledOn>:

void ledOn(uint8_t ch){
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pinNumber, led_tbl[ch].on);
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	4a09      	ldr	r2, [pc, #36]	@ (80030ec <ledOn+0x34>)
 80030c6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	4a07      	ldr	r2, [pc, #28]	@ (80030ec <ledOn+0x34>)
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	8899      	ldrh	r1, [r3, #4]
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	4a05      	ldr	r2, [pc, #20]	@ (80030ec <ledOn+0x34>)
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	799b      	ldrb	r3, [r3, #6]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7fe f986 	bl	80013f0 <HAL_GPIO_WritePin>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000080 	.word	0x20000080

080030f0 <ledOff>:

void ledOff(uint8_t ch){
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pinNumber, led_tbl[ch].off);
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <ledOff+0x34>)
 80030fe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4a07      	ldr	r2, [pc, #28]	@ (8003124 <ledOff+0x34>)
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	8899      	ldrh	r1, [r3, #4]
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	4a05      	ldr	r2, [pc, #20]	@ (8003124 <ledOff+0x34>)
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	79db      	ldrb	r3, [r3, #7]
 8003116:	461a      	mov	r2, r3
 8003118:	f7fe f96a 	bl	80013f0 <HAL_GPIO_WritePin>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000080 	.word	0x20000080

08003128 <currentFloorLED>:

void currentFloorLED(uint8_t ch){
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i<3; i++){
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	e006      	b.n	8003146 <currentFloorLED+0x1e>
		ledOff(i);
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffd8 	bl	80030f0 <ledOff>
	for(uint8_t i=0; i<3; i++){
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	3301      	adds	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	7bfb      	ldrb	r3, [r7, #15]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d9f5      	bls.n	8003138 <currentFloorLED+0x10>
	}
	ledOn(ch);
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ffb2 	bl	80030b8 <ledOn>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <stepMotor>:

#include "stepper.h"

extern uint8_t currentFloor;

void stepMotor(uint8_t step){
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_Port, IN1_Pin, HALF_STEP_SEQ[step][0]);
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4a15      	ldr	r2, [pc, #84]	@ (80031c0 <stepMotor+0x64>)
 800316a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800316e:	461a      	mov	r2, r3
 8003170:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003174:	4813      	ldr	r0, [pc, #76]	@ (80031c4 <stepMotor+0x68>)
 8003176:	f7fe f93b 	bl	80013f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_Port, IN2_Pin, HALF_STEP_SEQ[step][1]);
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <stepMotor+0x64>)
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	461a      	mov	r2, r3
 8003186:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800318a:	480e      	ldr	r0, [pc, #56]	@ (80031c4 <stepMotor+0x68>)
 800318c:	f7fe f930 	bl	80013f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_Port, IN3_Pin, HALF_STEP_SEQ[step][2]);
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4a0b      	ldr	r2, [pc, #44]	@ (80031c0 <stepMotor+0x64>)
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	789b      	ldrb	r3, [r3, #2]
 800319a:	461a      	mov	r2, r3
 800319c:	2140      	movs	r1, #64	@ 0x40
 800319e:	4809      	ldr	r0, [pc, #36]	@ (80031c4 <stepMotor+0x68>)
 80031a0:	f7fe f926 	bl	80013f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_Port, IN4_Pin, HALF_STEP_SEQ[step][3]);
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	4a06      	ldr	r2, [pc, #24]	@ (80031c0 <stepMotor+0x64>)
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	461a      	mov	r2, r3
 80031b0:	2120      	movs	r1, #32
 80031b2:	4804      	ldr	r0, [pc, #16]	@ (80031c4 <stepMotor+0x68>)
 80031b4:	f7fe f91c 	bl	80013f0 <HAL_GPIO_WritePin>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	08003370 	.word	0x08003370
 80031c4:	40020800 	.word	0x40020800

080031c8 <infiniteRotation>:
}
void rotateDegrees(uint16_t degrees, uint8_t direction){
	uint16_t steps = (uint16_t)(((uint32_t)degrees * STEPS_PER_REVOLATION) / 360);
	rotateSteps(steps, direction);
}
void infiniteRotation(uint8_t direction, uint8_t targetFloor){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	460a      	mov	r2, r1
 80031d2:	71fb      	strb	r3, [r7, #7]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
	while(currentFloor != targetFloor){
 80031dc:	e01c      	b.n	8003218 <infiniteRotation+0x50>
		if (interruptFlag) {
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <infiniteRotation+0x68>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d11e      	bne.n	8003224 <infiniteRotation+0x5c>
			// 플래그가 설정되면 함수 실행 중단
			break;
		}
		uint8_t step;
		i++;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	3301      	adds	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
		if(direction == DIR_CW){
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <infiniteRotation+0x34>
			step = i % 8;
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	73bb      	strb	r3, [r7, #14]
 80031fa:	e005      	b.n	8003208 <infiniteRotation+0x40>
		}
		else{
			step = 7 - (i % 8);
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	43db      	mvns	r3, r3
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	73bb      	strb	r3, [r7, #14]
		}
		stepMotor(step);
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ffa6 	bl	800315c <stepMotor>
		delay_us(1000);
 8003210:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003214:	f7ff ff18 	bl	8003048 <delay_us>
	while(currentFloor != targetFloor){
 8003218:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <infiniteRotation+0x6c>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	79ba      	ldrb	r2, [r7, #6]
 800321e:	429a      	cmp	r2, r3
 8003220:	d1dd      	bne.n	80031de <infiniteRotation+0x16>
	}
}
 8003222:	e000      	b.n	8003226 <infiniteRotation+0x5e>
			break;
 8003224:	bf00      	nop
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200001a2 	.word	0x200001a2
 8003234:	20000058 	.word	0x20000058

08003238 <HAL_UART_RxCpltCallback>:

uint8_t ACK0[] = "Continue...\r\n\r\n";
uint8_t ACK1[] = "Going to Floor 1...\r\n\r\n";
uint8_t ACK2[] = "Going to Floor 3...\r\n\r\n";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2){
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <HAL_UART_RxCpltCallback+0x8c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d138      	bne.n	80032bc <HAL_UART_RxCpltCallback+0x84>
        if (rxData == '1') {
 800324a:	4b1f      	ldr	r3, [pc, #124]	@ (80032c8 <HAL_UART_RxCpltCallback+0x90>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b31      	cmp	r3, #49	@ 0x31
 8003250:	d108      	bne.n	8003264 <HAL_UART_RxCpltCallback+0x2c>
        	HAL_UART_Transmit_IT(&huart2, ACK0, sizeof(ACK0));
 8003252:	2210      	movs	r2, #16
 8003254:	491d      	ldr	r1, [pc, #116]	@ (80032cc <HAL_UART_RxCpltCallback+0x94>)
 8003256:	481e      	ldr	r0, [pc, #120]	@ (80032d0 <HAL_UART_RxCpltCallback+0x98>)
 8003258:	f7fe ff42 	bl	80020e0 <HAL_UART_Transmit_IT>
            restart = true;
 800325c:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <HAL_UART_RxCpltCallback+0x9c>)
 800325e:	2201      	movs	r2, #1
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e026      	b.n	80032b2 <HAL_UART_RxCpltCallback+0x7a>
        }
        else if (rxData == '2') {
 8003264:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <HAL_UART_RxCpltCallback+0x90>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b32      	cmp	r3, #50	@ 0x32
 800326a:	d10c      	bne.n	8003286 <HAL_UART_RxCpltCallback+0x4e>
        	HAL_UART_Transmit_IT(&huart2, ACK1, sizeof(ACK1));
 800326c:	2218      	movs	r2, #24
 800326e:	491a      	ldr	r1, [pc, #104]	@ (80032d8 <HAL_UART_RxCpltCallback+0xa0>)
 8003270:	4817      	ldr	r0, [pc, #92]	@ (80032d0 <HAL_UART_RxCpltCallback+0x98>)
 8003272:	f7fe ff35 	bl	80020e0 <HAL_UART_Transmit_IT>
			infiniteRotation(DIR_CCW, 1);
 8003276:	2101      	movs	r1, #1
 8003278:	2001      	movs	r0, #1
 800327a:	f7ff ffa5 	bl	80031c8 <infiniteRotation>
			forcedMove = true;
 800327e:	4b17      	ldr	r3, [pc, #92]	@ (80032dc <HAL_UART_RxCpltCallback+0xa4>)
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e015      	b.n	80032b2 <HAL_UART_RxCpltCallback+0x7a>
        }
        else if (rxData == '3') {
 8003286:	4b10      	ldr	r3, [pc, #64]	@ (80032c8 <HAL_UART_RxCpltCallback+0x90>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b33      	cmp	r3, #51	@ 0x33
 800328c:	d10c      	bne.n	80032a8 <HAL_UART_RxCpltCallback+0x70>
       	    HAL_UART_Transmit_IT(&huart2, ACK2, sizeof(ACK2));
 800328e:	2218      	movs	r2, #24
 8003290:	4913      	ldr	r1, [pc, #76]	@ (80032e0 <HAL_UART_RxCpltCallback+0xa8>)
 8003292:	480f      	ldr	r0, [pc, #60]	@ (80032d0 <HAL_UART_RxCpltCallback+0x98>)
 8003294:	f7fe ff24 	bl	80020e0 <HAL_UART_Transmit_IT>
       	    infiniteRotation(DIR_CW, 3);
 8003298:	2103      	movs	r1, #3
 800329a:	2000      	movs	r0, #0
 800329c:	f7ff ff94 	bl	80031c8 <infiniteRotation>
            forcedMove = true;
 80032a0:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_UART_RxCpltCallback+0xa4>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e004      	b.n	80032b2 <HAL_UART_RxCpltCallback+0x7a>
        }
        else {
            HAL_UART_Transmit_IT(&huart2, Warn, sizeof(Warn));
 80032a8:	2212      	movs	r2, #18
 80032aa:	490e      	ldr	r1, [pc, #56]	@ (80032e4 <HAL_UART_RxCpltCallback+0xac>)
 80032ac:	4808      	ldr	r0, [pc, #32]	@ (80032d0 <HAL_UART_RxCpltCallback+0x98>)
 80032ae:	f7fe ff17 	bl	80020e0 <HAL_UART_Transmit_IT>
        }

        // 다시 UART 수신 인터럽트 활성화
        HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 80032b2:	2201      	movs	r2, #1
 80032b4:	4904      	ldr	r1, [pc, #16]	@ (80032c8 <HAL_UART_RxCpltCallback+0x90>)
 80032b6:	4806      	ldr	r0, [pc, #24]	@ (80032d0 <HAL_UART_RxCpltCallback+0x98>)
 80032b8:	f7fe ff48 	bl	800214c <HAL_UART_Receive_IT>
    }
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40004400 	.word	0x40004400
 80032c8:	200001a0 	.word	0x200001a0
 80032cc:	200000b4 	.word	0x200000b4
 80032d0:	20000158 	.word	0x20000158
 80032d4:	200001a1 	.word	0x200001a1
 80032d8:	200000c4 	.word	0x200000c4
 80032dc:	200001ab 	.word	0x200001ab
 80032e0:	200000dc 	.word	0x200000dc
 80032e4:	200000a0 	.word	0x200000a0

080032e8 <memset>:
 80032e8:	4402      	add	r2, r0
 80032ea:	4603      	mov	r3, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d100      	bne.n	80032f2 <memset+0xa>
 80032f0:	4770      	bx	lr
 80032f2:	f803 1b01 	strb.w	r1, [r3], #1
 80032f6:	e7f9      	b.n	80032ec <memset+0x4>

080032f8 <__libc_init_array>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003330 <__libc_init_array+0x38>)
 80032fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003334 <__libc_init_array+0x3c>)
 80032fe:	1b64      	subs	r4, r4, r5
 8003300:	10a4      	asrs	r4, r4, #2
 8003302:	2600      	movs	r6, #0
 8003304:	42a6      	cmp	r6, r4
 8003306:	d109      	bne.n	800331c <__libc_init_array+0x24>
 8003308:	4d0b      	ldr	r5, [pc, #44]	@ (8003338 <__libc_init_array+0x40>)
 800330a:	4c0c      	ldr	r4, [pc, #48]	@ (800333c <__libc_init_array+0x44>)
 800330c:	f000 f818 	bl	8003340 <_init>
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	2600      	movs	r6, #0
 8003316:	42a6      	cmp	r6, r4
 8003318:	d105      	bne.n	8003326 <__libc_init_array+0x2e>
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003320:	4798      	blx	r3
 8003322:	3601      	adds	r6, #1
 8003324:	e7ee      	b.n	8003304 <__libc_init_array+0xc>
 8003326:	f855 3b04 	ldr.w	r3, [r5], #4
 800332a:	4798      	blx	r3
 800332c:	3601      	adds	r6, #1
 800332e:	e7f2      	b.n	8003316 <__libc_init_array+0x1e>
 8003330:	08003398 	.word	0x08003398
 8003334:	08003398 	.word	0x08003398
 8003338:	08003398 	.word	0x08003398
 800333c:	0800339c 	.word	0x0800339c

08003340 <_init>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	bf00      	nop
 8003344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003346:	bc08      	pop	{r3}
 8003348:	469e      	mov	lr, r3
 800334a:	4770      	bx	lr

0800334c <_fini>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr
