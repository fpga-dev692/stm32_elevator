
Stepper_Soft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800328c  0800328c  0000428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c4  080032c4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080032c4  080032c4  000042c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032cc  080032cc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032cc  080032cc  000042cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032d0  080032d0  000042d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080032d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000005c  08003330  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003330  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cabe  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002144  00000000  00000000  00011b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00013c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f9  00000000  00000000  00014830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001729e  00000000  00000000  00015129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103ae  00000000  00000000  0002c3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc7c  00000000  00000000  0003c775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ca3f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f30  00000000  00000000  000ca434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cd364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003274 	.word	0x08003274

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08003274 	.word	0x08003274

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_GPIO_EXTI_Callback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM10_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12){
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80004d8:	d11e      	bne.n	8000518 <HAL_GPIO_EXTI_Callback+0x50>
		//debouncing
		HAL_Delay(100);
 80004da:	2064      	movs	r0, #100	@ 0x64
 80004dc:	f000 fbfc 	bl	8000cd8 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){
 80004e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e4:	4836      	ldr	r0, [pc, #216]	@ (80005c0 <HAL_GPIO_EXTI_Callback+0xf8>)
 80004e6:	f000 ff43 	bl	8001370 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d113      	bne.n	8000518 <HAL_GPIO_EXTI_Callback+0x50>

			restart = false;
 80004f0:	4b34      	ldr	r3, [pc, #208]	@ (80005c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, Message, sizeof(Message));
 80004f6:	2214      	movs	r2, #20
 80004f8:	4933      	ldr	r1, [pc, #204]	@ (80005c8 <HAL_GPIO_EXTI_Callback+0x100>)
 80004fa:	4834      	ldr	r0, [pc, #208]	@ (80005cc <HAL_GPIO_EXTI_Callback+0x104>)
 80004fc:	f001 fdc8 	bl	8002090 <HAL_UART_Transmit_IT>
			while(!restart){
 8000500:	e003      	b.n	800050a <HAL_GPIO_EXTI_Callback+0x42>
				HAL_Delay(1000);
 8000502:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000506:	f000 fbe7 	bl	8000cd8 <HAL_Delay>
			while(!restart){
 800050a:	4b2e      	ldr	r3, [pc, #184]	@ (80005c4 <HAL_GPIO_EXTI_Callback+0xfc>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	f083 0301 	eor.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <HAL_GPIO_EXTI_Callback+0x3a>
			}
		}
	}
	if(GPIO_Pin == GPIO_PIN_15){
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800051e:	d109      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x6c>
		currentFloor = 1;
 8000520:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
		currentFloorLED(currentFloor-1);
 8000526:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	3b01      	subs	r3, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f002 fdd2 	bl	80030d8 <currentFloorLED>
	}
	if(GPIO_Pin == GPIO_PIN_14){
 8000534:	88fb      	ldrh	r3, [r7, #6]
 8000536:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800053a:	d109      	bne.n	8000550 <HAL_GPIO_EXTI_Callback+0x88>
		currentFloor = 2;
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 800053e:	2202      	movs	r2, #2
 8000540:	701a      	strb	r2, [r3, #0]
		currentFloorLED(currentFloor-1);
 8000542:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	3b01      	subs	r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f002 fdc4 	bl	80030d8 <currentFloorLED>
	}
	if(GPIO_Pin == GPIO_PIN_13){
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000556:	d10a      	bne.n	800056e <HAL_GPIO_EXTI_Callback+0xa6>
		currentFloor = 3;
 8000558:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 800055a:	2203      	movs	r2, #3
 800055c:	701a      	strb	r2, [r3, #0]
		currentFloorLED(currentFloor-1);
 800055e:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3b01      	subs	r3, #1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fdb6 	bl	80030d8 <currentFloorLED>
					wait();
					break;
			}
		}
	}
}
 800056c:	e024      	b.n	80005b8 <HAL_GPIO_EXTI_Callback+0xf0>
	else if(GPIO_Pin == GPIO_PIN_3){
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	2b08      	cmp	r3, #8
 8000572:	d121      	bne.n	80005b8 <HAL_GPIO_EXTI_Callback+0xf0>
		HAL_Delay(100);
 8000574:	2064      	movs	r0, #100	@ 0x64
 8000576:	f000 fbaf 	bl	8000cd8 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 800057a:	2108      	movs	r1, #8
 800057c:	4810      	ldr	r0, [pc, #64]	@ (80005c0 <HAL_GPIO_EXTI_Callback+0xf8>)
 800057e:	f000 fef7 	bl	8001370 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d117      	bne.n	80005b8 <HAL_GPIO_EXTI_Callback+0xf0>
			switch(currentFloor){
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <HAL_GPIO_EXTI_Callback+0x108>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d00c      	beq.n	80005aa <HAL_GPIO_EXTI_Callback+0xe2>
 8000590:	2b03      	cmp	r3, #3
 8000592:	dc11      	bgt.n	80005b8 <HAL_GPIO_EXTI_Callback+0xf0>
 8000594:	2b01      	cmp	r3, #1
 8000596:	d001      	beq.n	800059c <HAL_GPIO_EXTI_Callback+0xd4>
 8000598:	2b02      	cmp	r3, #2
					break;
 800059a:	e00d      	b.n	80005b8 <HAL_GPIO_EXTI_Callback+0xf0>
					infiniteRotation(DIR_CW, 2);
 800059c:	2102      	movs	r1, #2
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fdea 	bl	8003178 <infiniteRotation>
					wait();
 80005a4:	f002 fd44 	bl	8003030 <wait>
					break;
 80005a8:	e006      	b.n	80005b8 <HAL_GPIO_EXTI_Callback+0xf0>
					infiniteRotation(DIR_CCW, 2);
 80005aa:	2102      	movs	r1, #2
 80005ac:	2001      	movs	r0, #1
 80005ae:	f002 fde3 	bl	8003178 <infiniteRotation>
					wait();
 80005b2:	f002 fd3d 	bl	8003030 <wait>
					break;
 80005b6:	bf00      	nop
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40020400 	.word	0x40020400
 80005c4:	20000109 	.word	0x20000109
 80005c8:	20000000 	.word	0x20000000
 80005cc:	200000c0 	.word	0x200000c0
 80005d0:	20000014 	.word	0x20000014

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fb0c 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f854 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f908 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f8dc 	bl	80007a0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80005e8:	f000 f8b6 	bl	8000758 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 80005ec:	2201      	movs	r2, #1
 80005ee:	4923      	ldr	r1, [pc, #140]	@ (800067c <main+0xa8>)
 80005f0:	4823      	ldr	r0, [pc, #140]	@ (8000680 <main+0xac>)
 80005f2:	f001 fd83 	bl	80020fc <HAL_UART_Receive_IT>
  LEDInit();
 80005f6:	f002 fd29 	bl	800304c <LEDInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // floor 3
	  if(btnPress(2)){
 80005fa:	2002      	movs	r0, #2
 80005fc:	f002 fca2 	bl	8002f44 <btnPress>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d019      	beq.n	800063a <main+0x66>
		  switch(currentFloor){
 8000606:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <main+0xb0>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b03      	cmp	r3, #3
 800060c:	d014      	beq.n	8000638 <main+0x64>
 800060e:	2b03      	cmp	r3, #3
 8000610:	dc13      	bgt.n	800063a <main+0x66>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d002      	beq.n	800061c <main+0x48>
 8000616:	2b02      	cmp	r3, #2
 8000618:	d007      	beq.n	800062a <main+0x56>
 800061a:	e00e      	b.n	800063a <main+0x66>
		  	  case 1:
		  		  infiniteRotation(DIR_CW, 3);
 800061c:	2103      	movs	r1, #3
 800061e:	2000      	movs	r0, #0
 8000620:	f002 fdaa 	bl	8003178 <infiniteRotation>
		  		  wait();
 8000624:	f002 fd04 	bl	8003030 <wait>
		  		  break;
 8000628:	e007      	b.n	800063a <main+0x66>
		  	  case 2:
		  		  infiniteRotation(DIR_CW, 3);
 800062a:	2103      	movs	r1, #3
 800062c:	2000      	movs	r0, #0
 800062e:	f002 fda3 	bl	8003178 <infiniteRotation>
		  		  wait();
 8000632:	f002 fcfd 	bl	8003030 <wait>
		  		  break;
 8000636:	e000      	b.n	800063a <main+0x66>
		  	  case 3:
		  		  break;
 8000638:	bf00      	nop
		  }
//		  currentFloor = 3;
	  }
	  // floor 1
	  if(btnPress(0)){
 800063a:	2000      	movs	r0, #0
 800063c:	f002 fc82 	bl	8002f44 <btnPress>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0d9      	beq.n	80005fa <main+0x26>
		  switch(currentFloor){
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <main+0xb0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d00c      	beq.n	8000668 <main+0x94>
 800064e:	2b03      	cmp	r3, #3
 8000650:	dcd3      	bgt.n	80005fa <main+0x26>
 8000652:	2b01      	cmp	r3, #1
 8000654:	d00f      	beq.n	8000676 <main+0xa2>
 8000656:	2b02      	cmp	r3, #2
 8000658:	d10e      	bne.n	8000678 <main+0xa4>
		  	  case 1:
	  	  		  break;
	  	  	  case 2:
	  	  		  infiniteRotation(DIR_CCW, 1);
 800065a:	2101      	movs	r1, #1
 800065c:	2001      	movs	r0, #1
 800065e:	f002 fd8b 	bl	8003178 <infiniteRotation>
	  	  		  wait();
 8000662:	f002 fce5 	bl	8003030 <wait>
	  	  		  break;
 8000666:	e007      	b.n	8000678 <main+0xa4>
	  	  	  case 3:
	  	  		  infiniteRotation(DIR_CCW, 1);
 8000668:	2101      	movs	r1, #1
 800066a:	2001      	movs	r0, #1
 800066c:	f002 fd84 	bl	8003178 <infiniteRotation>
	  	  		  wait();
 8000670:	f002 fcde 	bl	8003030 <wait>
	   		  	  break;
 8000674:	e000      	b.n	8000678 <main+0xa4>
	  	  		  break;
 8000676:	bf00      	nop
	  if(btnPress(2)){
 8000678:	e7bf      	b.n	80005fa <main+0x26>
 800067a:	bf00      	nop
 800067c:	20000108 	.word	0x20000108
 8000680:	200000c0 	.word	0x200000c0
 8000684:	20000014 	.word	0x20000014

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	@ 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fdc0 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a26      	ldr	r2, [pc, #152]	@ (8000750 <SystemClock_Config+0xc8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <SystemClock_Config+0xc8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a20      	ldr	r2, [pc, #128]	@ (8000754 <SystemClock_Config+0xcc>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <SystemClock_Config+0xcc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006fc:	2364      	movs	r3, #100	@ 0x64
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fe79 	bl	8001404 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f93c 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000728:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2103      	movs	r1, #3
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f8db 	bl	80018f4 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000744:	f000 f926 	bl	8000994 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	@ 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_TIM10_Init+0x40>)
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <MX_TIM10_Init+0x44>)
 8000760:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8000762:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_TIM10_Init+0x40>)
 8000764:	2263      	movs	r2, #99	@ 0x63
 8000766:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_TIM10_Init+0x40>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_TIM10_Init+0x40>)
 8000770:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_TIM10_Init+0x40>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_TIM10_Init+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_TIM10_Init+0x40>)
 8000784:	f001 fad6 	bl	8001d34 <HAL_TIM_Base_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800078e:	f000 f901 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000078 	.word	0x20000078
 800079c:	40014400 	.word	0x40014400

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f001 fc0a 	bl	8001ff0 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f8d7 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000c0 	.word	0x200000c0
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b5d      	ldr	r3, [pc, #372]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a5c      	ldr	r2, [pc, #368]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b5a      	ldr	r3, [pc, #360]	@ (8000984 <MX_GPIO_Init+0x190>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b56      	ldr	r3, [pc, #344]	@ (8000984 <MX_GPIO_Init+0x190>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a55      	ldr	r2, [pc, #340]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b53      	ldr	r3, [pc, #332]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b4f      	ldr	r3, [pc, #316]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a4e      	ldr	r2, [pc, #312]	@ (8000984 <MX_GPIO_Init+0x190>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b4c      	ldr	r3, [pc, #304]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b48      	ldr	r3, [pc, #288]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a47      	ldr	r2, [pc, #284]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b45      	ldr	r3, [pc, #276]	@ (8000984 <MX_GPIO_Init+0x190>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	21e0      	movs	r1, #224	@ 0xe0
 800087e:	4842      	ldr	r0, [pc, #264]	@ (8000988 <MX_GPIO_Init+0x194>)
 8000880:	f000 fd8e 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 7150 	mov.w	r1, #832	@ 0x340
 800088a:	4840      	ldr	r0, [pc, #256]	@ (800098c <MX_GPIO_Init+0x198>)
 800088c:	f000 fd88 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	483e      	ldr	r0, [pc, #248]	@ (8000990 <MX_GPIO_Init+0x19c>)
 8000896:	f000 fd83 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800089a:	23e0      	movs	r3, #224	@ 0xe0
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4835      	ldr	r0, [pc, #212]	@ (8000988 <MX_GPIO_Init+0x194>)
 80008b2:	f000 fbd9 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 80008b6:	f241 0308 	movw	r3, #4104	@ 0x1008
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4830      	ldr	r0, [pc, #192]	@ (8000990 <MX_GPIO_Init+0x19c>)
 80008ce:	f000 fbcb 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008d2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	4829      	ldr	r0, [pc, #164]	@ (8000990 <MX_GPIO_Init+0x19c>)
 80008ea:	f000 fbbd 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80008ee:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4821      	ldr	r0, [pc, #132]	@ (800098c <MX_GPIO_Init+0x198>)
 8000908:	f000 fbae 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800090c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4819      	ldr	r0, [pc, #100]	@ (8000988 <MX_GPIO_Init+0x194>)
 8000922:	f000 fba1 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000926:	2320      	movs	r3, #32
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4815      	ldr	r0, [pc, #84]	@ (8000990 <MX_GPIO_Init+0x19c>)
 800093a:	f000 fb95 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800093e:	2340      	movs	r3, #64	@ 0x40
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480e      	ldr	r0, [pc, #56]	@ (8000990 <MX_GPIO_Init+0x19c>)
 8000956:	f000 fb87 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2102      	movs	r1, #2
 800095e:	2009      	movs	r0, #9
 8000960:	f000 fab9 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000964:	2009      	movs	r0, #9
 8000966:	f000 fad2 	bl	8000f0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2101      	movs	r1, #1
 800096e:	2028      	movs	r0, #40	@ 0x28
 8000970:	f000 fab1 	bl	8000ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000974:	2028      	movs	r0, #40	@ 0x28
 8000976:	f000 faca 	bl	8000f0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	@ 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020800 	.word	0x40020800
 8000990:	40020400 	.word	0x40020400

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	@ (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80009de:	2005      	movs	r0, #5
 80009e0:	f000 fa6e 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0b      	ldr	r2, [pc, #44]	@ (8000a2c <HAL_TIM_Base_MspInit+0x3c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d10d      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_TIM_Base_MspInit+0x40>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <HAL_TIM_Base_MspInit+0x40>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <HAL_TIM_Base_MspInit+0x40>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM10_MspInit 1 */

  }

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40014400 	.word	0x40014400
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <HAL_UART_MspInit+0x94>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d133      	bne.n	8000abe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000a8e:	230c      	movs	r3, #12
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <HAL_UART_MspInit+0x9c>)
 8000aaa:	f000 fadd 	bl	8001068 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2026      	movs	r0, #38	@ 0x26
 8000ab4:	f000 fa0f 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab8:	2026      	movs	r0, #38	@ 0x26
 8000aba:	f000 fa28 	bl	8000f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	@ 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f8b5 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b36:	2008      	movs	r0, #8
 8000b38:	f000 fc4c 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <USART2_IRQHandler+0x10>)
 8000b46:	f001 faff 	bl	8002148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000c0 	.word	0x200000c0

08000b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000b58:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000b5c:	f000 fc3a 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b64:	f000 fc36 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000b68:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b6c:	f000 fc32 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000b70:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000b74:	f000 fc2e 	bl	80013d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba4:	f7ff ffea 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f002 fb2d 	bl	800322c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcff 	bl	80005d4 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be4:	080032d4 	.word	0x080032d4
  ldr r2, =_sbss
 8000be8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bec:	20000114 	.word	0x20000114

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	@ (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f94f 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff feba 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f967 	bl	8000f2a <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f92f 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	@ (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000018 	.word	0x20000018
 8000c90:	20000020 	.word	0x20000020
 8000c94:	2000001c 	.word	0x2000001c

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000020 	.word	0x20000020
 8000cbc:	2000010c 	.word	0x2000010c

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000010c 	.word	0x2000010c

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000020 	.word	0x20000020

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	@ (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff feb6 	bl	8000cc0 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d008      	beq.n	8000f74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2280      	movs	r2, #128	@ 0x80
 8000f66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e052      	b.n	800101a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 0216 	bic.w	r2, r2, #22
 8000f82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d103      	bne.n	8000fa4 <HAL_DMA_Abort+0x62>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0208 	bic.w	r2, r2, #8
 8000fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc4:	e013      	b.n	8000fee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fc6:	f7ff fe7b 	bl	8000cc0 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b05      	cmp	r3, #5
 8000fd2:	d90c      	bls.n	8000fee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e015      	b.n	800101a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e4      	bne.n	8000fc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001000:	223f      	movs	r2, #63	@ 0x3f
 8001002:	409a      	lsls	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d004      	beq.n	8001040 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e00c      	b.n	800105a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2205      	movs	r2, #5
 8001044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 0201 	bic.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e159      	b.n	8001338 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8148 	bne.w	8001332 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80a2 	beq.w	8001332 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b57      	ldr	r3, [pc, #348]	@ (8001350 <HAL_GPIO_Init+0x2e8>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a56      	ldr	r2, [pc, #344]	@ (8001350 <HAL_GPIO_Init+0x2e8>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b54      	ldr	r3, [pc, #336]	@ (8001350 <HAL_GPIO_Init+0x2e8>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a52      	ldr	r2, [pc, #328]	@ (8001354 <HAL_GPIO_Init+0x2ec>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a49      	ldr	r2, [pc, #292]	@ (8001358 <HAL_GPIO_Init+0x2f0>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x202>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a48      	ldr	r2, [pc, #288]	@ (800135c <HAL_GPIO_Init+0x2f4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x1fe>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a47      	ldr	r2, [pc, #284]	@ (8001360 <HAL_GPIO_Init+0x2f8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x1fa>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a46      	ldr	r2, [pc, #280]	@ (8001364 <HAL_GPIO_Init+0x2fc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x1f6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a45      	ldr	r2, [pc, #276]	@ (8001368 <HAL_GPIO_Init+0x300>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x1f2>
 8001256:	2304      	movs	r3, #4
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x204>
 800125a:	2307      	movs	r3, #7
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x204>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x204>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x204>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x204>
 800126a:	2300      	movs	r3, #0
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127c:	4935      	ldr	r1, [pc, #212]	@ (8001354 <HAL_GPIO_Init+0x2ec>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4b38      	ldr	r3, [pc, #224]	@ (800136c <HAL_GPIO_Init+0x304>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ae:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <HAL_GPIO_Init+0x304>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_GPIO_Init+0x304>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d8:	4a24      	ldr	r2, [pc, #144]	@ (800136c <HAL_GPIO_Init+0x304>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012de:	4b23      	ldr	r3, [pc, #140]	@ (800136c <HAL_GPIO_Init+0x304>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001302:	4a1a      	ldr	r2, [pc, #104]	@ (800136c <HAL_GPIO_Init+0x304>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_GPIO_Init+0x304>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132c:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <HAL_GPIO_Init+0x304>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	f67f aea2 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e001      	b.n	8001392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f868 	bl	80004c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e267      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d075      	beq.n	800150e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001422:	4b88      	ldr	r3, [pc, #544]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b04      	cmp	r3, #4
 800142c:	d00c      	beq.n	8001448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142e:	4b85      	ldr	r3, [pc, #532]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001436:	2b08      	cmp	r3, #8
 8001438:	d112      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143a:	4b82      	ldr	r3, [pc, #520]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001446:	d10b      	bne.n	8001460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	4b7e      	ldr	r3, [pc, #504]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d05b      	beq.n	800150c <HAL_RCC_OscConfig+0x108>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d157      	bne.n	800150c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e242      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001468:	d106      	bne.n	8001478 <HAL_RCC_OscConfig+0x74>
 800146a:	4b76      	ldr	r3, [pc, #472]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a75      	ldr	r2, [pc, #468]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x98>
 8001482:	4b70      	ldr	r3, [pc, #448]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6f      	ldr	r2, [pc, #444]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6d      	ldr	r3, [pc, #436]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a6c      	ldr	r2, [pc, #432]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xb0>
 800149c:	4b69      	ldr	r3, [pc, #420]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a68      	ldr	r2, [pc, #416]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b66      	ldr	r3, [pc, #408]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a65      	ldr	r2, [pc, #404]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc00 	bl	8000cc0 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fbfc 	bl	8000cc0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e207      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xc0>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fbec 	bl	8000cc0 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fbe8 	bl	8000cc0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1f3      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b51      	ldr	r3, [pc, #324]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0xe8>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d063      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151a:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001532:	4b44      	ldr	r3, [pc, #272]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1c7      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b3b      	ldr	r3, [pc, #236]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4937      	ldr	r1, [pc, #220]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e03a      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b34      	ldr	r3, [pc, #208]	@ (8001648 <HAL_RCC_OscConfig+0x244>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157a:	f7ff fba1 	bl	8000cc0 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fb9d 	bl	8000cc0 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1a8      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4925      	ldr	r1, [pc, #148]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <HAL_RCC_OscConfig+0x244>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb80 	bl	8000cc0 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb7c 	bl	8000cc0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e187      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d036      	beq.n	800165c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <HAL_RCC_OscConfig+0x248>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb60 	bl	8000cc0 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fb5c 	bl	8000cc0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e167      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_RCC_OscConfig+0x240>)
 8001618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x200>
 8001622:	e01b      	b.n	800165c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <HAL_RCC_OscConfig+0x248>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fb49 	bl	8000cc0 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001630:	e00e      	b.n	8001650 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fb45 	bl	8000cc0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d907      	bls.n	8001650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e150      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001644:	40023800 	.word	0x40023800
 8001648:	42470000 	.word	0x42470000
 800164c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	4b88      	ldr	r3, [pc, #544]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ea      	bne.n	8001632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8097 	beq.w	8001798 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166e:	4b81      	ldr	r3, [pc, #516]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10f      	bne.n	800169a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	4b7d      	ldr	r3, [pc, #500]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	4a7c      	ldr	r2, [pc, #496]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001688:	6413      	str	r3, [r2, #64]	@ 0x40
 800168a:	4b7a      	ldr	r3, [pc, #488]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4b77      	ldr	r3, [pc, #476]	@ (8001878 <HAL_RCC_OscConfig+0x474>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016a6:	4b74      	ldr	r3, [pc, #464]	@ (8001878 <HAL_RCC_OscConfig+0x474>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a73      	ldr	r2, [pc, #460]	@ (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fb05 	bl	8000cc0 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff fb01 	bl	8000cc0 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e10c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001878 <HAL_RCC_OscConfig+0x474>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x2ea>
 80016e0:	4b64      	ldr	r3, [pc, #400]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e4:	4a63      	ldr	r2, [pc, #396]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x30c>
 80016f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6713      	str	r3, [r2, #112]	@ 0x70
 8001702:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	4a5b      	ldr	r2, [pc, #364]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	@ 0x70
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0x324>
 8001710:	4b58      	ldr	r3, [pc, #352]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	4a57      	ldr	r2, [pc, #348]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	@ 0x70
 800171c:	4b55      	ldr	r3, [pc, #340]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001720:	4a54      	ldr	r2, [pc, #336]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001722:	f023 0304 	bic.w	r3, r3, #4
 8001726:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d015      	beq.n	800175c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fac6 	bl	8000cc0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fac2 	bl	8000cc0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0cb      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174e:	4b49      	ldr	r3, [pc, #292]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0ee      	beq.n	8001738 <HAL_RCC_OscConfig+0x334>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fab0 	bl	8000cc0 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff faac 	bl	8000cc0 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0b5      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177a:	4b3e      	ldr	r3, [pc, #248]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ee      	bne.n	8001764 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	4a38      	ldr	r2, [pc, #224]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	f000 80a1 	beq.w	80018e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017a2:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d05c      	beq.n	8001868 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d141      	bne.n	800183a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <HAL_RCC_OscConfig+0x478>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fa80 	bl	8000cc0 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff fa7c 	bl	8000cc0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e087      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	019b      	lsls	r3, r3, #6
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	491b      	ldr	r1, [pc, #108]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <HAL_RCC_OscConfig+0x478>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fa55 	bl	8000cc0 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fa51 	bl	8000cc0 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e05c      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x416>
 8001838:	e054      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_RCC_OscConfig+0x478>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fa3e 	bl	8000cc0 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fa3a 	bl	8000cc0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e045      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_RCC_OscConfig+0x470>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x444>
 8001866:	e03d      	b.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e038      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000
 800187c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_RCC_OscConfig+0x4ec>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d028      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d121      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d11a      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d111      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	3b01      	subs	r3, #1
 80018ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800

080018f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0cc      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0307 	and.w	r3, r3, #7
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d90c      	bls.n	8001930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b65      	ldr	r3, [pc, #404]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b63      	ldr	r3, [pc, #396]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0b8      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d020      	beq.n	800197e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b59      	ldr	r3, [pc, #356]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a58      	ldr	r2, [pc, #352]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001960:	4b53      	ldr	r3, [pc, #332]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a52      	ldr	r2, [pc, #328]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800196a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800196c:	4b50      	ldr	r3, [pc, #320]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	494d      	ldr	r1, [pc, #308]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d044      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b47      	ldr	r3, [pc, #284]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e07f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e06f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e067      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d2:	4b37      	ldr	r3, [pc, #220]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 0203 	bic.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4934      	ldr	r1, [pc, #208]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff f96c 	bl	8000cc0 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff f968 	bl	8000cc0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e04f      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 020c 	and.w	r2, r3, #12
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1eb      	bne.n	80019ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b25      	ldr	r3, [pc, #148]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d20c      	bcs.n	8001a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d001      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e032      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4916      	ldr	r1, [pc, #88]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a66:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	490e      	ldr	r1, [pc, #56]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a7a:	f000 f821 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	490a      	ldr	r1, [pc, #40]	@ (8001ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a92:	4a09      	ldr	r2, [pc, #36]	@ (8001ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f8cc 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	0800328c 	.word	0x0800328c
 8001ab8:	20000018 	.word	0x20000018
 8001abc:	2000001c 	.word	0x2000001c

08001ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b094      	sub	sp, #80	@ 0x50
 8001ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8001acc:	2300      	movs	r3, #0
 8001ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4b79      	ldr	r3, [pc, #484]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d00d      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x40>
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	f200 80e1 	bhi.w	8001cac <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d003      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x3a>
 8001af2:	e0db      	b.n	8001cac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b73      	ldr	r3, [pc, #460]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001af8:	e0db      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001afa:	4b73      	ldr	r3, [pc, #460]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001afc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001afe:	e0d8      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b00:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b08:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d063      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	0159      	lsls	r1, r3, #5
 8001b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b44:	0150      	lsls	r0, r2, #5
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	1a51      	subs	r1, r2, r1
 8001b4e:	6139      	str	r1, [r7, #16]
 8001b50:	4629      	mov	r1, r5
 8001b52:	eb63 0301 	sbc.w	r3, r3, r1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b64:	4659      	mov	r1, fp
 8001b66:	018b      	lsls	r3, r1, #6
 8001b68:	4651      	mov	r1, sl
 8001b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6e:	4651      	mov	r1, sl
 8001b70:	018a      	lsls	r2, r1, #6
 8001b72:	4651      	mov	r1, sl
 8001b74:	ebb2 0801 	subs.w	r8, r2, r1
 8001b78:	4659      	mov	r1, fp
 8001b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b92:	4690      	mov	r8, r2
 8001b94:	4699      	mov	r9, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	eb18 0303 	adds.w	r3, r8, r3
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	eb49 0303 	adc.w	r3, r9, r3
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	024b      	lsls	r3, r1, #9
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	024a      	lsls	r2, r1, #9
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bd0:	f7fe fb02 	bl	80001d8 <__aeabi_uldivmod>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4613      	mov	r3, r2
 8001bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bdc:	e058      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bde:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	099b      	lsrs	r3, r3, #6
 8001be4:	2200      	movs	r2, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	4611      	mov	r1, r2
 8001bea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf8:	4642      	mov	r2, r8
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	f04f 0000 	mov.w	r0, #0
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	0159      	lsls	r1, r3, #5
 8001c06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c0a:	0150      	lsls	r0, r2, #5
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4641      	mov	r1, r8
 8001c12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c16:	4649      	mov	r1, r9
 8001c18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c30:	ebb2 040a 	subs.w	r4, r2, sl
 8001c34:	eb63 050b 	sbc.w	r5, r3, fp
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	00eb      	lsls	r3, r5, #3
 8001c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c46:	00e2      	lsls	r2, r4, #3
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	18e3      	adds	r3, r4, r3
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	464b      	mov	r3, r9
 8001c54:	eb45 0303 	adc.w	r3, r5, r3
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c66:	4629      	mov	r1, r5
 8001c68:	028b      	lsls	r3, r1, #10
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c70:	4621      	mov	r1, r4
 8001c72:	028a      	lsls	r2, r1, #10
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	61fa      	str	r2, [r7, #28]
 8001c80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c84:	f7fe faa8 	bl	80001d8 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001ca0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001caa:	e002      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3750      	adds	r7, #80	@ 0x50
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	007a1200 	.word	0x007a1200

08001ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000018 	.word	0x20000018

08001ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0a9b      	lsrs	r3, r3, #10
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4903      	ldr	r1, [pc, #12]	@ (8001d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	0800329c 	.word	0x0800329c

08001d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d10:	f7ff ffdc 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0b5b      	lsrs	r3, r3, #13
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	@ (8001d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	0800329c 	.word	0x0800329c

08001d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e041      	b.n	8001dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fe48 	bl	80009f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f000 f8b0 	bl	8001ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d001      	beq.n	8001dec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e03c      	b.n	8001e66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_TIM_Base_Start+0xa0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d018      	beq.n	8001e30 <HAL_TIM_Base_Start+0x5c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e06:	d013      	beq.n	8001e30 <HAL_TIM_Base_Start+0x5c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_TIM_Base_Start+0xa4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00e      	beq.n	8001e30 <HAL_TIM_Base_Start+0x5c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <HAL_TIM_Base_Start+0xa8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_TIM_Base_Start+0x5c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <HAL_TIM_Base_Start+0xac>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_TIM_Base_Start+0x5c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <HAL_TIM_Base_Start+0xb0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d010      	beq.n	8001e64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e52:	e007      	b.n	8001e64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40014000 	.word	0x40014000

08001e88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a1a      	ldr	r2, [r3, #32]
 8001e96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_TIM_Base_Stop+0x38>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	f240 4344 	movw	r3, #1092	@ 0x444
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_TIM_Base_Stop+0x38>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd4 <TIM_Base_SetConfig+0xfc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00f      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef6:	d00b      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a37      	ldr	r2, [pc, #220]	@ (8001fd8 <TIM_Base_SetConfig+0x100>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a36      	ldr	r2, [pc, #216]	@ (8001fdc <TIM_Base_SetConfig+0x104>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d003      	beq.n	8001f10 <TIM_Base_SetConfig+0x38>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a35      	ldr	r2, [pc, #212]	@ (8001fe0 <TIM_Base_SetConfig+0x108>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d108      	bne.n	8001f22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd4 <TIM_Base_SetConfig+0xfc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01b      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f30:	d017      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a28      	ldr	r2, [pc, #160]	@ (8001fd8 <TIM_Base_SetConfig+0x100>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a27      	ldr	r2, [pc, #156]	@ (8001fdc <TIM_Base_SetConfig+0x104>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00f      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a26      	ldr	r2, [pc, #152]	@ (8001fe0 <TIM_Base_SetConfig+0x108>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00b      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a25      	ldr	r2, [pc, #148]	@ (8001fe4 <TIM_Base_SetConfig+0x10c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d007      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a24      	ldr	r2, [pc, #144]	@ (8001fe8 <TIM_Base_SetConfig+0x110>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d003      	beq.n	8001f62 <TIM_Base_SetConfig+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	@ (8001fec <TIM_Base_SetConfig+0x114>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d108      	bne.n	8001f74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <TIM_Base_SetConfig+0xfc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d103      	bne.n	8001fa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f023 0201 	bic.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	611a      	str	r2, [r3, #16]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40000c00 	.word	0x40000c00
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e042      	b.n	8002088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fd0c 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2224      	movs	r2, #36	@ 0x24
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fd11 	bl	8002a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d121      	bne.n	80020ee <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_UART_Transmit_IT+0x26>
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e01a      	b.n	80020f0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	88fa      	ldrh	r2, [r7, #6]
 80020c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	88fa      	ldrh	r2, [r7, #6]
 80020ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2221      	movs	r2, #33	@ 0x21
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020e8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e000      	b.n	80020f0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	d112      	bne.n	800213c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_UART_Receive_IT+0x26>
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00b      	b.n	800213e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 faba 	bl	80026ac <UART_Start_Receive_IT>
 8002138:	4603      	mov	r3, r0
 800213a:	e000      	b.n	800213e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0ba      	sub	sp, #232	@ 0xe8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800217a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10f      	bne.n	80021ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800218e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_UART_IRQHandler+0x66>
 800219a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fb99 	bl	80028de <UART_Receive_IT>
      return;
 80021ac:	e25b      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80de 	beq.w	8002374 <HAL_UART_IRQHandler+0x22c>
 80021b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80d1 	beq.w	8002374 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_UART_IRQHandler+0xae>
 80021de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_UART_IRQHandler+0xd2>
 8002202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800221a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_UART_IRQHandler+0xf6>
 8002226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	f043 0204 	orr.w	r2, r3, #4
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d011      	beq.n	800226e <HAL_UART_IRQHandler+0x126>
 800224a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f043 0208 	orr.w	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 81f2 	beq.w	800265c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_UART_IRQHandler+0x14e>
 8002284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fb24 	bl	80028de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a0:	2b40      	cmp	r3, #64	@ 0x40
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <HAL_UART_IRQHandler+0x17a>
 80022ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d04f      	beq.n	8002362 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fa2c 	bl	8002720 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d2:	2b40      	cmp	r3, #64	@ 0x40
 80022d4:	d141      	bne.n	800235a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3314      	adds	r3, #20
 80022dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022e4:	e853 3f00 	ldrex	r3, [r3]
 80022e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80022ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3314      	adds	r3, #20
 80022fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002302:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800230e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002312:	e841 2300 	strex	r3, r2, [r1]
 8002316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800231a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1d9      	bne.n	80022d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d013      	beq.n	8002352 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232e:	4a7e      	ldr	r2, [pc, #504]	@ (8002528 <HAL_UART_IRQHandler+0x3e0>)
 8002330:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fe73 	bl	8001022 <HAL_DMA_Abort_IT>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800234c:	4610      	mov	r0, r2
 800234e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002350:	e00e      	b.n	8002370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f994 	bl	8002680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	e00a      	b.n	8002370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f990 	bl	8002680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002360:	e006      	b.n	8002370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f98c 	bl	8002680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800236e:	e175      	b.n	800265c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002370:	bf00      	nop
    return;
 8002372:	e173      	b.n	800265c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 814f 	bne.w	800261c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8148 	beq.w	800261c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800238c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8141 	beq.w	800261c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ba:	2b40      	cmp	r3, #64	@ 0x40
 80023bc:	f040 80b6 	bne.w	800252c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8145 	beq.w	8002660 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80023da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023de:	429a      	cmp	r2, r3
 80023e0:	f080 813e 	bcs.w	8002660 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80023ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023f6:	f000 8088 	beq.w	800250a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002404:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002410:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002418:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	330c      	adds	r3, #12
 8002422:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800242a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002432:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1d9      	bne.n	80023fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3314      	adds	r3, #20
 8002466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800246a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800246e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002472:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800247c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e1      	bne.n	8002446 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3314      	adds	r3, #20
 80024a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80024a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80024ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80024b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e3      	bne.n	8002482 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024da:	f023 0310 	bic.w	r3, r3, #16
 80024de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80024ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024f4:	e841 2300 	strex	r3, r2, [r1]
 80024f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80024fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e3      	bne.n	80024c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fd1c 	bl	8000f42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002518:	b29b      	uxth	r3, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8b7 	bl	8002694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002526:	e09b      	b.n	8002660 <HAL_UART_IRQHandler+0x518>
 8002528:	080027e7 	.word	0x080027e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002534:	b29b      	uxth	r3, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 808e 	beq.w	8002664 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8089 	beq.w	8002664 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002576:	647a      	str	r2, [r7, #68]	@ 0x44
 8002578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800257c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e3      	bne.n	8002552 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3314      	adds	r3, #20
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	623b      	str	r3, [r7, #32]
   return(result);
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80025ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80025b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1e3      	bne.n	800258a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	60fb      	str	r3, [r7, #12]
   return(result);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80025f4:	61fa      	str	r2, [r7, #28]
 80025f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	617b      	str	r3, [r7, #20]
   return(result);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e3      	bne.n	80025d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800260e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f83d 	bl	8002694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800261a:	e023      	b.n	8002664 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800261c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_UART_IRQHandler+0x4f4>
 8002628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800262c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8ea 	bl	800280e <UART_Transmit_IT>
    return;
 800263a:	e014      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800263c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <HAL_UART_IRQHandler+0x51e>
 8002648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800264c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f92a 	bl	80028ae <UART_EndTransmit_IT>
    return;
 800265a:	e004      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
    return;
 800265c:	bf00      	nop
 800265e:	e002      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
      return;
 8002660:	bf00      	nop
 8002662:	e000      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
      return;
 8002664:	bf00      	nop
  }
}
 8002666:	37e8      	adds	r7, #232	@ 0xe8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2222      	movs	r2, #34	@ 0x22
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0220 	orr.w	r2, r2, #32
 8002710:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002720:	b480      	push	{r7}
 8002722:	b095      	sub	sp, #84	@ 0x54
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800273e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002748:	643a      	str	r2, [r7, #64]	@ 0x40
 800274a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800274e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e5      	bne.n	8002728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3314      	adds	r3, #20
 8002762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	61fb      	str	r3, [r7, #28]
   return(result);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3314      	adds	r3, #20
 800277a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800277c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e5      	bne.n	800275c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002794:	2b01      	cmp	r3, #1
 8002796:	d119      	bne.n	80027cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f023 0310 	bic.w	r3, r3, #16
 80027ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027b8:	61ba      	str	r2, [r7, #24]
 80027ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	6979      	ldr	r1, [r7, #20]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	e841 2300 	strex	r3, r2, [r1]
 80027c4:	613b      	str	r3, [r7, #16]
   return(result);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e5      	bne.n	8002798 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027da:	bf00      	nop
 80027dc:	3754      	adds	r7, #84	@ 0x54
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff ff3d 	bl	8002680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b21      	cmp	r3, #33	@ 0x21
 8002820:	d13e      	bne.n	80028a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282a:	d114      	bne.n	8002856 <UART_Transmit_IT+0x48>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d110      	bne.n	8002856 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002848:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	1c9a      	adds	r2, r3, #2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	e008      	b.n	8002868 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6211      	str	r1, [r2, #32]
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4619      	mov	r1, r3
 8002876:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800288a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800289a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e000      	b.n	80028a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fecc 	bl	800266c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b08c      	sub	sp, #48	@ 0x30
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b22      	cmp	r3, #34	@ 0x22
 80028f0:	f040 80ae 	bne.w	8002a50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028fc:	d117      	bne.n	800292e <UART_Receive_IT+0x50>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d113      	bne.n	800292e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291c:	b29a      	uxth	r2, r3
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	1c9a      	adds	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	@ 0x28
 800292c:	e026      	b.n	800297c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002940:	d007      	beq.n	8002952 <UART_Receive_IT+0x74>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <UART_Receive_IT+0x82>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e008      	b.n	8002972 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800296c:	b2da      	uxtb	r2, r3
 800296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002970:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29b      	uxth	r3, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4619      	mov	r1, r3
 800298a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800298c:	2b00      	cmp	r3, #0
 800298e:	d15d      	bne.n	8002a4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0220 	bic.w	r2, r2, #32
 800299e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d135      	bne.n	8002a42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	613b      	str	r3, [r7, #16]
   return(result);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f023 0310 	bic.w	r3, r3, #16
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	623a      	str	r2, [r7, #32]
 80029fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	69f9      	ldr	r1, [r7, #28]
 8002a02:	6a3a      	ldr	r2, [r7, #32]
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d10a      	bne.n	8002a34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fe2a 	bl	8002694 <HAL_UARTEx_RxEventCallback>
 8002a40:	e002      	b.n	8002a48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fbc8 	bl	80031d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e002      	b.n	8002a52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3730      	adds	r7, #48	@ 0x30
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a60:	b0c0      	sub	sp, #256	@ 0x100
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	ea40 0301 	orr.w	r3, r0, r1
 8002a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ab4:	f021 010c 	bic.w	r1, r1, #12
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad6:	6999      	ldr	r1, [r3, #24]
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	ea40 0301 	orr.w	r3, r0, r1
 8002ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b8f      	ldr	r3, [pc, #572]	@ (8002d28 <UART_SetConfig+0x2cc>)
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d005      	beq.n	8002afc <UART_SetConfig+0xa0>
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b8d      	ldr	r3, [pc, #564]	@ (8002d2c <UART_SetConfig+0x2d0>)
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d104      	bne.n	8002b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002afc:	f7ff f906 	bl	8001d0c <HAL_RCC_GetPCLK2Freq>
 8002b00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002b04:	e003      	b.n	8002b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b06:	f7ff f8ed 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 8002b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b18:	f040 810c 	bne.w	8002d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b2e:	4622      	mov	r2, r4
 8002b30:	462b      	mov	r3, r5
 8002b32:	1891      	adds	r1, r2, r2
 8002b34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b36:	415b      	adcs	r3, r3
 8002b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b3e:	4621      	mov	r1, r4
 8002b40:	eb12 0801 	adds.w	r8, r2, r1
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb43 0901 	adc.w	r9, r3, r1
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b5e:	4690      	mov	r8, r2
 8002b60:	4699      	mov	r9, r3
 8002b62:	4623      	mov	r3, r4
 8002b64:	eb18 0303 	adds.w	r3, r8, r3
 8002b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	eb49 0303 	adc.w	r3, r9, r3
 8002b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	18db      	adds	r3, r3, r3
 8002b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b90:	4613      	mov	r3, r2
 8002b92:	eb42 0303 	adc.w	r3, r2, r3
 8002b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ba0:	f7fd fb1a 	bl	80001d8 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <UART_SetConfig+0x2d4>)
 8002baa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	011c      	lsls	r4, r3, #4
 8002bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	1891      	adds	r1, r2, r2
 8002bca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bcc:	415b      	adcs	r3, r3
 8002bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8002bda:	4649      	mov	r1, r9
 8002bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf4:	4692      	mov	sl, r2
 8002bf6:	469b      	mov	fp, r3
 8002bf8:	4643      	mov	r3, r8
 8002bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8002bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c02:	464b      	mov	r3, r9
 8002c04:	eb4b 0303 	adc.w	r3, fp, r3
 8002c08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c20:	460b      	mov	r3, r1
 8002c22:	18db      	adds	r3, r3, r3
 8002c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c26:	4613      	mov	r3, r2
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c36:	f7fd facf 	bl	80001d8 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4b3b      	ldr	r3, [pc, #236]	@ (8002d30 <UART_SetConfig+0x2d4>)
 8002c42:	fba3 2301 	umull	r2, r3, r3, r1
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2264      	movs	r2, #100	@ 0x64
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	1acb      	subs	r3, r1, r3
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <UART_SetConfig+0x2d4>)
 8002c58:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c64:	441c      	add	r4, r3
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1891      	adds	r1, r2, r2
 8002c7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c80:	415b      	adcs	r3, r3
 8002c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c88:	4641      	mov	r1, r8
 8002c8a:	1851      	adds	r1, r2, r1
 8002c8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c8e:	4649      	mov	r1, r9
 8002c90:	414b      	adcs	r3, r1
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	00cb      	lsls	r3, r1, #3
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002caa:	4651      	mov	r1, sl
 8002cac:	00ca      	lsls	r2, r1, #3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cdc:	460b      	mov	r3, r1
 8002cde:	18db      	adds	r3, r3, r3
 8002ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cf2:	f7fd fa71 	bl	80001d8 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <UART_SetConfig+0x2d4>)
 8002cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	2164      	movs	r1, #100	@ 0x64
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	3332      	adds	r3, #50	@ 0x32
 8002d0e:	4a08      	ldr	r2, [pc, #32]	@ (8002d30 <UART_SetConfig+0x2d4>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	f003 0207 	and.w	r2, r3, #7
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4422      	add	r2, r4
 8002d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d24:	e106      	b.n	8002f34 <UART_SetConfig+0x4d8>
 8002d26:	bf00      	nop
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	40011400 	.word	0x40011400
 8002d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d46:	4642      	mov	r2, r8
 8002d48:	464b      	mov	r3, r9
 8002d4a:	1891      	adds	r1, r2, r2
 8002d4c:	6239      	str	r1, [r7, #32]
 8002d4e:	415b      	adcs	r3, r3
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d56:	4641      	mov	r1, r8
 8002d58:	1854      	adds	r4, r2, r1
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	eb43 0501 	adc.w	r5, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	00eb      	lsls	r3, r5, #3
 8002d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6e:	00e2      	lsls	r2, r4, #3
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	18e3      	adds	r3, r4, r3
 8002d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	eb45 0303 	adc.w	r3, r5, r3
 8002d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002da2:	4629      	mov	r1, r5
 8002da4:	008b      	lsls	r3, r1, #2
 8002da6:	4621      	mov	r1, r4
 8002da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dac:	4621      	mov	r1, r4
 8002dae:	008a      	lsls	r2, r1, #2
 8002db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002db4:	f7fd fa10 	bl	80001d8 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4b60      	ldr	r3, [pc, #384]	@ (8002f40 <UART_SetConfig+0x4e4>)
 8002dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	011c      	lsls	r4, r3, #4
 8002dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dd8:	4642      	mov	r2, r8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	1891      	adds	r1, r2, r2
 8002dde:	61b9      	str	r1, [r7, #24]
 8002de0:	415b      	adcs	r3, r3
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de8:	4641      	mov	r1, r8
 8002dea:	1851      	adds	r1, r2, r1
 8002dec:	6139      	str	r1, [r7, #16]
 8002dee:	4649      	mov	r1, r9
 8002df0:	414b      	adcs	r3, r1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e00:	4659      	mov	r1, fp
 8002e02:	00cb      	lsls	r3, r1, #3
 8002e04:	4651      	mov	r1, sl
 8002e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	00ca      	lsls	r2, r1, #3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	4642      	mov	r2, r8
 8002e16:	189b      	adds	r3, r3, r2
 8002e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	460a      	mov	r2, r1
 8002e20:	eb42 0303 	adc.w	r3, r2, r3
 8002e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e40:	4649      	mov	r1, r9
 8002e42:	008b      	lsls	r3, r1, #2
 8002e44:	4641      	mov	r1, r8
 8002e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	008a      	lsls	r2, r1, #2
 8002e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e52:	f7fd f9c1 	bl	80001d8 <__aeabi_uldivmod>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4b38      	ldr	r3, [pc, #224]	@ (8002f40 <UART_SetConfig+0x4e4>)
 8002e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2264      	movs	r2, #100	@ 0x64
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	1acb      	subs	r3, r1, r3
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	3332      	adds	r3, #50	@ 0x32
 8002e70:	4a33      	ldr	r2, [pc, #204]	@ (8002f40 <UART_SetConfig+0x4e4>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e7c:	441c      	add	r4, r3
 8002e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e82:	2200      	movs	r2, #0
 8002e84:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e86:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	1891      	adds	r1, r2, r2
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	415b      	adcs	r3, r3
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	1851      	adds	r1, r2, r1
 8002ea0:	6039      	str	r1, [r7, #0]
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	414b      	adcs	r3, r1
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	00cb      	lsls	r3, r1, #3
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	00ca      	lsls	r2, r1, #3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4642      	mov	r2, r8
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ece:	464b      	mov	r3, r9
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	eb42 0303 	adc.w	r3, r2, r3
 8002ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ee2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	008b      	lsls	r3, r1, #2
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002efa:	4641      	mov	r1, r8
 8002efc:	008a      	lsls	r2, r1, #2
 8002efe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f02:	f7fd f969 	bl	80001d8 <__aeabi_uldivmod>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f40 <UART_SetConfig+0x4e4>)
 8002f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	2164      	movs	r1, #100	@ 0x64
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	3332      	adds	r3, #50	@ 0x32
 8002f1e:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <UART_SetConfig+0x4e4>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	f003 020f 	and.w	r2, r3, #15
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4422      	add	r2, r4
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f40:	51eb851f 	.word	0x51eb851f

08002f44 <btnPress>:
			return false;
	}
	return false;
}

bool btnPress(uint8_t ch){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
    static bool btnState[_BTN_MAX_CH] = {false};  // 버튼 상태 저장 배열
    bool currentState;

    if(ch >= _BTN_MAX_CH){
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <btnPress+0x14>
        return false;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e047      	b.n	8002fe8 <btnPress+0xa4>
    }

    currentState = !HAL_GPIO_ReadPin(btn_tbl[ch].port, btn_tbl[ch].pinNumber);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	@ (8002ff0 <btnPress+0xac>)
 8002f5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4923      	ldr	r1, [pc, #140]	@ (8002ff0 <btnPress+0xac>)
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	889b      	ldrh	r3, [r3, #4]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f7fe f9ff 	bl	8001370 <HAL_GPIO_ReadPin>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]

    if(currentState && !btnState[ch]) {
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d026      	beq.n	8002fd2 <btnPress+0x8e>
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <btnPress+0xb0>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	f083 0301 	eor.w	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01e      	beq.n	8002fd2 <btnPress+0x8e>
        HAL_Delay(100);  // Debounce delay
 8002f94:	2064      	movs	r0, #100	@ 0x64
 8002f96:	f7fd fe9f 	bl	8000cd8 <HAL_Delay>
        currentState = !HAL_GPIO_ReadPin(btn_tbl[ch].port, btn_tbl[ch].pinNumber);
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <btnPress+0xac>)
 8002f9e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	4912      	ldr	r1, [pc, #72]	@ (8002ff0 <btnPress+0xac>)
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	889b      	ldrh	r3, [r3, #4]
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7fe f9de 	bl	8001370 <HAL_GPIO_ReadPin>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
        if(currentState) {
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00f      	beq.n	8002fe6 <btnPress+0xa2>
            btnState[ch] = true;  // 버튼 상태 업데이트
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <btnPress+0xb0>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	54d1      	strb	r1, [r2, r3]
            return true;  // 버튼이 눌렸음을 반환
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e00a      	b.n	8002fe8 <btnPress+0xa4>
        }
    } else if(!currentState) {
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	f083 0301 	eor.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <btnPress+0xa2>
        btnState[ch] = false;  // 버튼이 떼어졌음을 업데이트
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	4a04      	ldr	r2, [pc, #16]	@ (8002ff4 <btnPress+0xb0>)
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	54d1      	strb	r1, [r2, r3]
    }

    return false;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000024 	.word	0x20000024
 8002ff4:	20000110 	.word	0x20000110

08002ff8 <delay_us>:

#include "delay.h"

extern TIM_HandleTypeDef htim10;

void delay_us(uint16_t us){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8003002:	4b0a      	ldr	r3, [pc, #40]	@ (800302c <delay_us+0x34>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim10);
 800300a:	4808      	ldr	r0, [pc, #32]	@ (800302c <delay_us+0x34>)
 800300c:	f7fe fee2 	bl	8001dd4 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim10) < us);
 8003010:	bf00      	nop
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <delay_us+0x34>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	429a      	cmp	r2, r3
 800301c:	d3f9      	bcc.n	8003012 <delay_us+0x1a>

	HAL_TIM_Base_Stop(&htim10);
 800301e:	4803      	ldr	r0, [pc, #12]	@ (800302c <delay_us+0x34>)
 8003020:	f7fe ff32 	bl	8001e88 <HAL_TIM_Base_Stop>
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000078 	.word	0x20000078

08003030 <wait>:

void wait(){
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	ledOn(3);
 8003034:	2003      	movs	r0, #3
 8003036:	f000 f817 	bl	8003068 <ledOn>
	HAL_Delay(2000);
 800303a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800303e:	f7fd fe4b 	bl	8000cd8 <HAL_Delay>
	ledOff(3);
 8003042:	2003      	movs	r0, #3
 8003044:	f000 f82c 	bl	80030a0 <ledOff>
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <LEDInit>:
//						{GPIOA, GPIO_PIN_9, GPIO_PIN_SET, GPIO_PIN_RESET},
//						{GPIOA, GPIO_PIN_8, GPIO_PIN_SET, GPIO_PIN_RESET},
//						{GPIOB, GPIO_PIN_10, GPIO_PIN_SET, GPIO_PIN_RESET}
						};

void LEDInit(){
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	currentFloorLED(currentFloor-1);
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <LEDInit+0x18>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	3b01      	subs	r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f83d 	bl	80030d8 <currentFloorLED>
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000014 	.word	0x20000014

08003068 <ledOn>:

void ledOn(uint8_t ch){
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pinNumber, led_tbl[ch].on);
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4a09      	ldr	r2, [pc, #36]	@ (800309c <ledOn+0x34>)
 8003076:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	4a07      	ldr	r2, [pc, #28]	@ (800309c <ledOn+0x34>)
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	8899      	ldrh	r1, [r3, #4]
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	4a05      	ldr	r2, [pc, #20]	@ (800309c <ledOn+0x34>)
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	799b      	ldrb	r3, [r3, #6]
 800308e:	461a      	mov	r2, r3
 8003090:	f7fe f986 	bl	80013a0 <HAL_GPIO_WritePin>
}
 8003094:	bf00      	nop
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2000003c 	.word	0x2000003c

080030a0 <ledOff>:

void ledOff(uint8_t ch){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pinNumber, led_tbl[ch].off);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <ledOff+0x34>)
 80030ae:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	4a07      	ldr	r2, [pc, #28]	@ (80030d4 <ledOff+0x34>)
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	8899      	ldrh	r1, [r3, #4]
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4a05      	ldr	r2, [pc, #20]	@ (80030d4 <ledOff+0x34>)
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	79db      	ldrb	r3, [r3, #7]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f7fe f96a 	bl	80013a0 <HAL_GPIO_WritePin>
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	2000003c 	.word	0x2000003c

080030d8 <currentFloorLED>:

void currentFloorLED(uint8_t ch){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0; i<3; i++){
 80030e2:	2300      	movs	r3, #0
 80030e4:	73fb      	strb	r3, [r7, #15]
 80030e6:	e006      	b.n	80030f6 <currentFloorLED+0x1e>
		ledOff(i);
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ffd8 	bl	80030a0 <ledOff>
	for(uint8_t i=0; i<3; i++){
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	3301      	adds	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d9f5      	bls.n	80030e8 <currentFloorLED+0x10>
	}
	ledOn(ch);
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff ffb2 	bl	8003068 <ledOn>
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <stepMotor>:

#include "stepper.h"

extern uint8_t currentFloor;

void stepMotor(uint8_t step){
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_Port, IN1_Pin, HALF_STEP_SEQ[step][0]);
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4a15      	ldr	r2, [pc, #84]	@ (8003170 <stepMotor+0x64>)
 800311a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800311e:	461a      	mov	r2, r3
 8003120:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003124:	4813      	ldr	r0, [pc, #76]	@ (8003174 <stepMotor+0x68>)
 8003126:	f7fe f93b 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_Port, IN2_Pin, HALF_STEP_SEQ[step][1]);
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	4a10      	ldr	r2, [pc, #64]	@ (8003170 <stepMotor+0x64>)
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	785b      	ldrb	r3, [r3, #1]
 8003134:	461a      	mov	r2, r3
 8003136:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800313a:	480e      	ldr	r0, [pc, #56]	@ (8003174 <stepMotor+0x68>)
 800313c:	f7fe f930 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_Port, IN3_Pin, HALF_STEP_SEQ[step][2]);
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <stepMotor+0x64>)
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	789b      	ldrb	r3, [r3, #2]
 800314a:	461a      	mov	r2, r3
 800314c:	2140      	movs	r1, #64	@ 0x40
 800314e:	4809      	ldr	r0, [pc, #36]	@ (8003174 <stepMotor+0x68>)
 8003150:	f7fe f926 	bl	80013a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_Port, IN4_Pin, HALF_STEP_SEQ[step][3]);
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	4a06      	ldr	r2, [pc, #24]	@ (8003170 <stepMotor+0x64>)
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	78db      	ldrb	r3, [r3, #3]
 800315e:	461a      	mov	r2, r3
 8003160:	2120      	movs	r1, #32
 8003162:	4804      	ldr	r0, [pc, #16]	@ (8003174 <stepMotor+0x68>)
 8003164:	f7fe f91c 	bl	80013a0 <HAL_GPIO_WritePin>
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	080032a4 	.word	0x080032a4
 8003174:	40020800 	.word	0x40020800

08003178 <infiniteRotation>:
}
void rotateDegrees(uint16_t degrees, uint8_t direction){
	uint16_t steps = (uint16_t)(((uint32_t)degrees * STEPS_PER_REVOLATION) / 360);
	rotateSteps(steps, direction);
}
void infiniteRotation(uint8_t direction, uint8_t targetFloor){
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	460a      	mov	r2, r1
 8003182:	71fb      	strb	r3, [r7, #7]
 8003184:	4613      	mov	r3, r2
 8003186:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]
	while(currentFloor != targetFloor){
 800318c:	e018      	b.n	80031c0 <infiniteRotation+0x48>
		uint8_t step;
		i++;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
		if(direction == DIR_CW){
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <infiniteRotation+0x2c>
			step = i % 8;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	73bb      	strb	r3, [r7, #14]
 80031a2:	e005      	b.n	80031b0 <infiniteRotation+0x38>
		}
		else{
			step = 7 - (i % 8);
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	73bb      	strb	r3, [r7, #14]
		}
		stepMotor(step);
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ffaa 	bl	800310c <stepMotor>
		delay_us(1000);
 80031b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031bc:	f7ff ff1c 	bl	8002ff8 <delay_us>
	while(currentFloor != targetFloor){
 80031c0:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <infiniteRotation+0x5c>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	79ba      	ldrb	r2, [r7, #6]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d1e1      	bne.n	800318e <infiniteRotation+0x16>
	}
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000014 	.word	0x20000014

080031d8 <HAL_UART_RxCpltCallback>:

//extern UART_HandleTypeDef huart2;	// uart2 handler
//extern bool restart;
//extern uint8_t rxData;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_UART_RxCpltCallback+0x34>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10b      	bne.n	8003202 <HAL_UART_RxCpltCallback+0x2a>
    	if(rxData == '1'){
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_UART_RxCpltCallback+0x38>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b31      	cmp	r3, #49	@ 0x31
 80031f0:	d102      	bne.n	80031f8 <HAL_UART_RxCpltCallback+0x20>
    		restart = true;
 80031f2:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <HAL_UART_RxCpltCallback+0x3c>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 80031f8:	2201      	movs	r2, #1
 80031fa:	4905      	ldr	r1, [pc, #20]	@ (8003210 <HAL_UART_RxCpltCallback+0x38>)
 80031fc:	4806      	ldr	r0, [pc, #24]	@ (8003218 <HAL_UART_RxCpltCallback+0x40>)
 80031fe:	f7fe ff7d 	bl	80020fc <HAL_UART_Receive_IT>
    }
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40004400 	.word	0x40004400
 8003210:	20000108 	.word	0x20000108
 8003214:	20000109 	.word	0x20000109
 8003218:	200000c0 	.word	0x200000c0

0800321c <memset>:
 800321c:	4402      	add	r2, r0
 800321e:	4603      	mov	r3, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <__libc_init_array>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	4d0d      	ldr	r5, [pc, #52]	@ (8003264 <__libc_init_array+0x38>)
 8003230:	4c0d      	ldr	r4, [pc, #52]	@ (8003268 <__libc_init_array+0x3c>)
 8003232:	1b64      	subs	r4, r4, r5
 8003234:	10a4      	asrs	r4, r4, #2
 8003236:	2600      	movs	r6, #0
 8003238:	42a6      	cmp	r6, r4
 800323a:	d109      	bne.n	8003250 <__libc_init_array+0x24>
 800323c:	4d0b      	ldr	r5, [pc, #44]	@ (800326c <__libc_init_array+0x40>)
 800323e:	4c0c      	ldr	r4, [pc, #48]	@ (8003270 <__libc_init_array+0x44>)
 8003240:	f000 f818 	bl	8003274 <_init>
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	2600      	movs	r6, #0
 800324a:	42a6      	cmp	r6, r4
 800324c:	d105      	bne.n	800325a <__libc_init_array+0x2e>
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	f855 3b04 	ldr.w	r3, [r5], #4
 8003254:	4798      	blx	r3
 8003256:	3601      	adds	r6, #1
 8003258:	e7ee      	b.n	8003238 <__libc_init_array+0xc>
 800325a:	f855 3b04 	ldr.w	r3, [r5], #4
 800325e:	4798      	blx	r3
 8003260:	3601      	adds	r6, #1
 8003262:	e7f2      	b.n	800324a <__libc_init_array+0x1e>
 8003264:	080032cc 	.word	0x080032cc
 8003268:	080032cc 	.word	0x080032cc
 800326c:	080032cc 	.word	0x080032cc
 8003270:	080032d0 	.word	0x080032d0

08003274 <_init>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr

08003280 <_fini>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	bf00      	nop
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr
