
Stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d58  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08002ef0  08002ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  0800302c  0800302c  0000402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003034  08003034  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003034  08003034  00004034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800303c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000005c  08003098  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003098  00005254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e6  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002004  00000000  00000000  00011272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00013278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a9  00000000  00000000  00013db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ae5  00000000  00000000  00014659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2e4  00000000  00000000  0002b13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db38  00000000  00000000  0003a422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f78  00000000  00000000  000c7fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000caf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002ed8 	.word	0x08002ed8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08002ed8 	.word	0x08002ed8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <delay_us>:
 *      Author: Stardust
 */

#include "delay.h"

void delay_us(uint16_t us){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <delay_us+0x34>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim10);
 80004da:	4808      	ldr	r0, [pc, #32]	@ (80004fc <delay_us+0x34>)
 80004dc:	f001 fbc0 	bl	8001c60 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim10) < us);
 80004e0:	bf00      	nop
 80004e2:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <delay_us+0x34>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004e8:	88fb      	ldrh	r3, [r7, #6]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d3f9      	bcc.n	80004e2 <delay_us+0x1a>

	HAL_TIM_Base_Stop(&htim10);
 80004ee:	4803      	ldr	r0, [pc, #12]	@ (80004fc <delay_us+0x34>)
 80004f0:	f001 fc10 	bl	8001d14 <HAL_TIM_Base_Stop>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000088 	.word	0x20000088

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b20      	ldr	r3, [pc, #128]	@ (800059c <MX_GPIO_Init+0x9c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a1f      	ldr	r2, [pc, #124]	@ (800059c <MX_GPIO_Init+0x9c>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b1d      	ldr	r3, [pc, #116]	@ (800059c <MX_GPIO_Init+0x9c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b19      	ldr	r3, [pc, #100]	@ (800059c <MX_GPIO_Init+0x9c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a18      	ldr	r2, [pc, #96]	@ (800059c <MX_GPIO_Init+0x9c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b16      	ldr	r3, [pc, #88]	@ (800059c <MX_GPIO_Init+0x9c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <MX_GPIO_Init+0x9c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a11      	ldr	r2, [pc, #68]	@ (800059c <MX_GPIO_Init+0x9c>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_GPIO_Init+0x9c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 7158 	mov.w	r1, #864	@ 0x360
 8000570:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000572:	f000 fe73 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000576:	f44f 7358 	mov.w	r3, #864	@ 0x360
 800057a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4619      	mov	r1, r3
 800058e:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <MX_GPIO_Init+0xa0>)
 8000590:	f000 fce0 	bl	8000f54 <HAL_GPIO_Init>

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020800 	.word	0x40020800

080005a4 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2){
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a23      	ldr	r2, [pc, #140]	@ (8000640 <HAL_UART_RxCpltCallback+0x9c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d13f      	bne.n	8000636 <HAL_UART_RxCpltCallback+0x92>
    	buffer[buffer_index++] = rxData;
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <HAL_UART_RxCpltCallback+0xa0>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	1c5a      	adds	r2, r3, #1
 80005bc:	b2d1      	uxtb	r1, r2
 80005be:	4a21      	ldr	r2, [pc, #132]	@ (8000644 <HAL_UART_RxCpltCallback+0xa0>)
 80005c0:	7011      	strb	r1, [r2, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <HAL_UART_RxCpltCallback+0xa4>)
 80005c6:	7819      	ldrb	r1, [r3, #0]
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <HAL_UART_RxCpltCallback+0xa8>)
 80005ca:	5499      	strb	r1, [r3, r2]

        if(rxData == '\n'){
 80005cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <HAL_UART_RxCpltCallback+0xa4>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b0a      	cmp	r3, #10
 80005d2:	d12b      	bne.n	800062c <HAL_UART_RxCpltCallback+0x88>
        	buffer[buffer_index] = '\0';
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <HAL_UART_RxCpltCallback+0xa0>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <HAL_UART_RxCpltCallback+0xa8>)
 80005dc:	2100      	movs	r1, #0
 80005de:	5499      	strb	r1, [r3, r2]
        	buffer_index = 0;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_UART_RxCpltCallback+0xa0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]

            if(buffer[0] == 'r'){
 80005e6:	4b19      	ldr	r3, [pc, #100]	@ (800064c <HAL_UART_RxCpltCallback+0xa8>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b72      	cmp	r3, #114	@ 0x72
 80005ec:	d10d      	bne.n	800060a <HAL_UART_RxCpltCallback+0x66>
                value = atoi(&buffer[2]);
 80005ee:	4818      	ldr	r0, [pc, #96]	@ (8000650 <HAL_UART_RxCpltCallback+0xac>)
 80005f0:	f002 fbb8 	bl	8002d64 <atoi>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <HAL_UART_RxCpltCallback+0xb0>)
 80005fa:	801a      	strh	r2, [r3, #0]
                rotateDegrees(value, DIR_CW);
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <HAL_UART_RxCpltCallback+0xb0>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f916 	bl	8000834 <rotateDegrees>
 8000608:	e010      	b.n	800062c <HAL_UART_RxCpltCallback+0x88>
            }
            else if(buffer[0] == 'l'){
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <HAL_UART_RxCpltCallback+0xa8>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b6c      	cmp	r3, #108	@ 0x6c
 8000610:	d10c      	bne.n	800062c <HAL_UART_RxCpltCallback+0x88>
                value = atoi(&buffer[2]);
 8000612:	480f      	ldr	r0, [pc, #60]	@ (8000650 <HAL_UART_RxCpltCallback+0xac>)
 8000614:	f002 fba6 	bl	8002d64 <atoi>
 8000618:	4603      	mov	r3, r0
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <HAL_UART_RxCpltCallback+0xb0>)
 800061e:	801a      	strh	r2, [r3, #0]
                rotateDegrees(value, DIR_CCW);
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <HAL_UART_RxCpltCallback+0xb0>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f904 	bl	8000834 <rotateDegrees>
            }
        }
        HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 800062c:	2201      	movs	r2, #1
 800062e:	4906      	ldr	r1, [pc, #24]	@ (8000648 <HAL_UART_RxCpltCallback+0xa4>)
 8000630:	4809      	ldr	r0, [pc, #36]	@ (8000658 <HAL_UART_RxCpltCallback+0xb4>)
 8000632:	f001 fc73 	bl	8001f1c <HAL_UART_Receive_IT>
    }
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40004400 	.word	0x40004400
 8000644:	20000082 	.word	0x20000082
 8000648:	20000083 	.word	0x20000083
 800064c:	20000078 	.word	0x20000078
 8000650:	2000007a 	.word	0x2000007a
 8000654:	20000084 	.word	0x20000084
 8000658:	200000d0 	.word	0x200000d0

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fa62 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f812 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f7ff ff4a 	bl	8000500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f9b8 	bl	80009e0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000670:	f000 f970 	bl	8000954 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000674:	2201      	movs	r2, #1
 8000676:	4903      	ldr	r1, [pc, #12]	@ (8000684 <main+0x28>)
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <main+0x2c>)
 800067a:	f001 fc4f 	bl	8001f1c <HAL_UART_Receive_IT>
//  rotateDegrees(360, DIR_CW);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	bf00      	nop
 8000680:	e7fd      	b.n	800067e <main+0x22>
 8000682:	bf00      	nop
 8000684:	20000083 	.word	0x20000083
 8000688:	200000d0 	.word	0x200000d0

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fbea 	bl	8002e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <SystemClock_Config+0xc8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <SystemClock_Config+0xc8>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <SystemClock_Config+0xc8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <SystemClock_Config+0xcc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a20      	ldr	r2, [pc, #128]	@ (8000758 <SystemClock_Config+0xcc>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <SystemClock_Config+0xcc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fdbd 	bl	8001290 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f81e 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2103      	movs	r1, #3
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f81f 	bl	8001780 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000748:	f000 f808 	bl	800075c <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	@ 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <stepMotor>:
 *      Author: Stardust
 */

#include "stepper.h"

void stepMotor(uint8_t step){
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_Port, IN1_Pin, HALF_STEP_SEQ[step][0]);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4a15      	ldr	r2, [pc, #84]	@ (80007cc <stepMotor+0x64>)
 8000776:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800077a:	461a      	mov	r2, r3
 800077c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <stepMotor+0x68>)
 8000782:	f000 fd6b 	bl	800125c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_Port, IN2_Pin, HALF_STEP_SEQ[step][1]);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a10      	ldr	r2, [pc, #64]	@ (80007cc <stepMotor+0x64>)
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	461a      	mov	r2, r3
 8000792:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000796:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <stepMotor+0x68>)
 8000798:	f000 fd60 	bl	800125c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_Port, IN3_Pin, HALF_STEP_SEQ[step][2]);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <stepMotor+0x64>)
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	789b      	ldrb	r3, [r3, #2]
 80007a6:	461a      	mov	r2, r3
 80007a8:	2140      	movs	r1, #64	@ 0x40
 80007aa:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <stepMotor+0x68>)
 80007ac:	f000 fd56 	bl	800125c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_Port, IN4_Pin, HALF_STEP_SEQ[step][3]);
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4a06      	ldr	r2, [pc, #24]	@ (80007cc <stepMotor+0x64>)
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	78db      	ldrb	r3, [r3, #3]
 80007ba:	461a      	mov	r2, r3
 80007bc:	2120      	movs	r1, #32
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <stepMotor+0x68>)
 80007c0:	f000 fd4c 	bl	800125c <HAL_GPIO_WritePin>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	08002ef0 	.word	0x08002ef0
 80007d0:	40020800 	.word	0x40020800

080007d4 <rotateSteps>:
void rotateSteps(uint16_t steps, uint8_t direction){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	460a      	mov	r2, r1
 80007de:	80fb      	strh	r3, [r7, #6]
 80007e0:	4613      	mov	r3, r2
 80007e2:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<steps; i++){
 80007e4:	2300      	movs	r3, #0
 80007e6:	81fb      	strh	r3, [r7, #14]
 80007e8:	e01a      	b.n	8000820 <rotateSteps+0x4c>
		uint8_t step;
		// 회전 방향에 맞춰서 스텝 패턴 설정
		if(direction == DIR_CW){
 80007ea:	797b      	ldrb	r3, [r7, #5]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <rotateSteps+0x28>
			step = i % 8;
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	737b      	strb	r3, [r7, #13]
 80007fa:	e006      	b.n	800080a <rotateSteps+0x36>
		}
		else{
			step = 7 - (i % 8);
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 0307 	and.w	r3, r3, #7
 8000808:	737b      	strb	r3, [r7, #13]
		}
		stepMotor(step);
 800080a:	7b7b      	ldrb	r3, [r7, #13]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffab 	bl	8000768 <stepMotor>
		delay_us(1000);	// 각 스텝간의 지연
 8000812:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000816:	f7ff fe57 	bl	80004c8 <delay_us>
	for(uint16_t i=0; i<steps; i++){
 800081a:	89fb      	ldrh	r3, [r7, #14]
 800081c:	3301      	adds	r3, #1
 800081e:	81fb      	strh	r3, [r7, #14]
 8000820:	89fa      	ldrh	r2, [r7, #14]
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	429a      	cmp	r2, r3
 8000826:	d3e0      	bcc.n	80007ea <rotateSteps+0x16>
	}
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <rotateDegrees>:
void rotateDegrees(uint16_t degrees, uint8_t direction){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	80fb      	strh	r3, [r7, #6]
 8000840:	4613      	mov	r3, r2
 8000842:	717b      	strb	r3, [r7, #5]
	uint16_t steps = (uint16_t)(((uint32_t)degrees * STEPS_PER_REVOLATION) / 360);
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	031b      	lsls	r3, r3, #12
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <rotateDegrees+0x34>)
 800084c:	fba2 2303 	umull	r2, r3, r2, r3
 8000850:	089b      	lsrs	r3, r3, #2
 8000852:	81fb      	strh	r3, [r7, #14]
	rotateSteps(steps, direction);
 8000854:	797a      	ldrb	r2, [r7, #5]
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	4611      	mov	r1, r2
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffba 	bl	80007d4 <rotateSteps>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	16c16c17 	.word	0x16c16c17

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	@ (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000880:	6453      	str	r3, [r2, #68]	@ 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	@ (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	@ 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008aa:	2007      	movs	r0, #7
 80008ac:	f000 fa7e 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 f95b 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <USART2_IRQHandler+0x10>)
 8000922:	f001 fb21 	bl	8001f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000d0 	.word	0x200000d0

08000930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <SystemInit+0x20>)
 8000936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093a:	4a05      	ldr	r2, [pc, #20]	@ (8000950 <SystemInit+0x20>)
 800093c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_TIM10_Init+0x40>)
 800095a:	4a0f      	ldr	r2, [pc, #60]	@ (8000998 <MX_TIM10_Init+0x44>)
 800095c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_TIM10_Init+0x40>)
 8000960:	2263      	movs	r2, #99	@ 0x63
 8000962:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_TIM10_Init+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_TIM10_Init+0x40>)
 800096c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000970:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_TIM10_Init+0x40>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_TIM10_Init+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_TIM10_Init+0x40>)
 8000980:	f001 f91e 	bl	8001bc0 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800098a:	f7ff fee7 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000088 	.word	0x20000088
 8000998:	40014400 	.word	0x40014400

0800099c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <HAL_TIM_Base_MspInit+0x3c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d10d      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_TIM_Base_MspInit+0x40>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a09      	ldr	r2, [pc, #36]	@ (80009dc <HAL_TIM_Base_MspInit+0x40>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <HAL_TIM_Base_MspInit+0x40>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40014400 	.word	0x40014400
 80009dc:	40023800 	.word	0x40023800

080009e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <MX_USART2_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a18:	f001 fa30 	bl	8001e7c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f7ff fe9b 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000d0 	.word	0x200000d0
 8000a30:	40004400 	.word	0x40004400

08000a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <HAL_UART_MspInit+0x94>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d133      	bne.n	8000abe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_UART_MspInit+0x98>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000a8e:	230c      	movs	r3, #12
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9e:	2307      	movs	r3, #7
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <HAL_UART_MspInit+0x9c>)
 8000aaa:	f000 fa53 	bl	8000f54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2026      	movs	r0, #38	@ 0x26
 8000ab4:	f000 f985 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ab8:	2026      	movs	r0, #38	@ 0x26
 8000aba:	f000 f99e 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	@ 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad8:	f7ff ff2a 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	@ (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f002 f9c5 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fda9 	bl	800065c <main>
  bx  lr    
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b18:	0800303c 	.word	0x0800303c
  ldr r2, =_sbss
 8000b1c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b20:	20000254 	.word	0x20000254

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	@ (8000b68 <HAL_Init+0x40>)
 8000b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_Init+0x40>)
 8000b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_Init+0x40>)
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f92b 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fe86 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f943 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f90b 	bl	8000dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	@ (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000004 	.word	0x20000004

08000bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000118 	.word	0x20000118

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	@ (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000118 	.word	0x20000118

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	@ (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	@ (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	@ (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	@ 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	@ 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff3e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff31 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff feda 	bl	8000bf4 <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d008      	beq.n	8000e60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e052      	b.n	8000f06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0216 	bic.w	r2, r2, #22
 8000e6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d103      	bne.n	8000e90 <HAL_DMA_Abort+0x62>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0208 	bic.w	r2, r2, #8
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 0201 	bic.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb0:	e013      	b.n	8000eda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eb2:	f7ff fe9f 	bl	8000bf4 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b05      	cmp	r3, #5
 8000ebe:	d90c      	bls.n	8000eda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e015      	b.n	8000f06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1e4      	bne.n	8000eb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eec:	223f      	movs	r2, #63	@ 0x3f
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d004      	beq.n	8000f2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2280      	movs	r2, #128	@ 0x80
 8000f26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e00c      	b.n	8000f46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2205      	movs	r2, #5
 8000f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b57      	ldr	r3, [pc, #348]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a56      	ldr	r2, [pc, #344]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b54      	ldr	r3, [pc, #336]	@ (800123c <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <HAL_GPIO_Init+0x2ec>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	@ (8001244 <HAL_GPIO_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a48      	ldr	r2, [pc, #288]	@ (8001248 <HAL_GPIO_Init+0x2f4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a47      	ldr	r2, [pc, #284]	@ (800124c <HAL_GPIO_Init+0x2f8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	@ (8001250 <HAL_GPIO_Init+0x2fc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	@ (8001254 <HAL_GPIO_Init+0x300>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x2ec>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b38      	ldr	r3, [pc, #224]	@ (8001258 <HAL_GPIO_Init+0x304>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a2f      	ldr	r2, [pc, #188]	@ (8001258 <HAL_GPIO_Init+0x304>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a24      	ldr	r2, [pc, #144]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_GPIO_Init+0x304>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e267      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d075      	beq.n	800139a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	4b88      	ldr	r3, [pc, #544]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d00c      	beq.n	80012d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ba:	4b85      	ldr	r3, [pc, #532]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d112      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c6:	4b82      	ldr	r3, [pc, #520]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012d2:	d10b      	bne.n	80012ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	4b7e      	ldr	r3, [pc, #504]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d05b      	beq.n	8001398 <HAL_RCC_OscConfig+0x108>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d157      	bne.n	8001398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e242      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f4:	d106      	bne.n	8001304 <HAL_RCC_OscConfig+0x74>
 80012f6:	4b76      	ldr	r3, [pc, #472]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a75      	ldr	r2, [pc, #468]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x98>
 800130e:	4b70      	ldr	r3, [pc, #448]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6f      	ldr	r2, [pc, #444]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6d      	ldr	r3, [pc, #436]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6c      	ldr	r2, [pc, #432]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xb0>
 8001328:	4b69      	ldr	r3, [pc, #420]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a68      	ldr	r2, [pc, #416]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b66      	ldr	r3, [pc, #408]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a65      	ldr	r2, [pc, #404]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc54 	bl	8000bf4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc50 	bl	8000bf4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	@ 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e207      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b5b      	ldr	r3, [pc, #364]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xc0>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc40 	bl	8000bf4 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc3c 	bl	8000bf4 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1f3      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b51      	ldr	r3, [pc, #324]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0xe8>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	4b4a      	ldr	r3, [pc, #296]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b2:	4b47      	ldr	r3, [pc, #284]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013be:	4b44      	ldr	r3, [pc, #272]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1c7      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b3b      	ldr	r3, [pc, #236]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4937      	ldr	r1, [pc, #220]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <HAL_RCC_OscConfig+0x244>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001406:	f7ff fbf5 	bl	8000bf4 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fbf1 	bl	8000bf4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e1a8      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b2b      	ldr	r3, [pc, #172]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4925      	ldr	r1, [pc, #148]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_OscConfig+0x244>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fbd4 	bl	8000bf4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fbd0 	bl	8000bf4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e187      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d036      	beq.n	80014e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d016      	beq.n	80014b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_RCC_OscConfig+0x248>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fbb4 	bl	8000bf4 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fbb0 	bl	8000bf4 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e167      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_RCC_OscConfig+0x240>)
 80014a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x200>
 80014ae:	e01b      	b.n	80014e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_RCC_OscConfig+0x248>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fb9d 	bl	8000bf4 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	e00e      	b.n	80014dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014be:	f7ff fb99 	bl	8000bf4 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d907      	bls.n	80014dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e150      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	42470000 	.word	0x42470000
 80014d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014dc:	4b88      	ldr	r3, [pc, #544]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80014de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ea      	bne.n	80014be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 8097 	beq.w	8001624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fa:	4b81      	ldr	r3, [pc, #516]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10f      	bne.n	8001526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b7d      	ldr	r3, [pc, #500]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a7c      	ldr	r2, [pc, #496]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b7a      	ldr	r3, [pc, #488]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b77      	ldr	r3, [pc, #476]	@ (8001704 <HAL_RCC_OscConfig+0x474>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b74      	ldr	r3, [pc, #464]	@ (8001704 <HAL_RCC_OscConfig+0x474>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a73      	ldr	r2, [pc, #460]	@ (8001704 <HAL_RCC_OscConfig+0x474>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb59 	bl	8000bf4 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fb55 	bl	8000bf4 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e10c      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b6a      	ldr	r3, [pc, #424]	@ (8001704 <HAL_RCC_OscConfig+0x474>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x2ea>
 800156c:	4b64      	ldr	r3, [pc, #400]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	4a63      	ldr	r2, [pc, #396]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6713      	str	r3, [r2, #112]	@ 0x70
 8001578:	e01c      	b.n	80015b4 <HAL_RCC_OscConfig+0x324>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x30c>
 8001582:	4b5f      	ldr	r3, [pc, #380]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001586:	4a5e      	ldr	r2, [pc, #376]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6713      	str	r3, [r2, #112]	@ 0x70
 800158e:	4b5c      	ldr	r3, [pc, #368]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001592:	4a5b      	ldr	r2, [pc, #364]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6713      	str	r3, [r2, #112]	@ 0x70
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0x324>
 800159c:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a0:	4a57      	ldr	r2, [pc, #348]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80015a2:	f023 0301 	bic.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a8:	4b55      	ldr	r3, [pc, #340]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ac:	4a54      	ldr	r2, [pc, #336]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d015      	beq.n	80015e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fb1a 	bl	8000bf4 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb16 	bl	8000bf4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e0cb      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015da:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0ee      	beq.n	80015c4 <HAL_RCC_OscConfig+0x334>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fb04 	bl	8000bf4 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb00 	bl	8000bf4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0b5      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001606:	4b3e      	ldr	r3, [pc, #248]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ee      	bne.n	80015f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001618:	4b39      	ldr	r3, [pc, #228]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	4a38      	ldr	r2, [pc, #224]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 800161e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80a1 	beq.w	8001770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162e:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d05c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d141      	bne.n	80016c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <HAL_RCC_OscConfig+0x478>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7ff fad4 	bl	8000bf4 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001650:	f7ff fad0 	bl	8000bf4 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e087      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167c:	019b      	lsls	r3, r3, #6
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001684:	085b      	lsrs	r3, r3, #1
 8001686:	3b01      	subs	r3, #1
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001690:	061b      	lsls	r3, r3, #24
 8001692:	491b      	ldr	r1, [pc, #108]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x478>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff faa9 	bl	8000bf4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff faa5 	bl	8000bf4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e05c      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x416>
 80016c4:	e054      	b.n	8001770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <HAL_RCC_OscConfig+0x478>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fa92 	bl	8000bf4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff fa8e 	bl	8000bf4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e045      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_RCC_OscConfig+0x470>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x444>
 80016f2:	e03d      	b.n	8001770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e038      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000
 8001708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_RCC_OscConfig+0x4ec>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d028      	beq.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d121      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d11a      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800173c:	4013      	ands	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001744:	4293      	cmp	r3, r2
 8001746:	d111      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	3b01      	subs	r3, #1
 8001756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0cc      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001794:	4b68      	ldr	r3, [pc, #416]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d90c      	bls.n	80017bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b65      	ldr	r3, [pc, #404]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a58      	ldr	r2, [pc, #352]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a52      	ldr	r2, [pc, #328]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d044      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d003      	beq.n	800183e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	2b03      	cmp	r3, #3
 800183c:	d107      	bne.n	800184e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e06f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184e:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e067      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185e:	4b37      	ldr	r3, [pc, #220]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 0203 	bic.w	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4934      	ldr	r1, [pc, #208]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001870:	f7ff f9c0 	bl	8000bf4 <HAL_GetTick>
 8001874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001876:	e00a      	b.n	800188e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001878:	f7ff f9bc 	bl	8000bf4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e04f      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 020c 	and.w	r2, r3, #12
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	429a      	cmp	r2, r3
 800189e:	d1eb      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d20c      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b22      	ldr	r3, [pc, #136]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <HAL_RCC_ClockConfig+0x1b8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	@ (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	@ (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f920 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00
 800193c:	40023800 	.word	0x40023800
 8001940:	08002f10 	.word	0x08002f10
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004

0800194c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001950:	b094      	sub	sp, #80	@ 0x50
 8001952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	647b      	str	r3, [r7, #68]	@ 0x44
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800195c:	2300      	movs	r3, #0
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001964:	4b79      	ldr	r3, [pc, #484]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d00d      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x40>
 8001970:	2b08      	cmp	r3, #8
 8001972:	f200 80e1 	bhi.w	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x34>
 800197a:	2b04      	cmp	r3, #4
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x3a>
 800197e:	e0db      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001982:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001984:	e0db      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001986:	4b73      	ldr	r3, [pc, #460]	@ (8001b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800198a:	e0d8      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800198c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001994:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001996:	4b6d      	ldr	r3, [pc, #436]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d063      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	099b      	lsrs	r3, r3, #6
 80019a8:	2200      	movs	r2, #0
 80019aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019be:	4622      	mov	r2, r4
 80019c0:	462b      	mov	r3, r5
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	f04f 0100 	mov.w	r1, #0
 80019ca:	0159      	lsls	r1, r3, #5
 80019cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d0:	0150      	lsls	r0, r2, #5
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4621      	mov	r1, r4
 80019d8:	1a51      	subs	r1, r2, r1
 80019da:	6139      	str	r1, [r7, #16]
 80019dc:	4629      	mov	r1, r5
 80019de:	eb63 0301 	sbc.w	r3, r3, r1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019f0:	4659      	mov	r1, fp
 80019f2:	018b      	lsls	r3, r1, #6
 80019f4:	4651      	mov	r1, sl
 80019f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019fa:	4651      	mov	r1, sl
 80019fc:	018a      	lsls	r2, r1, #6
 80019fe:	4651      	mov	r1, sl
 8001a00:	ebb2 0801 	subs.w	r8, r2, r1
 8001a04:	4659      	mov	r1, fp
 8001a06:	eb63 0901 	sbc.w	r9, r3, r1
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1e:	4690      	mov	r8, r2
 8001a20:	4699      	mov	r9, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	eb18 0303 	adds.w	r3, r8, r3
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	462b      	mov	r3, r5
 8001a2c:	eb49 0303 	adc.w	r3, r9, r3
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a3e:	4629      	mov	r1, r5
 8001a40:	024b      	lsls	r3, r1, #9
 8001a42:	4621      	mov	r1, r4
 8001a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a48:	4621      	mov	r1, r4
 8001a4a:	024a      	lsls	r2, r1, #9
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a52:	2200      	movs	r2, #0
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a5c:	f7fe fbbc 	bl	80001d8 <__aeabi_uldivmod>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4613      	mov	r3, r2
 8001a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a68:	e058      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	4611      	mov	r1, r2
 8001a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a84:	4642      	mov	r2, r8
 8001a86:	464b      	mov	r3, r9
 8001a88:	f04f 0000 	mov.w	r0, #0
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	0159      	lsls	r1, r3, #5
 8001a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a96:	0150      	lsls	r0, r2, #5
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4641      	mov	r1, r8
 8001a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001abc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	00eb      	lsls	r3, r5, #3
 8001ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ad2:	00e2      	lsls	r2, r4, #3
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	4643      	mov	r3, r8
 8001ada:	18e3      	adds	r3, r4, r3
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	464b      	mov	r3, r9
 8001ae0:	eb45 0303 	adc.w	r3, r5, r3
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001af2:	4629      	mov	r1, r5
 8001af4:	028b      	lsls	r3, r1, #10
 8001af6:	4621      	mov	r1, r4
 8001af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001afc:	4621      	mov	r1, r4
 8001afe:	028a      	lsls	r2, r1, #10
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b06:	2200      	movs	r2, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	61fa      	str	r2, [r7, #28]
 8001b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b10:	f7fe fb62 	bl	80001d8 <__aeabi_uldivmod>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4613      	mov	r3, r2
 8001b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	3301      	adds	r3, #1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3750      	adds	r7, #80	@ 0x50
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400
 8001b54:	007a1200 	.word	0x007a1200

08001b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b74:	f7ff fff0 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0a9b      	lsrs	r3, r3, #10
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	@ (8001b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08002f20 	.word	0x08002f20

08001b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b9c:	f7ff ffdc 	bl	8001b58 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0b5b      	lsrs	r3, r3, #13
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	@ (8001bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	08002f20 	.word	0x08002f20

08001bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e041      	b.n	8001c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7fe fed8 	bl	800099c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 f8b0 	bl	8001d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d001      	beq.n	8001c78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e03c      	b.n	8001cf2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <HAL_TIM_Base_Start+0xa0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d018      	beq.n	8001cbc <HAL_TIM_Base_Start+0x5c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c92:	d013      	beq.n	8001cbc <HAL_TIM_Base_Start+0x5c>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1a      	ldr	r2, [pc, #104]	@ (8001d04 <HAL_TIM_Base_Start+0xa4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_TIM_Base_Start+0x5c>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <HAL_TIM_Base_Start+0xa8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_TIM_Base_Start+0x5c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_TIM_Base_Start+0xac>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_TIM_Base_Start+0x5c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <HAL_TIM_Base_Start+0xb0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d111      	bne.n	8001ce0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d010      	beq.n	8001cf0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cde:	e007      	b.n	8001cf0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40014000 	.word	0x40014000

08001d14 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_TIM_Base_Stop+0x38>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	f240 4344 	movw	r3, #1092	@ 0x444
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_TIM_Base_Stop+0x38>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3a      	ldr	r2, [pc, #232]	@ (8001e60 <TIM_Base_SetConfig+0xfc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00f      	beq.n	8001d9c <TIM_Base_SetConfig+0x38>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d82:	d00b      	beq.n	8001d9c <TIM_Base_SetConfig+0x38>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a37      	ldr	r2, [pc, #220]	@ (8001e64 <TIM_Base_SetConfig+0x100>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d007      	beq.n	8001d9c <TIM_Base_SetConfig+0x38>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a36      	ldr	r2, [pc, #216]	@ (8001e68 <TIM_Base_SetConfig+0x104>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d003      	beq.n	8001d9c <TIM_Base_SetConfig+0x38>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a35      	ldr	r2, [pc, #212]	@ (8001e6c <TIM_Base_SetConfig+0x108>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d108      	bne.n	8001dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e60 <TIM_Base_SetConfig+0xfc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01b      	beq.n	8001dee <TIM_Base_SetConfig+0x8a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dbc:	d017      	beq.n	8001dee <TIM_Base_SetConfig+0x8a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a28      	ldr	r2, [pc, #160]	@ (8001e64 <TIM_Base_SetConfig+0x100>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <TIM_Base_SetConfig+0x8a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a27      	ldr	r2, [pc, #156]	@ (8001e68 <TIM_Base_SetConfig+0x104>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00f      	beq.n	8001dee <TIM_Base_SetConfig+0x8a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a26      	ldr	r2, [pc, #152]	@ (8001e6c <TIM_Base_SetConfig+0x108>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00b      	beq.n	8001dee <TIM_Base_SetConfig+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	@ (8001e70 <TIM_Base_SetConfig+0x10c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <TIM_Base_SetConfig+0x110>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d003      	beq.n	8001dee <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <TIM_Base_SetConfig+0x114>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d108      	bne.n	8001e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	@ (8001e60 <TIM_Base_SetConfig+0xfc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d103      	bne.n	8001e34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d105      	bne.n	8001e52 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f023 0201 	bic.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  }
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800
 8001e6c:	40000c00 	.word	0x40000c00
 8001e70:	40014000 	.word	0x40014000
 8001e74:	40014400 	.word	0x40014400
 8001e78:	40014800 	.word	0x40014800

08001e7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e042      	b.n	8001f14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7fe fdc6 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2224      	movs	r2, #36	@ 0x24
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fcdb 	bl	800287c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ed4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ef4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d112      	bne.n	8001f5c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_UART_Receive_IT+0x26>
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00b      	b.n	8001f5e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 faba 	bl	80024cc <UART_Start_Receive_IT>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	e000      	b.n	8001f5e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0ba      	sub	sp, #232	@ 0xe8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001fa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10f      	bne.n	8001fce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_UART_IRQHandler+0x66>
 8001fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 fb99 	bl	80026fe <UART_Receive_IT>
      return;
 8001fcc:	e25b      	b.n	8002486 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80de 	beq.w	8002194 <HAL_UART_IRQHandler+0x22c>
 8001fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80d1 	beq.w	8002194 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_UART_IRQHandler+0xae>
 8001ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	f043 0201 	orr.w	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_UART_IRQHandler+0xd2>
 8002022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800203a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_UART_IRQHandler+0xf6>
 8002046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f043 0204 	orr.w	r2, r3, #4
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800205e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d011      	beq.n	800208e <HAL_UART_IRQHandler+0x126>
 800206a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	f043 0208 	orr.w	r2, r3, #8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 81f2 	beq.w	800247c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800209c:	f003 0320 	and.w	r3, r3, #32
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_UART_IRQHandler+0x14e>
 80020a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fb24 	bl	80026fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c0:	2b40      	cmp	r3, #64	@ 0x40
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <HAL_UART_IRQHandler+0x17a>
 80020da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d04f      	beq.n	8002182 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa2c 	bl	8002540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f2:	2b40      	cmp	r3, #64	@ 0x40
 80020f4:	d141      	bne.n	800217a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3314      	adds	r3, #20
 80020fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002100:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002104:	e853 3f00 	ldrex	r3, [r3]
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800210c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3314      	adds	r3, #20
 800211e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002122:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800212e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002132:	e841 2300 	strex	r3, r2, [r1]
 8002136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800213a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1d9      	bne.n	80020f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d013      	beq.n	8002172 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214e:	4a7e      	ldr	r2, [pc, #504]	@ (8002348 <HAL_UART_IRQHandler+0x3e0>)
 8002150:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fed9 	bl	8000f0e <HAL_DMA_Abort_IT>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d016      	beq.n	8002190 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800216c:	4610      	mov	r0, r2
 800216e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	e00e      	b.n	8002190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f994 	bl	80024a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002178:	e00a      	b.n	8002190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f990 	bl	80024a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002180:	e006      	b.n	8002190 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f98c 	bl	80024a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800218e:	e175      	b.n	800247c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002190:	bf00      	nop
    return;
 8002192:	e173      	b.n	800247c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	2b01      	cmp	r3, #1
 800219a:	f040 814f 	bne.w	800243c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800219e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8148 	beq.w	800243c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8141 	beq.w	800243c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021da:	2b40      	cmp	r3, #64	@ 0x40
 80021dc:	f040 80b6 	bne.w	800234c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80021ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8145 	beq.w	8002480 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80021fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80021fe:	429a      	cmp	r2, r3
 8002200:	f080 813e 	bcs.w	8002480 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800220a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002216:	f000 8088 	beq.w	800232a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	330c      	adds	r3, #12
 8002220:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002224:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002228:	e853 3f00 	ldrex	r3, [r3]
 800222c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002230:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002238:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	330c      	adds	r3, #12
 8002242:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002246:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800224a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002252:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800225e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1d9      	bne.n	800221a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3314      	adds	r3, #20
 800226c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3314      	adds	r3, #20
 8002286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800228a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800228e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002290:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002292:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002296:	e841 2300 	strex	r3, r2, [r1]
 800229a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800229c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1e1      	bne.n	8002266 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3314      	adds	r3, #20
 80022a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3314      	adds	r3, #20
 80022c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80022c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80022cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80022d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e3      	bne.n	80022a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	330c      	adds	r3, #12
 80022ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022f2:	e853 3f00 	ldrex	r3, [r3]
 80022f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80022f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022fa:	f023 0310 	bic.w	r3, r3, #16
 80022fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800230c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800230e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002310:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002312:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002314:	e841 2300 	strex	r3, r2, [r1]
 8002318:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800231a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e3      	bne.n	80022e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fd82 	bl	8000e2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002338:	b29b      	uxth	r3, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8b7 	bl	80024b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002346:	e09b      	b.n	8002480 <HAL_UART_IRQHandler+0x518>
 8002348:	08002607 	.word	0x08002607
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002354:	b29b      	uxth	r3, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 808e 	beq.w	8002484 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 8089 	beq.w	8002484 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	330c      	adds	r3, #12
 8002378:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002384:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002388:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002396:	647a      	str	r2, [r7, #68]	@ 0x44
 8002398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800239c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e3      	bne.n	8002372 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3314      	adds	r3, #20
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	623b      	str	r3, [r7, #32]
   return(result);
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3314      	adds	r3, #20
 80023ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80023ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80023d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d6:	e841 2300 	strex	r3, r2, [r1]
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e3      	bne.n	80023aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	330c      	adds	r3, #12
 80023f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	e853 3f00 	ldrex	r3, [r3]
 80023fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f023 0310 	bic.w	r3, r3, #16
 8002406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002414:	61fa      	str	r2, [r7, #28]
 8002416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002418:	69b9      	ldr	r1, [r7, #24]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	e841 2300 	strex	r3, r2, [r1]
 8002420:	617b      	str	r3, [r7, #20]
   return(result);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e3      	bne.n	80023f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800242e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f83d 	bl	80024b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800243a:	e023      	b.n	8002484 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800243c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_UART_IRQHandler+0x4f4>
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800244c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f8ea 	bl	800262e <UART_Transmit_IT>
    return;
 800245a:	e014      	b.n	8002486 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <HAL_UART_IRQHandler+0x51e>
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800246c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f92a 	bl	80026ce <UART_EndTransmit_IT>
    return;
 800247a:	e004      	b.n	8002486 <HAL_UART_IRQHandler+0x51e>
    return;
 800247c:	bf00      	nop
 800247e:	e002      	b.n	8002486 <HAL_UART_IRQHandler+0x51e>
      return;
 8002480:	bf00      	nop
 8002482:	e000      	b.n	8002486 <HAL_UART_IRQHandler+0x51e>
      return;
 8002484:	bf00      	nop
  }
}
 8002486:	37e8      	adds	r7, #232	@ 0xe8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	88fa      	ldrh	r2, [r7, #6]
 80024e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	88fa      	ldrh	r2, [r7, #6]
 80024ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2222      	movs	r2, #34	@ 0x22
 80024f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002510:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695a      	ldr	r2, [r3, #20]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002540:	b480      	push	{r7}
 8002542:	b095      	sub	sp, #84	@ 0x54
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800255e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	330c      	adds	r3, #12
 8002566:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002568:	643a      	str	r2, [r7, #64]	@ 0x40
 800256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800256e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3314      	adds	r3, #20
 8002582:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	e853 3f00 	ldrex	r3, [r3]
 800258a:	61fb      	str	r3, [r7, #28]
   return(result);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3314      	adds	r3, #20
 800259a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800259c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800259e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a4:	e841 2300 	strex	r3, r2, [r1]
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1e5      	bne.n	800257c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d119      	bne.n	80025ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	e853 3f00 	ldrex	r3, [r3]
 80025c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f023 0310 	bic.w	r3, r3, #16
 80025ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025d8:	61ba      	str	r2, [r7, #24]
 80025da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025dc:	6979      	ldr	r1, [r7, #20]
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	e841 2300 	strex	r3, r2, [r1]
 80025e4:	613b      	str	r3, [r7, #16]
   return(result);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e5      	bne.n	80025b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025fa:	bf00      	nop
 80025fc:	3754      	adds	r7, #84	@ 0x54
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002612:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff ff3d 	bl	80024a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b21      	cmp	r3, #33	@ 0x21
 8002640:	d13e      	bne.n	80026c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800264a:	d114      	bne.n	8002676 <UART_Transmit_IT+0x48>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d110      	bne.n	8002676 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002668:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	1c9a      	adds	r2, r3, #2
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	621a      	str	r2, [r3, #32]
 8002674:	e008      	b.n	8002688 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	1c59      	adds	r1, r3, #1
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6211      	str	r1, [r2, #32]
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29b      	uxth	r3, r3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4619      	mov	r1, r3
 8002696:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10f      	bne.n	80026bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e000      	b.n	80026c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff fecc 	bl	800248c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b08c      	sub	sp, #48	@ 0x30
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b22      	cmp	r3, #34	@ 0x22
 8002710:	f040 80ae 	bne.w	8002870 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271c:	d117      	bne.n	800274e <UART_Receive_IT+0x50>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d113      	bne.n	800274e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273c:	b29a      	uxth	r2, r3
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
 800274c:	e026      	b.n	800279c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002760:	d007      	beq.n	8002772 <UART_Receive_IT+0x74>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10a      	bne.n	8002780 <UART_Receive_IT+0x82>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	b2da      	uxtb	r2, r3
 800277a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e008      	b.n	8002792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800278c:	b2da      	uxtb	r2, r3
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4619      	mov	r1, r3
 80027aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d15d      	bne.n	800286c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0220 	bic.w	r2, r2, #32
 80027be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d135      	bne.n	8002862 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	330c      	adds	r3, #12
 8002802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	e853 3f00 	ldrex	r3, [r3]
 800280a:	613b      	str	r3, [r7, #16]
   return(result);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f023 0310 	bic.w	r3, r3, #16
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800281c:	623a      	str	r2, [r7, #32]
 800281e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002820:	69f9      	ldr	r1, [r7, #28]
 8002822:	6a3a      	ldr	r2, [r7, #32]
 8002824:	e841 2300 	strex	r3, r2, [r1]
 8002828:	61bb      	str	r3, [r7, #24]
   return(result);
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e5      	bne.n	80027fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b10      	cmp	r3, #16
 800283c:	d10a      	bne.n	8002854 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002858:	4619      	mov	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fe2a 	bl	80024b4 <HAL_UARTEx_RxEventCallback>
 8002860:	e002      	b.n	8002868 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fd fe9e 	bl	80005a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e002      	b.n	8002872 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3730      	adds	r7, #48	@ 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b0c0      	sub	sp, #256	@ 0x100
 8002882:	af00      	add	r7, sp, #0
 8002884:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	68d9      	ldr	r1, [r3, #12]
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	ea40 0301 	orr.w	r3, r0, r1
 80028a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028d4:	f021 010c 	bic.w	r1, r1, #12
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028e2:	430b      	orrs	r3, r1
 80028e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f6:	6999      	ldr	r1, [r3, #24]
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	ea40 0301 	orr.w	r3, r0, r1
 8002902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b48 <UART_SetConfig+0x2cc>)
 800290c:	429a      	cmp	r2, r3
 800290e:	d005      	beq.n	800291c <UART_SetConfig+0xa0>
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b8d      	ldr	r3, [pc, #564]	@ (8002b4c <UART_SetConfig+0x2d0>)
 8002918:	429a      	cmp	r2, r3
 800291a:	d104      	bne.n	8002926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800291c:	f7ff f93c 	bl	8001b98 <HAL_RCC_GetPCLK2Freq>
 8002920:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002924:	e003      	b.n	800292e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002926:	f7ff f923 	bl	8001b70 <HAL_RCC_GetPCLK1Freq>
 800292a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002938:	f040 810c 	bne.w	8002b54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800293c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002940:	2200      	movs	r2, #0
 8002942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002946:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800294a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800294e:	4622      	mov	r2, r4
 8002950:	462b      	mov	r3, r5
 8002952:	1891      	adds	r1, r2, r2
 8002954:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002956:	415b      	adcs	r3, r3
 8002958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800295a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800295e:	4621      	mov	r1, r4
 8002960:	eb12 0801 	adds.w	r8, r2, r1
 8002964:	4629      	mov	r1, r5
 8002966:	eb43 0901 	adc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800298c:	462b      	mov	r3, r5
 800298e:	eb49 0303 	adc.w	r3, r9, r3
 8002992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029aa:	460b      	mov	r3, r1
 80029ac:	18db      	adds	r3, r3, r3
 80029ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80029b0:	4613      	mov	r3, r2
 80029b2:	eb42 0303 	adc.w	r3, r2, r3
 80029b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029c0:	f7fd fc0a 	bl	80001d8 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4b61      	ldr	r3, [pc, #388]	@ (8002b50 <UART_SetConfig+0x2d4>)
 80029ca:	fba3 2302 	umull	r2, r3, r3, r2
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	011c      	lsls	r4, r3, #4
 80029d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d6:	2200      	movs	r2, #0
 80029d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	1891      	adds	r1, r2, r2
 80029ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029ec:	415b      	adcs	r3, r3
 80029ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029f4:	4641      	mov	r1, r8
 80029f6:	eb12 0a01 	adds.w	sl, r2, r1
 80029fa:	4649      	mov	r1, r9
 80029fc:	eb43 0b01 	adc.w	fp, r3, r1
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a14:	4692      	mov	sl, r2
 8002a16:	469b      	mov	fp, r3
 8002a18:	4643      	mov	r3, r8
 8002a1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a22:	464b      	mov	r3, r9
 8002a24:	eb4b 0303 	adc.w	r3, fp, r3
 8002a28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a40:	460b      	mov	r3, r1
 8002a42:	18db      	adds	r3, r3, r3
 8002a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a46:	4613      	mov	r3, r2
 8002a48:	eb42 0303 	adc.w	r3, r2, r3
 8002a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a56:	f7fd fbbf 	bl	80001d8 <__aeabi_uldivmod>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002a62:	fba3 2301 	umull	r2, r3, r3, r1
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	2264      	movs	r2, #100	@ 0x64
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	1acb      	subs	r3, r1, r3
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a76:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002a78:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a84:	441c      	add	r4, r3
 8002a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a98:	4642      	mov	r2, r8
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	1891      	adds	r1, r2, r2
 8002a9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002aa0:	415b      	adcs	r3, r3
 8002aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002aa8:	4641      	mov	r1, r8
 8002aaa:	1851      	adds	r1, r2, r1
 8002aac:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aae:	4649      	mov	r1, r9
 8002ab0:	414b      	adcs	r3, r1
 8002ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ac0:	4659      	mov	r1, fp
 8002ac2:	00cb      	lsls	r3, r1, #3
 8002ac4:	4651      	mov	r1, sl
 8002ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aca:	4651      	mov	r1, sl
 8002acc:	00ca      	lsls	r2, r1, #3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	189b      	adds	r3, r3, r2
 8002ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002adc:	464b      	mov	r3, r9
 8002ade:	460a      	mov	r2, r1
 8002ae0:	eb42 0303 	adc.w	r3, r2, r3
 8002ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002af4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002af8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002afc:	460b      	mov	r3, r1
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b02:	4613      	mov	r3, r2
 8002b04:	eb42 0303 	adc.w	r3, r2, r3
 8002b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b12:	f7fd fb61 	bl	80001d8 <__aeabi_uldivmod>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	2164      	movs	r1, #100	@ 0x64
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	3332      	adds	r3, #50	@ 0x32
 8002b2e:	4a08      	ldr	r2, [pc, #32]	@ (8002b50 <UART_SetConfig+0x2d4>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	095b      	lsrs	r3, r3, #5
 8002b36:	f003 0207 	and.w	r2, r3, #7
 8002b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4422      	add	r2, r4
 8002b42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b44:	e106      	b.n	8002d54 <UART_SetConfig+0x4d8>
 8002b46:	bf00      	nop
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b66:	4642      	mov	r2, r8
 8002b68:	464b      	mov	r3, r9
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	6239      	str	r1, [r7, #32]
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b76:	4641      	mov	r1, r8
 8002b78:	1854      	adds	r4, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb43 0501 	adc.w	r5, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	00eb      	lsls	r3, r5, #3
 8002b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b8e:	00e2      	lsls	r2, r4, #3
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	18e3      	adds	r3, r4, r3
 8002b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	eb45 0303 	adc.w	r3, r5, r3
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	008b      	lsls	r3, r1, #2
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bcc:	4621      	mov	r1, r4
 8002bce:	008a      	lsls	r2, r1, #2
 8002bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bd4:	f7fd fb00 	bl	80001d8 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4b60      	ldr	r3, [pc, #384]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	011c      	lsls	r4, r3, #4
 8002be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bf8:	4642      	mov	r2, r8
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	1891      	adds	r1, r2, r2
 8002bfe:	61b9      	str	r1, [r7, #24]
 8002c00:	415b      	adcs	r3, r3
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c08:	4641      	mov	r1, r8
 8002c0a:	1851      	adds	r1, r2, r1
 8002c0c:	6139      	str	r1, [r7, #16]
 8002c0e:	4649      	mov	r1, r9
 8002c10:	414b      	adcs	r3, r1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c20:	4659      	mov	r1, fp
 8002c22:	00cb      	lsls	r3, r1, #3
 8002c24:	4651      	mov	r1, sl
 8002c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c2a:	4651      	mov	r1, sl
 8002c2c:	00ca      	lsls	r2, r1, #3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	4642      	mov	r2, r8
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	460a      	mov	r2, r1
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c60:	4649      	mov	r1, r9
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	4641      	mov	r1, r8
 8002c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c6a:	4641      	mov	r1, r8
 8002c6c:	008a      	lsls	r2, r1, #2
 8002c6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c72:	f7fd fab1 	bl	80001d8 <__aeabi_uldivmod>
 8002c76:	4602      	mov	r2, r0
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2264      	movs	r2, #100	@ 0x64
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	1acb      	subs	r3, r1, r3
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	3332      	adds	r3, #50	@ 0x32
 8002c90:	4a33      	ldr	r2, [pc, #204]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c9c:	441c      	add	r4, r3
 8002c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ca6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ca8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cac:	4642      	mov	r2, r8
 8002cae:	464b      	mov	r3, r9
 8002cb0:	1891      	adds	r1, r2, r2
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	415b      	adcs	r3, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	1851      	adds	r1, r2, r1
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	414b      	adcs	r3, r1
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cd4:	4659      	mov	r1, fp
 8002cd6:	00cb      	lsls	r3, r1, #3
 8002cd8:	4651      	mov	r1, sl
 8002cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cde:	4651      	mov	r1, sl
 8002ce0:	00ca      	lsls	r2, r1, #3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4642      	mov	r2, r8
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cee:	464b      	mov	r3, r9
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	eb42 0303 	adc.w	r3, r2, r3
 8002cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d02:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d10:	4649      	mov	r1, r9
 8002d12:	008b      	lsls	r3, r1, #2
 8002d14:	4641      	mov	r1, r8
 8002d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	008a      	lsls	r2, r1, #2
 8002d1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d22:	f7fd fa59 	bl	80001d8 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	2164      	movs	r1, #100	@ 0x64
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	3332      	adds	r3, #50	@ 0x32
 8002d3e:	4a08      	ldr	r2, [pc, #32]	@ (8002d60 <UART_SetConfig+0x4e4>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4422      	add	r2, r4
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	bf00      	nop
 8002d56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d60:	51eb851f 	.word	0x51eb851f

08002d64 <atoi>:
 8002d64:	220a      	movs	r2, #10
 8002d66:	2100      	movs	r1, #0
 8002d68:	f000 b87a 	b.w	8002e60 <strtol>

08002d6c <_strtol_l.constprop.0>:
 8002d6c:	2b24      	cmp	r3, #36	@ 0x24
 8002d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d72:	4686      	mov	lr, r0
 8002d74:	4690      	mov	r8, r2
 8002d76:	d801      	bhi.n	8002d7c <_strtol_l.constprop.0+0x10>
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <_strtol_l.constprop.0+0x1e>
 8002d7c:	f000 f882 	bl	8002e84 <__errno>
 8002d80:	2316      	movs	r3, #22
 8002d82:	6003      	str	r3, [r0, #0]
 8002d84:	2000      	movs	r0, #0
 8002d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d8a:	4834      	ldr	r0, [pc, #208]	@ (8002e5c <_strtol_l.constprop.0+0xf0>)
 8002d8c:	460d      	mov	r5, r1
 8002d8e:	462a      	mov	r2, r5
 8002d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002d94:	5d06      	ldrb	r6, [r0, r4]
 8002d96:	f016 0608 	ands.w	r6, r6, #8
 8002d9a:	d1f8      	bne.n	8002d8e <_strtol_l.constprop.0+0x22>
 8002d9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8002d9e:	d12d      	bne.n	8002dfc <_strtol_l.constprop.0+0x90>
 8002da0:	782c      	ldrb	r4, [r5, #0]
 8002da2:	2601      	movs	r6, #1
 8002da4:	1c95      	adds	r5, r2, #2
 8002da6:	f033 0210 	bics.w	r2, r3, #16
 8002daa:	d109      	bne.n	8002dc0 <_strtol_l.constprop.0+0x54>
 8002dac:	2c30      	cmp	r4, #48	@ 0x30
 8002dae:	d12a      	bne.n	8002e06 <_strtol_l.constprop.0+0x9a>
 8002db0:	782a      	ldrb	r2, [r5, #0]
 8002db2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002db6:	2a58      	cmp	r2, #88	@ 0x58
 8002db8:	d125      	bne.n	8002e06 <_strtol_l.constprop.0+0x9a>
 8002dba:	786c      	ldrb	r4, [r5, #1]
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	3502      	adds	r5, #2
 8002dc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8002dc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002dc8:	2200      	movs	r2, #0
 8002dca:	fbbc f9f3 	udiv	r9, ip, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8002dd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8002dd8:	2f09      	cmp	r7, #9
 8002dda:	d81b      	bhi.n	8002e14 <_strtol_l.constprop.0+0xa8>
 8002ddc:	463c      	mov	r4, r7
 8002dde:	42a3      	cmp	r3, r4
 8002de0:	dd27      	ble.n	8002e32 <_strtol_l.constprop.0+0xc6>
 8002de2:	1c57      	adds	r7, r2, #1
 8002de4:	d007      	beq.n	8002df6 <_strtol_l.constprop.0+0x8a>
 8002de6:	4581      	cmp	r9, r0
 8002de8:	d320      	bcc.n	8002e2c <_strtol_l.constprop.0+0xc0>
 8002dea:	d101      	bne.n	8002df0 <_strtol_l.constprop.0+0x84>
 8002dec:	45a2      	cmp	sl, r4
 8002dee:	db1d      	blt.n	8002e2c <_strtol_l.constprop.0+0xc0>
 8002df0:	fb00 4003 	mla	r0, r0, r3, r4
 8002df4:	2201      	movs	r2, #1
 8002df6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002dfa:	e7eb      	b.n	8002dd4 <_strtol_l.constprop.0+0x68>
 8002dfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8002dfe:	bf04      	itt	eq
 8002e00:	782c      	ldrbeq	r4, [r5, #0]
 8002e02:	1c95      	addeq	r5, r2, #2
 8002e04:	e7cf      	b.n	8002da6 <_strtol_l.constprop.0+0x3a>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1da      	bne.n	8002dc0 <_strtol_l.constprop.0+0x54>
 8002e0a:	2c30      	cmp	r4, #48	@ 0x30
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2308      	moveq	r3, #8
 8002e10:	230a      	movne	r3, #10
 8002e12:	e7d5      	b.n	8002dc0 <_strtol_l.constprop.0+0x54>
 8002e14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002e18:	2f19      	cmp	r7, #25
 8002e1a:	d801      	bhi.n	8002e20 <_strtol_l.constprop.0+0xb4>
 8002e1c:	3c37      	subs	r4, #55	@ 0x37
 8002e1e:	e7de      	b.n	8002dde <_strtol_l.constprop.0+0x72>
 8002e20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002e24:	2f19      	cmp	r7, #25
 8002e26:	d804      	bhi.n	8002e32 <_strtol_l.constprop.0+0xc6>
 8002e28:	3c57      	subs	r4, #87	@ 0x57
 8002e2a:	e7d8      	b.n	8002dde <_strtol_l.constprop.0+0x72>
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	e7e1      	b.n	8002df6 <_strtol_l.constprop.0+0x8a>
 8002e32:	1c53      	adds	r3, r2, #1
 8002e34:	d108      	bne.n	8002e48 <_strtol_l.constprop.0+0xdc>
 8002e36:	2322      	movs	r3, #34	@ 0x22
 8002e38:	f8ce 3000 	str.w	r3, [lr]
 8002e3c:	4660      	mov	r0, ip
 8002e3e:	f1b8 0f00 	cmp.w	r8, #0
 8002e42:	d0a0      	beq.n	8002d86 <_strtol_l.constprop.0+0x1a>
 8002e44:	1e69      	subs	r1, r5, #1
 8002e46:	e006      	b.n	8002e56 <_strtol_l.constprop.0+0xea>
 8002e48:	b106      	cbz	r6, 8002e4c <_strtol_l.constprop.0+0xe0>
 8002e4a:	4240      	negs	r0, r0
 8002e4c:	f1b8 0f00 	cmp.w	r8, #0
 8002e50:	d099      	beq.n	8002d86 <_strtol_l.constprop.0+0x1a>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d1f6      	bne.n	8002e44 <_strtol_l.constprop.0+0xd8>
 8002e56:	f8c8 1000 	str.w	r1, [r8]
 8002e5a:	e794      	b.n	8002d86 <_strtol_l.constprop.0+0x1a>
 8002e5c:	08002f29 	.word	0x08002f29

08002e60 <strtol>:
 8002e60:	4613      	mov	r3, r2
 8002e62:	460a      	mov	r2, r1
 8002e64:	4601      	mov	r1, r0
 8002e66:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <strtol+0x10>)
 8002e68:	6800      	ldr	r0, [r0, #0]
 8002e6a:	f7ff bf7f 	b.w	8002d6c <_strtol_l.constprop.0>
 8002e6e:	bf00      	nop
 8002e70:	2000000c 	.word	0x2000000c

08002e74 <memset>:
 8002e74:	4402      	add	r2, r0
 8002e76:	4603      	mov	r3, r0
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <memset+0xa>
 8002e7c:	4770      	bx	lr
 8002e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e82:	e7f9      	b.n	8002e78 <memset+0x4>

08002e84 <__errno>:
 8002e84:	4b01      	ldr	r3, [pc, #4]	@ (8002e8c <__errno+0x8>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	2000000c 	.word	0x2000000c

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4d0d      	ldr	r5, [pc, #52]	@ (8002ec8 <__libc_init_array+0x38>)
 8002e94:	4c0d      	ldr	r4, [pc, #52]	@ (8002ecc <__libc_init_array+0x3c>)
 8002e96:	1b64      	subs	r4, r4, r5
 8002e98:	10a4      	asrs	r4, r4, #2
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed0 <__libc_init_array+0x40>)
 8002ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ed4 <__libc_init_array+0x44>)
 8002ea4:	f000 f818 	bl	8002ed8 <_init>
 8002ea8:	1b64      	subs	r4, r4, r5
 8002eaa:	10a4      	asrs	r4, r4, #2
 8002eac:	2600      	movs	r6, #0
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08003034 	.word	0x08003034
 8002ecc:	08003034 	.word	0x08003034
 8002ed0:	08003034 	.word	0x08003034
 8002ed4:	08003038 	.word	0x08003038

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
