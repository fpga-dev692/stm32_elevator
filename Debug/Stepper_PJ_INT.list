
Stepper_PJ_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003260  08003260  00004260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003298  08003298  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003298  08003298  00004298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032a0  080032a0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a0  080032a0  000042a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032a4  080032a4  000042a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080032a8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000005c  08003304  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003304  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb30  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b9  00000000  00000000  00011bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00013f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000901  00000000  00000000  00014b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176ee  00000000  00000000  00015431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f6a  00000000  00000000  0002cb1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dcfb  00000000  00000000  0003da89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb784  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eec  00000000  00000000  000cb7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000ce6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003248 	.word	0x08003248

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08003248 	.word	0x08003248

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <btnPress>:
			return false;
	}
	return false;
}

bool btnPress(uint8_t ch){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
    static bool btnState[_BTN_MAX_CH] = {false};  // 버튼 상태 저장 배열
    bool currentState;

    if(ch >= _BTN_MAX_CH){
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d901      	bls.n	80004dc <btnPress+0x14>
        return false;
 80004d8:	2300      	movs	r3, #0
 80004da:	e047      	b.n	800056c <btnPress+0xa4>
    }

    currentState = !HAL_GPIO_ReadPin(btn_tbl[ch].port, btn_tbl[ch].pinNumber);
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	4a25      	ldr	r2, [pc, #148]	@ (8000574 <btnPress+0xac>)
 80004e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	4923      	ldr	r1, [pc, #140]	@ (8000574 <btnPress+0xac>)
 80004e8:	00db      	lsls	r3, r3, #3
 80004ea:	440b      	add	r3, r1
 80004ec:	889b      	ldrh	r3, [r3, #4]
 80004ee:	4619      	mov	r1, r3
 80004f0:	4610      	mov	r0, r2
 80004f2:	f001 f893 	bl	800161c <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf0c      	ite	eq
 80004fc:	2301      	moveq	r3, #1
 80004fe:	2300      	movne	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]

    if(currentState && !btnState[ch]) {
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d026      	beq.n	8000556 <btnPress+0x8e>
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	4a1b      	ldr	r2, [pc, #108]	@ (8000578 <btnPress+0xb0>)
 800050c:	5cd3      	ldrb	r3, [r2, r3]
 800050e:	f083 0301 	eor.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d01e      	beq.n	8000556 <btnPress+0x8e>
        HAL_Delay(100);  // Debounce delay
 8000518:	2064      	movs	r0, #100	@ 0x64
 800051a:	f000 fd33 	bl	8000f84 <HAL_Delay>
        currentState = !HAL_GPIO_ReadPin(btn_tbl[ch].port, btn_tbl[ch].pinNumber);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <btnPress+0xac>)
 8000522:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4912      	ldr	r1, [pc, #72]	@ (8000574 <btnPress+0xac>)
 800052a:	00db      	lsls	r3, r3, #3
 800052c:	440b      	add	r3, r1
 800052e:	889b      	ldrh	r3, [r3, #4]
 8000530:	4619      	mov	r1, r3
 8000532:	4610      	mov	r0, r2
 8000534:	f001 f872 	bl	800161c <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
        if(currentState) {
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d00f      	beq.n	800056a <btnPress+0xa2>
            btnState[ch] = true;  // 버튼 상태 업데이트
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a0a      	ldr	r2, [pc, #40]	@ (8000578 <btnPress+0xb0>)
 800054e:	2101      	movs	r1, #1
 8000550:	54d1      	strb	r1, [r2, r3]
            return true;  // 버튼이 눌렸음을 반환
 8000552:	2301      	movs	r3, #1
 8000554:	e00a      	b.n	800056c <btnPress+0xa4>
        }
    } else if(!currentState) {
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	f083 0301 	eor.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d003      	beq.n	800056a <btnPress+0xa2>
        btnState[ch] = false;  // 버튼이 떼어졌음을 업데이트
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4a04      	ldr	r2, [pc, #16]	@ (8000578 <btnPress+0xb0>)
 8000566:	2100      	movs	r1, #0
 8000568:	54d1      	strb	r1, [r2, r3]
    }

    return false;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	20000078 	.word	0x20000078

0800057c <delay_us>:
 *      Author: Stardust
 */

#include "delay.h"

void delay_us(uint16_t us){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <delay_us+0x34>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2200      	movs	r2, #0
 800058c:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Base_Start(&htim10);
 800058e:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <delay_us+0x34>)
 8000590:	f001 fd76 	bl	8002080 <HAL_TIM_Base_Start>
	while(__HAL_TIM_GET_COUNTER(&htim10) < us);
 8000594:	bf00      	nop
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <delay_us+0x34>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800059c:	88fb      	ldrh	r3, [r7, #6]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d3f9      	bcc.n	8000596 <delay_us+0x1a>

	HAL_TIM_Base_Stop(&htim10);
 80005a2:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <delay_us+0x34>)
 80005a4:	f001 fdc6 	bl	8002134 <HAL_TIM_Base_Stop>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000080 	.word	0x20000080

080005b4 <wait>:

void wait(){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	ledOn(3);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f8d9 	bl	8000770 <ledOn>
	HAL_Delay(2000);
 80005be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005c2:	f000 fcdf 	bl	8000f84 <HAL_Delay>
	ledOff(3);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f000 f8ee 	bl	80007a8 <ledOff>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	4b5d      	ldr	r3, [pc, #372]	@ (8000760 <MX_GPIO_Init+0x190>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a5c      	ldr	r2, [pc, #368]	@ (8000760 <MX_GPIO_Init+0x190>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000760 <MX_GPIO_Init+0x190>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	4b56      	ldr	r3, [pc, #344]	@ (8000760 <MX_GPIO_Init+0x190>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a55      	ldr	r2, [pc, #340]	@ (8000760 <MX_GPIO_Init+0x190>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b53      	ldr	r3, [pc, #332]	@ (8000760 <MX_GPIO_Init+0x190>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	4b4f      	ldr	r3, [pc, #316]	@ (8000760 <MX_GPIO_Init+0x190>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a4e      	ldr	r2, [pc, #312]	@ (8000760 <MX_GPIO_Init+0x190>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b4c      	ldr	r3, [pc, #304]	@ (8000760 <MX_GPIO_Init+0x190>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	4b48      	ldr	r3, [pc, #288]	@ (8000760 <MX_GPIO_Init+0x190>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a47      	ldr	r2, [pc, #284]	@ (8000760 <MX_GPIO_Init+0x190>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b45      	ldr	r3, [pc, #276]	@ (8000760 <MX_GPIO_Init+0x190>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	21e0      	movs	r1, #224	@ 0xe0
 800065a:	4842      	ldr	r0, [pc, #264]	@ (8000764 <MX_GPIO_Init+0x194>)
 800065c:	f000 fff6 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8000666:	4840      	ldr	r0, [pc, #256]	@ (8000768 <MX_GPIO_Init+0x198>)
 8000668:	f000 fff0 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2140      	movs	r1, #64	@ 0x40
 8000670:	483e      	ldr	r0, [pc, #248]	@ (800076c <MX_GPIO_Init+0x19c>)
 8000672:	f000 ffeb 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000676:	23e0      	movs	r3, #224	@ 0xe0
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4835      	ldr	r0, [pc, #212]	@ (8000764 <MX_GPIO_Init+0x194>)
 800068e:	f000 fe41 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3;
 8000692:	f241 0308 	movw	r3, #4104	@ 0x1008
 8000696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000698:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	4619      	mov	r1, r3
 80006a8:	4830      	ldr	r0, [pc, #192]	@ (800076c <MX_GPIO_Init+0x19c>)
 80006aa:	f000 fe33 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006ae:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80006b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4829      	ldr	r0, [pc, #164]	@ (800076c <MX_GPIO_Init+0x19c>)
 80006c6:	f000 fe25 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80006ca:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4821      	ldr	r0, [pc, #132]	@ (8000768 <MX_GPIO_Init+0x198>)
 80006e4:	f000 fe16 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4819      	ldr	r0, [pc, #100]	@ (8000764 <MX_GPIO_Init+0x194>)
 80006fe:	f000 fe09 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000702:	2320      	movs	r3, #32
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <MX_GPIO_Init+0x19c>)
 8000716:	f000 fdfd 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800071a:	2340      	movs	r3, #64	@ 0x40
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	480e      	ldr	r0, [pc, #56]	@ (800076c <MX_GPIO_Init+0x19c>)
 8000732:	f000 fdef 	bl	8001314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2101      	movs	r1, #1
 800073a:	2009      	movs	r0, #9
 800073c:	f000 fd21 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000740:	2009      	movs	r0, #9
 8000742:	f000 fd3a 	bl	80011ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2101      	movs	r1, #1
 800074a:	2028      	movs	r0, #40	@ 0x28
 800074c:	f000 fd19 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000750:	2028      	movs	r0, #40	@ 0x28
 8000752:	f000 fd32 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	@ 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40020000 	.word	0x40020000
 8000768:	40020800 	.word	0x40020800
 800076c:	40020400 	.word	0x40020400

08000770 <ledOn>:
//						{GPIOA, GPIO_PIN_9, GPIO_PIN_SET, GPIO_PIN_RESET},
//						{GPIOA, GPIO_PIN_8, GPIO_PIN_SET, GPIO_PIN_RESET},
//						{GPIOB, GPIO_PIN_10, GPIO_PIN_SET, GPIO_PIN_RESET}
						};

void ledOn(uint8_t ch){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pinNumber, led_tbl[ch].on);
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a09      	ldr	r2, [pc, #36]	@ (80007a4 <ledOn+0x34>)
 800077e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <ledOn+0x34>)
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	4413      	add	r3, r2
 800078a:	8899      	ldrh	r1, [r3, #4]
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <ledOn+0x34>)
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4413      	add	r3, r2
 8000794:	799b      	ldrb	r3, [r3, #6]
 8000796:	461a      	mov	r2, r3
 8000798:	f000 ff58 	bl	800164c <HAL_GPIO_WritePin>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000018 	.word	0x20000018

080007a8 <ledOff>:

void ledOff(uint8_t ch){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pinNumber, led_tbl[ch].off);
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	4a09      	ldr	r2, [pc, #36]	@ (80007dc <ledOff+0x34>)
 80007b6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <ledOff+0x34>)
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	8899      	ldrh	r1, [r3, #4]
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <ledOff+0x34>)
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4413      	add	r3, r2
 80007cc:	79db      	ldrb	r3, [r3, #7]
 80007ce:	461a      	mov	r2, r3
 80007d0:	f000 ff3c 	bl	800164c <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000018 	.word	0x20000018

080007e0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_12){
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80007f0:	d11f      	bne.n	8000832 <HAL_GPIO_EXTI_Callback+0x52>
		HAL_Delay(100);
 80007f2:	2064      	movs	r0, #100	@ 0x64
 80007f4:	f000 fbc6 	bl	8000f84 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)){
 80007f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007fc:	4838      	ldr	r0, [pc, #224]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x100>)
 80007fe:	f000 ff0d 	bl	800161c <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d166      	bne.n	80008d6 <HAL_GPIO_EXTI_Callback+0xf6>
			restart = false;
 8000808:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x104>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, Message, sizeof(Message));
 800080e:	2214      	movs	r2, #20
 8000810:	4935      	ldr	r1, [pc, #212]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x108>)
 8000812:	4836      	ldr	r0, [pc, #216]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x10c>)
 8000814:	f001 fd92 	bl	800233c <HAL_UART_Transmit_IT>
			while(!restart){
 8000818:	e003      	b.n	8000822 <HAL_GPIO_EXTI_Callback+0x42>
				HAL_Delay(1000);
 800081a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081e:	f000 fbb1 	bl	8000f84 <HAL_Delay>
			while(!restart){
 8000822:	4b30      	ldr	r3, [pc, #192]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x104>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f4      	bne.n	800081a <HAL_GPIO_EXTI_Callback+0x3a>
			currentFloor = 2;
			wait();
		}

	}
}
 8000830:	e051      	b.n	80008d6 <HAL_GPIO_EXTI_Callback+0xf6>
	else if(GPIO_Pin == GPIO_PIN_15){
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000838:	d109      	bne.n	800084e <HAL_GPIO_EXTI_Callback+0x6e>
		ledOn(0); ledOff(1); ledOff(2);
 800083a:	2000      	movs	r0, #0
 800083c:	f7ff ff98 	bl	8000770 <ledOn>
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ffb1 	bl	80007a8 <ledOff>
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff ffae 	bl	80007a8 <ledOff>
}
 800084c:	e043      	b.n	80008d6 <HAL_GPIO_EXTI_Callback+0xf6>
	else if(GPIO_Pin == GPIO_PIN_14){
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000854:	d109      	bne.n	800086a <HAL_GPIO_EXTI_Callback+0x8a>
		ledOff(0); ledOn(1); ledOff(2);
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ffa6 	bl	80007a8 <ledOff>
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff ff87 	bl	8000770 <ledOn>
 8000862:	2002      	movs	r0, #2
 8000864:	f7ff ffa0 	bl	80007a8 <ledOff>
}
 8000868:	e035      	b.n	80008d6 <HAL_GPIO_EXTI_Callback+0xf6>
	else if(GPIO_Pin == GPIO_PIN_13){
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000870:	d109      	bne.n	8000886 <HAL_GPIO_EXTI_Callback+0xa6>
		ledOff(0); ledOff(1); ledOn(2);
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ff98 	bl	80007a8 <ledOff>
 8000878:	2001      	movs	r0, #1
 800087a:	f7ff ff95 	bl	80007a8 <ledOff>
 800087e:	2002      	movs	r0, #2
 8000880:	f7ff ff76 	bl	8000770 <ledOn>
}
 8000884:	e027      	b.n	80008d6 <HAL_GPIO_EXTI_Callback+0xf6>
	else if(GPIO_Pin == GPIO_PIN_3){
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	2b08      	cmp	r3, #8
 800088a:	d124      	bne.n	80008d6 <HAL_GPIO_EXTI_Callback+0xf6>
		HAL_Delay(100);
 800088c:	2064      	movs	r0, #100	@ 0x64
 800088e:	f000 fb79 	bl	8000f84 <HAL_Delay>
		if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 8000892:	2108      	movs	r1, #8
 8000894:	4812      	ldr	r0, [pc, #72]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x100>)
 8000896:	f000 fec1 	bl	800161c <HAL_GPIO_ReadPin>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d11a      	bne.n	80008d6 <HAL_GPIO_EXTI_Callback+0xf6>
			switch(currentFloor){
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x110>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d00b      	beq.n	80008c0 <HAL_GPIO_EXTI_Callback+0xe0>
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	dc0f      	bgt.n	80008cc <HAL_GPIO_EXTI_Callback+0xec>
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d001      	beq.n	80008b4 <HAL_GPIO_EXTI_Callback+0xd4>
 80008b0:	2b02      	cmp	r3, #2
					break;
 80008b2:	e00b      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xec>
					rotateSteps(4096, DIR_CCW);
 80008b4:	2101      	movs	r1, #1
 80008b6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80008ba:	f000 f93f 	bl	8000b3c <rotateSteps>
					break;
 80008be:	e005      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xec>
					rotateSteps(4096, DIR_CW);
 80008c0:	2100      	movs	r1, #0
 80008c2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80008c6:	f000 f939 	bl	8000b3c <rotateSteps>
					break;
 80008ca:	bf00      	nop
			currentFloor = 2;
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x110>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	701a      	strb	r2, [r3, #0]
			wait();
 80008d2:	f7ff fe6f 	bl	80005b4 <wait>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020400 	.word	0x40020400
 80008e4:	2000007c 	.word	0x2000007c
 80008e8:	20000038 	.word	0x20000038
 80008ec:	200000c8 	.word	0x200000c8
 80008f0:	2000004c 	.word	0x2000004c

080008f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a09      	ldr	r2, [pc, #36]	@ (8000928 <HAL_UART_RxCpltCallback+0x34>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10b      	bne.n	800091e <HAL_UART_RxCpltCallback+0x2a>
    	if(rxData == '1'){
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_UART_RxCpltCallback+0x38>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b31      	cmp	r3, #49	@ 0x31
 800090c:	d102      	bne.n	8000914 <HAL_UART_RxCpltCallback+0x20>
    		restart = true;
 800090e:	4b08      	ldr	r3, [pc, #32]	@ (8000930 <HAL_UART_RxCpltCallback+0x3c>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000914:	2201      	movs	r2, #1
 8000916:	4905      	ldr	r1, [pc, #20]	@ (800092c <HAL_UART_RxCpltCallback+0x38>)
 8000918:	4806      	ldr	r0, [pc, #24]	@ (8000934 <HAL_UART_RxCpltCallback+0x40>)
 800091a:	f001 fd45 	bl	80023a8 <HAL_UART_Receive_IT>
    }
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40004400 	.word	0x40004400
 800092c:	2000007b 	.word	0x2000007b
 8000930:	2000007c 	.word	0x2000007c
 8000934:	200000c8 	.word	0x200000c8

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093c:	f000 fab0 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000940:	f000 f858 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000944:	f7ff fe44 	bl	80005d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000948:	f000 fa06 	bl	8000d58 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800094c:	f000 f9be 	bl	8000ccc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000950:	2201      	movs	r2, #1
 8000952:	4925      	ldr	r1, [pc, #148]	@ (80009e8 <main+0xb0>)
 8000954:	4825      	ldr	r0, [pc, #148]	@ (80009ec <main+0xb4>)
 8000956:	f001 fd27 	bl	80023a8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // currentFloor3
	  if(btnPress(2)){
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff fdb4 	bl	80004c8 <btnPress>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d01c      	beq.n	80009a0 <main+0x68>
		  switch(currentFloor){
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <main+0xb8>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b03      	cmp	r3, #3
 800096c:	d012      	beq.n	8000994 <main+0x5c>
 800096e:	2b03      	cmp	r3, #3
 8000970:	dc11      	bgt.n	8000996 <main+0x5e>
 8000972:	2b01      	cmp	r3, #1
 8000974:	d002      	beq.n	800097c <main+0x44>
 8000976:	2b02      	cmp	r3, #2
 8000978:	d006      	beq.n	8000988 <main+0x50>
 800097a:	e00c      	b.n	8000996 <main+0x5e>
		  	  case 1:
//		  		  rotateDegrees(720, DIR_CCW);
		  		  rotateSteps(8192, DIR_CCW);
 800097c:	2101      	movs	r1, #1
 800097e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000982:	f000 f8db 	bl	8000b3c <rotateSteps>
		  		  break;
 8000986:	e006      	b.n	8000996 <main+0x5e>
		  	  case 2:
//		  		  rotateDegrees(360, DIR_CCW);
		  		  rotateSteps(4096, DIR_CCW);
 8000988:	2101      	movs	r1, #1
 800098a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800098e:	f000 f8d5 	bl	8000b3c <rotateSteps>
		  		  break;
 8000992:	e000      	b.n	8000996 <main+0x5e>
		  	  case 3:
		  		  break;
 8000994:	bf00      	nop
		  }
		  currentFloor = 3;
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <main+0xb8>)
 8000998:	2203      	movs	r2, #3
 800099a:	701a      	strb	r2, [r3, #0]
		  wait();
 800099c:	f7ff fe0a 	bl	80005b4 <wait>
// 		  		  break;
//		  }
//		  currentFloor = 2;
//	  }
	  // currentFloor1
	  if(btnPress(0)){
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fd91 	bl	80004c8 <btnPress>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0d6      	beq.n	800095a <main+0x22>
		  switch(currentFloor){
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <main+0xb8>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d00b      	beq.n	80009cc <main+0x94>
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	dc10      	bgt.n	80009da <main+0xa2>
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d00d      	beq.n	80009d8 <main+0xa0>
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d10c      	bne.n	80009da <main+0xa2>
		  	  case 1:
	  	  		  break;
	  	  	  case 2:
//	  	  		  rotateDegrees(360, DIR_CW);
	  	  		  rotateSteps(4096, DIR_CW);
 80009c0:	2100      	movs	r1, #0
 80009c2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80009c6:	f000 f8b9 	bl	8000b3c <rotateSteps>
	  	  		  break;
 80009ca:	e006      	b.n	80009da <main+0xa2>
	  	  	  case 3:
//	  	 		  rotateDegrees(720, DIR_CW);
	  	  		  rotateSteps(8192, DIR_CW);
 80009cc:	2100      	movs	r1, #0
 80009ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009d2:	f000 f8b3 	bl	8000b3c <rotateSteps>
	   		  	  break;
 80009d6:	e000      	b.n	80009da <main+0xa2>
	  	  		  break;
 80009d8:	bf00      	nop
	  	  }
		  currentFloor = 1;
 80009da:	4b05      	ldr	r3, [pc, #20]	@ (80009f0 <main+0xb8>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
		  wait();
 80009e0:	f7ff fde8 	bl	80005b4 <wait>
	  if(btnPress(2)){
 80009e4:	e7b9      	b.n	800095a <main+0x22>
 80009e6:	bf00      	nop
 80009e8:	2000007b 	.word	0x2000007b
 80009ec:	200000c8 	.word	0x200000c8
 80009f0:	2000004c 	.word	0x2000004c

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2230      	movs	r2, #48	@ 0x30
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fbf4 	bl	80031f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	4b27      	ldr	r3, [pc, #156]	@ (8000abc <SystemClock_Config+0xc8>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	4a26      	ldr	r2, [pc, #152]	@ (8000abc <SystemClock_Config+0xc8>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <SystemClock_Config+0xc8>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <SystemClock_Config+0xcc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a20      	ldr	r2, [pc, #128]	@ (8000ac0 <SystemClock_Config+0xcc>)
 8000a3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <SystemClock_Config+0xcc>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a64:	2304      	movs	r3, #4
 8000a66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a68:	2364      	movs	r3, #100	@ 0x64
 8000a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f107 0320 	add.w	r3, r7, #32
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f000 fe19 	bl	80016b0 <HAL_RCC_OscConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a84:	f000 f81e 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a88:	230f      	movs	r3, #15
 8000a8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f87b 	bl	8001ba0 <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ab0:	f000 f808 	bl	8000ac4 <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	@ 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <stepMotor>:

#include "stepper.h"

uint16_t count = 0;

void stepMotor(uint8_t step){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_Port, IN1_Pin, HALF_STEP_SEQ[step][0]);
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4a15      	ldr	r2, [pc, #84]	@ (8000b34 <stepMotor+0x64>)
 8000ade:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae8:	4813      	ldr	r0, [pc, #76]	@ (8000b38 <stepMotor+0x68>)
 8000aea:	f000 fdaf 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_Port, IN2_Pin, HALF_STEP_SEQ[step][1]);
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <stepMotor+0x64>)
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	461a      	mov	r2, r3
 8000afa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afe:	480e      	ldr	r0, [pc, #56]	@ (8000b38 <stepMotor+0x68>)
 8000b00:	f000 fda4 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_Port, IN3_Pin, HALF_STEP_SEQ[step][2]);
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a0b      	ldr	r2, [pc, #44]	@ (8000b34 <stepMotor+0x64>)
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	789b      	ldrb	r3, [r3, #2]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	2140      	movs	r1, #64	@ 0x40
 8000b12:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <stepMotor+0x68>)
 8000b14:	f000 fd9a 	bl	800164c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_Port, IN4_Pin, HALF_STEP_SEQ[step][3]);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <stepMotor+0x64>)
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	4413      	add	r3, r2
 8000b20:	78db      	ldrb	r3, [r3, #3]
 8000b22:	461a      	mov	r2, r3
 8000b24:	2120      	movs	r1, #32
 8000b26:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <stepMotor+0x68>)
 8000b28:	f000 fd90 	bl	800164c <HAL_GPIO_WritePin>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08003260 	.word	0x08003260
 8000b38:	40020800 	.word	0x40020800

08000b3c <rotateSteps>:
void rotateSteps(uint16_t steps, uint8_t direction){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	460a      	mov	r2, r1
 8000b46:	80fb      	strh	r3, [r7, #6]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	717b      	strb	r3, [r7, #5]
	for(uint16_t i=0; i<steps; i++){
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	81fb      	strh	r3, [r7, #14]
 8000b50:	e020      	b.n	8000b94 <rotateSteps+0x58>
		uint8_t step;
		// 회전 방향에 맞춰서 스텝 패턴 설정
		if(direction == DIR_CW){
 8000b52:	797b      	ldrb	r3, [r7, #5]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d105      	bne.n	8000b64 <rotateSteps+0x28>
			step = i % 8;
 8000b58:	89fb      	ldrh	r3, [r7, #14]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	737b      	strb	r3, [r7, #13]
 8000b62:	e006      	b.n	8000b72 <rotateSteps+0x36>
		}
		else{
			step = 7 - (i % 8);
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f003 0307 	and.w	r3, r3, #7
 8000b70:	737b      	strb	r3, [r7, #13]
		}
		stepMotor(step);
 8000b72:	7b7b      	ldrb	r3, [r7, #13]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffab 	bl	8000ad0 <stepMotor>
		count++;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <rotateSteps+0x70>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <rotateSteps+0x70>)
 8000b84:	801a      	strh	r2, [r3, #0]
		delay_us(1000);	// 각 스텝간의 지연
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f7ff fcf7 	bl	800057c <delay_us>
	for(uint16_t i=0; i<steps; i++){
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	3301      	adds	r3, #1
 8000b92:	81fb      	strh	r3, [r7, #14]
 8000b94:	89fa      	ldrh	r2, [r7, #14]
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d3da      	bcc.n	8000b52 <rotateSteps+0x16>
	}
	count = 0;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <rotateSteps+0x70>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	801a      	strh	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000007e 	.word	0x2000007e

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000bee:	2006      	movs	r0, #6
 8000bf0:	f000 fabc 	bl	800116c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f975 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c62:	2008      	movs	r0, #8
 8000c64:	f000 fd0c 	bl	8001680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <USART2_IRQHandler+0x10>)
 8000c72:	f001 fbbf 	bl	80023f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000c8 	.word	0x200000c8

08000c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000c88:	f000 fcfa 	bl	8001680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c90:	f000 fcf6 	bl	8001680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c94:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c98:	f000 fcf2 	bl	8001680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c9c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ca0:	f000 fcee 	bl	8001680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SystemInit>:
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <MX_TIM10_Init>:
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_TIM10_Init+0x40>)
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <MX_TIM10_Init+0x44>)
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <MX_TIM10_Init+0x40>)
 8000cd8:	2263      	movs	r2, #99	@ 0x63
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_TIM10_Init+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8000d0c <MX_TIM10_Init+0x40>)
 8000ce4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_TIM10_Init+0x40>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_TIM10_Init+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_TIM10_Init+0x40>)
 8000cf8:	f001 f972 	bl	8001fe0 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM10_Init+0x3a>
 8000d02:	f7ff fedf 	bl	8000ac4 <Error_Handler>
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000080 	.word	0x20000080
 8000d10:	40014400 	.word	0x40014400

08000d14 <HAL_TIM_Base_MspInit>:
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0b      	ldr	r2, [pc, #44]	@ (8000d50 <HAL_TIM_Base_MspInit+0x3c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d10d      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x2e>
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <HAL_TIM_Base_MspInit+0x40>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a09      	ldr	r2, [pc, #36]	@ (8000d54 <HAL_TIM_Base_MspInit+0x40>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <HAL_TIM_Base_MspInit+0x40>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40014400 	.word	0x40014400
 8000d54:	40023800 	.word	0x40023800

08000d58 <MX_USART2_UART_Init>:
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <MX_USART2_UART_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f001 fa84 	bl	800229c <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART2_UART_Init+0x46>
 8000d9a:	f7ff fe93 	bl	8000ac4 <Error_Handler>
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000c8 	.word	0x200000c8
 8000da8:	40004400 	.word	0x40004400

08000dac <HAL_UART_MspInit>:
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <HAL_UART_MspInit+0x94>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d133      	bne.n	8000e36 <HAL_UART_MspInit+0x8a>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <HAL_UART_MspInit+0x98>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <HAL_UART_MspInit+0x98>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <HAL_UART_MspInit+0x98>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_UART_MspInit+0x98>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <HAL_UART_MspInit+0x98>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_UART_MspInit+0x98>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	230c      	movs	r3, #12
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
 8000e16:	2307      	movs	r3, #7
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <HAL_UART_MspInit+0x9c>)
 8000e22:	f000 fa77 	bl	8001314 <HAL_GPIO_Init>
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2026      	movs	r0, #38	@ 0x26
 8000e2c:	f000 f9a9 	bl	8001182 <HAL_NVIC_SetPriority>
 8000e30:	2026      	movs	r0, #38	@ 0x26
 8000e32:	f000 f9c2 	bl	80011ba <HAL_NVIC_EnableIRQ>
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	@ 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e50:	f7ff ff2a 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	@ (8000e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	@ (8000e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f002 f9c1 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fd5b 	bl	8000938 <main>
  bx  lr    
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e90:	080032a8 	.word	0x080032a8
  ldr r2, =_sbss
 8000e94:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e98:	20000114 	.word	0x20000114

08000e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <HAL_Init+0x40>)
 8000eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <HAL_Init+0x40>)
 8000eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <HAL_Init+0x40>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f94f 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fe6c 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f967 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f92f 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000050 	.word	0x20000050
 8000f3c:	20000058 	.word	0x20000058
 8000f40:	20000054 	.word	0x20000054

08000f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x20>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <HAL_IncTick+0x24>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000058 	.word	0x20000058
 8000f68:	20000110 	.word	0x20000110

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000110 	.word	0x20000110

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff ffee 	bl	8000f6c <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffde 	bl	8000f6c <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000058 	.word	0x20000058

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	@ (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	@ (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	@ (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	@ 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	@ 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	@ (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff feb6 	bl	8000f6c <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d008      	beq.n	8001220 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2280      	movs	r2, #128	@ 0x80
 8001212:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e052      	b.n	80012c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0216 	bic.w	r2, r2, #22
 800122e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800123e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <HAL_DMA_Abort+0x62>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800124c:	2b00      	cmp	r3, #0
 800124e:	d007      	beq.n	8001260 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0208 	bic.w	r2, r2, #8
 800125e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001270:	e013      	b.n	800129a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001272:	f7ff fe7b 	bl	8000f6c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b05      	cmp	r3, #5
 800127e:	d90c      	bls.n	800129a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e015      	b.n	80012c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e4      	bne.n	8001272 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ac:	223f      	movs	r2, #63	@ 0x3f
 80012ae:	409a      	lsls	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d004      	beq.n	80012ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2280      	movs	r2, #128	@ 0x80
 80012e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e00c      	b.n	8001306 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2205      	movs	r2, #5
 80012f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e159      	b.n	80015e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	f040 8148 	bne.w	80015de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d005      	beq.n	8001366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001362:	2b02      	cmp	r3, #2
 8001364:	d130      	bne.n	80013c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	69b9      	ldr	r1, [r7, #24]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a2 	beq.w	80015de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <HAL_GPIO_Init+0x2e8>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	4a56      	ldr	r2, [pc, #344]	@ (80015fc <HAL_GPIO_Init+0x2e8>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014aa:	4b54      	ldr	r3, [pc, #336]	@ (80015fc <HAL_GPIO_Init+0x2e8>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b6:	4a52      	ldr	r2, [pc, #328]	@ (8001600 <HAL_GPIO_Init+0x2ec>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a49      	ldr	r2, [pc, #292]	@ (8001604 <HAL_GPIO_Init+0x2f0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x202>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a48      	ldr	r2, [pc, #288]	@ (8001608 <HAL_GPIO_Init+0x2f4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x1fe>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a47      	ldr	r2, [pc, #284]	@ (800160c <HAL_GPIO_Init+0x2f8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x1fa>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a46      	ldr	r2, [pc, #280]	@ (8001610 <HAL_GPIO_Init+0x2fc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x1f6>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a45      	ldr	r2, [pc, #276]	@ (8001614 <HAL_GPIO_Init+0x300>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x1f2>
 8001502:	2304      	movs	r3, #4
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001506:	2307      	movs	r3, #7
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x204>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x204>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001516:	2300      	movs	r3, #0
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001528:	4935      	ldr	r1, [pc, #212]	@ (8001600 <HAL_GPIO_Init+0x2ec>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b38      	ldr	r3, [pc, #224]	@ (8001618 <HAL_GPIO_Init+0x304>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155a:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <HAL_GPIO_Init+0x304>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <HAL_GPIO_Init+0x304>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001584:	4a24      	ldr	r2, [pc, #144]	@ (8001618 <HAL_GPIO_Init+0x304>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800158a:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <HAL_GPIO_Init+0x304>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001618 <HAL_GPIO_Init+0x304>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015b4:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <HAL_GPIO_Init+0x304>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <HAL_GPIO_Init+0x304>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	f67f aea2 	bls.w	8001330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40013800 	.word	0x40013800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691a      	ldr	r2, [r3, #16]
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e001      	b.n	800163e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001668:	e003      	b.n	8001672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166a:	887b      	ldrh	r3, [r7, #2]
 800166c:	041a      	lsls	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	619a      	str	r2, [r3, #24]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001696:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f89e 	bl	80007e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40013c00 	.word	0x40013c00

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e267      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d075      	beq.n	80017ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ce:	4b88      	ldr	r3, [pc, #544]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d00c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016da:	4b85      	ldr	r3, [pc, #532]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d112      	bne.n	800170c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016e6:	4b82      	ldr	r3, [pc, #520]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016f2:	d10b      	bne.n	800170c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	4b7e      	ldr	r3, [pc, #504]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d05b      	beq.n	80017b8 <HAL_RCC_OscConfig+0x108>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d157      	bne.n	80017b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e242      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001714:	d106      	bne.n	8001724 <HAL_RCC_OscConfig+0x74>
 8001716:	4b76      	ldr	r3, [pc, #472]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a75      	ldr	r2, [pc, #468]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e01d      	b.n	8001760 <HAL_RCC_OscConfig+0xb0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x98>
 800172e:	4b70      	ldr	r3, [pc, #448]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6f      	ldr	r2, [pc, #444]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	4b6d      	ldr	r3, [pc, #436]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6c      	ldr	r2, [pc, #432]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0xb0>
 8001748:	4b69      	ldr	r3, [pc, #420]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a68      	ldr	r2, [pc, #416]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b66      	ldr	r3, [pc, #408]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a65      	ldr	r2, [pc, #404]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 800175a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d013      	beq.n	8001790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001768:	f7ff fc00 	bl	8000f6c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fbfc 	bl	8000f6c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	@ 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e207      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b5b      	ldr	r3, [pc, #364]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0xc0>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fbec 	bl	8000f6c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fbe8 	bl	8000f6c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1f3      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	4b51      	ldr	r3, [pc, #324]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0xe8>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d063      	beq.n	800188e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c6:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d2:	4b47      	ldr	r3, [pc, #284]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d11c      	bne.n	8001818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017de:	4b44      	ldr	r3, [pc, #272]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d116      	bne.n	8001818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_RCC_OscConfig+0x152>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e1c7      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4937      	ldr	r1, [pc, #220]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	e03a      	b.n	800188e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001820:	4b34      	ldr	r3, [pc, #208]	@ (80018f4 <HAL_RCC_OscConfig+0x244>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff fba1 	bl	8000f6c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fb9d 	bl	8000f6c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1a8      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4925      	ldr	r1, [pc, #148]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e015      	b.n	800188e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001862:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <HAL_RCC_OscConfig+0x244>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fb80 	bl	8000f6c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff fb7c 	bl	8000f6c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e187      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d036      	beq.n	8001908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d016      	beq.n	80018d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_RCC_OscConfig+0x248>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fb60 	bl	8000f6c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff fb5c 	bl	8000f6c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e167      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_RCC_OscConfig+0x240>)
 80018c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x200>
 80018ce:	e01b      	b.n	8001908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_RCC_OscConfig+0x248>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fb49 	bl	8000f6c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018dc:	e00e      	b.n	80018fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018de:	f7ff fb45 	bl	8000f6c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d907      	bls.n	80018fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e150      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
 80018f0:	40023800 	.word	0x40023800
 80018f4:	42470000 	.word	0x42470000
 80018f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b88      	ldr	r3, [pc, #544]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80018fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ea      	bne.n	80018de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 8097 	beq.w	8001a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b81      	ldr	r3, [pc, #516]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	@ 0x40
 8001936:	4b7a      	ldr	r3, [pc, #488]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001942:	2301      	movs	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001946:	4b77      	ldr	r3, [pc, #476]	@ (8001b24 <HAL_RCC_OscConfig+0x474>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194e:	2b00      	cmp	r3, #0
 8001950:	d118      	bne.n	8001984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001952:	4b74      	ldr	r3, [pc, #464]	@ (8001b24 <HAL_RCC_OscConfig+0x474>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a73      	ldr	r2, [pc, #460]	@ (8001b24 <HAL_RCC_OscConfig+0x474>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800195c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195e:	f7ff fb05 	bl	8000f6c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001966:	f7ff fb01 	bl	8000f6c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e10c      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	4b6a      	ldr	r3, [pc, #424]	@ (8001b24 <HAL_RCC_OscConfig+0x474>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d106      	bne.n	800199a <HAL_RCC_OscConfig+0x2ea>
 800198c:	4b64      	ldr	r3, [pc, #400]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001990:	4a63      	ldr	r2, [pc, #396]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	@ 0x70
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x324>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x30c>
 80019a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0x324>
 80019bc:	4b58      	ldr	r3, [pc, #352]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c0:	4a57      	ldr	r2, [pc, #348]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019c8:	4b55      	ldr	r3, [pc, #340]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019cc:	4a54      	ldr	r2, [pc, #336]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019ce:	f023 0304 	bic.w	r3, r3, #4
 80019d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d015      	beq.n	8001a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff fac6 	bl	8000f6c <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff fac2 	bl	8000f6c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0cb      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	4b49      	ldr	r3, [pc, #292]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0ee      	beq.n	80019e4 <HAL_RCC_OscConfig+0x334>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff fab0 	bl	8000f6c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff faac 	bl	8000f6c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0b5      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a26:	4b3e      	ldr	r3, [pc, #248]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ee      	bne.n	8001a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4b39      	ldr	r3, [pc, #228]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	4a38      	ldr	r2, [pc, #224]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a1 	beq.w	8001b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d05c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d141      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <HAL_RCC_OscConfig+0x478>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa80 	bl	8000f6c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff fa7c 	bl	8000f6c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e087      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	061b      	lsls	r3, r3, #24
 8001ab2:	491b      	ldr	r1, [pc, #108]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <HAL_RCC_OscConfig+0x478>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fa55 	bl	8000f6c <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac6:	f7ff fa51 	bl	8000f6c <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e05c      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad8:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x416>
 8001ae4:	e054      	b.n	8001b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_RCC_OscConfig+0x478>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fa3e 	bl	8000f6c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff fa3a 	bl	8000f6c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e045      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_RCC_OscConfig+0x470>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x444>
 8001b12:	e03d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e038      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000
 8001b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <HAL_RCC_OscConfig+0x4ec>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d028      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d121      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d11a      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d111      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	3b01      	subs	r3, #1
 8001b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d107      	bne.n	8001b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3718      	adds	r7, #24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0cc      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b68      	ldr	r3, [pc, #416]	@ (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d90c      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b65      	ldr	r3, [pc, #404]	@ (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b63      	ldr	r3, [pc, #396]	@ (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0b8      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d020      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf4:	4b59      	ldr	r3, [pc, #356]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c0c:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4a52      	ldr	r2, [pc, #328]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c18:	4b50      	ldr	r3, [pc, #320]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	494d      	ldr	r1, [pc, #308]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d044      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d119      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e067      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b37      	ldr	r3, [pc, #220]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4934      	ldr	r1, [pc, #208]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f96c 	bl	8000f6c <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f968 	bl	8000f6c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e04f      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2b      	ldr	r3, [pc, #172]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d20c      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b20      	ldr	r3, [pc, #128]	@ (8001d58 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e032      	b.n	8001d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4916      	ldr	r1, [pc, #88]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	490e      	ldr	r1, [pc, #56]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d26:	f000 f821 	bl	8001d6c <HAL_RCC_GetSysClockFreq>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	490a      	ldr	r1, [pc, #40]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	5ccb      	ldrb	r3, [r1, r3]
 8001d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3e:	4a09      	ldr	r2, [pc, #36]	@ (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f8cc 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	08003280 	.word	0x08003280
 8001d64:	20000050 	.word	0x20000050
 8001d68:	20000054 	.word	0x20000054

08001d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d70:	b094      	sub	sp, #80	@ 0x50
 8001d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d78:	2300      	movs	r3, #0
 8001d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d84:	4b79      	ldr	r3, [pc, #484]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d00d      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x40>
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	f200 80e1 	bhi.w	8001f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x34>
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d9e:	e0db      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b73      	ldr	r3, [pc, #460]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001da2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001da4:	e0db      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da6:	4b73      	ldr	r3, [pc, #460]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001da8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001daa:	e0d8      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dac:	4b6f      	ldr	r3, [pc, #444]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001db4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d063      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	099b      	lsrs	r3, r3, #6
 8001dc8:	2200      	movs	r2, #0
 8001dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001dcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dde:	4622      	mov	r2, r4
 8001de0:	462b      	mov	r3, r5
 8001de2:	f04f 0000 	mov.w	r0, #0
 8001de6:	f04f 0100 	mov.w	r1, #0
 8001dea:	0159      	lsls	r1, r3, #5
 8001dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df0:	0150      	lsls	r0, r2, #5
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4621      	mov	r1, r4
 8001df8:	1a51      	subs	r1, r2, r1
 8001dfa:	6139      	str	r1, [r7, #16]
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e10:	4659      	mov	r1, fp
 8001e12:	018b      	lsls	r3, r1, #6
 8001e14:	4651      	mov	r1, sl
 8001e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e1a:	4651      	mov	r1, sl
 8001e1c:	018a      	lsls	r2, r1, #6
 8001e1e:	4651      	mov	r1, sl
 8001e20:	ebb2 0801 	subs.w	r8, r2, r1
 8001e24:	4659      	mov	r1, fp
 8001e26:	eb63 0901 	sbc.w	r9, r3, r1
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e3e:	4690      	mov	r8, r2
 8001e40:	4699      	mov	r9, r3
 8001e42:	4623      	mov	r3, r4
 8001e44:	eb18 0303 	adds.w	r3, r8, r3
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	462b      	mov	r3, r5
 8001e4c:	eb49 0303 	adc.w	r3, r9, r3
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e5e:	4629      	mov	r1, r5
 8001e60:	024b      	lsls	r3, r1, #9
 8001e62:	4621      	mov	r1, r4
 8001e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e68:	4621      	mov	r1, r4
 8001e6a:	024a      	lsls	r2, r1, #9
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e72:	2200      	movs	r2, #0
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e7c:	f7fe f9ac 	bl	80001d8 <__aeabi_uldivmod>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4613      	mov	r3, r2
 8001e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e88:	e058      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8a:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	2200      	movs	r2, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	4611      	mov	r1, r2
 8001e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ea4:	4642      	mov	r2, r8
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	f04f 0000 	mov.w	r0, #0
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	0159      	lsls	r1, r3, #5
 8001eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb6:	0150      	lsls	r0, r2, #5
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4641      	mov	r1, r8
 8001ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ec2:	4649      	mov	r1, r9
 8001ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001edc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	00eb      	lsls	r3, r5, #3
 8001eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ef2:	00e2      	lsls	r2, r4, #3
 8001ef4:	4614      	mov	r4, r2
 8001ef6:	461d      	mov	r5, r3
 8001ef8:	4643      	mov	r3, r8
 8001efa:	18e3      	adds	r3, r4, r3
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	464b      	mov	r3, r9
 8001f00:	eb45 0303 	adc.w	r3, r5, r3
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f12:	4629      	mov	r1, r5
 8001f14:	028b      	lsls	r3, r1, #10
 8001f16:	4621      	mov	r1, r4
 8001f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	028a      	lsls	r2, r1, #10
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f26:	2200      	movs	r2, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	61fa      	str	r2, [r7, #28]
 8001f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f30:	f7fe f952 	bl	80001d8 <__aeabi_uldivmod>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4613      	mov	r3, r2
 8001f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001f4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3750      	adds	r7, #80	@ 0x50
 8001f64:	46bd      	mov	sp, r7
 8001f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000050 	.word	0x20000050

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a9b      	lsrs	r3, r3, #10
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	@ (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08003290 	.word	0x08003290

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fbc:	f7ff ffdc 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0b5b      	lsrs	r3, r3, #13
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	@ (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	08003290 	.word	0x08003290

08001fe0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e041      	b.n	8002076 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fe84 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3304      	adds	r3, #4
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 f8b0 	bl	8002184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d001      	beq.n	8002098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e03c      	b.n	8002112 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2202      	movs	r2, #2
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002120 <HAL_TIM_Base_Start+0xa0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d018      	beq.n	80020dc <HAL_TIM_Base_Start+0x5c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b2:	d013      	beq.n	80020dc <HAL_TIM_Base_Start+0x5c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002124 <HAL_TIM_Base_Start+0xa4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00e      	beq.n	80020dc <HAL_TIM_Base_Start+0x5c>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a19      	ldr	r2, [pc, #100]	@ (8002128 <HAL_TIM_Base_Start+0xa8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d009      	beq.n	80020dc <HAL_TIM_Base_Start+0x5c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a17      	ldr	r2, [pc, #92]	@ (800212c <HAL_TIM_Base_Start+0xac>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <HAL_TIM_Base_Start+0x5c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a16      	ldr	r2, [pc, #88]	@ (8002130 <HAL_TIM_Base_Start+0xb0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d010      	beq.n	8002110 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fe:	e007      	b.n	8002110 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40014000 	.word	0x40014000

08002134 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a1a      	ldr	r2, [r3, #32]
 8002142:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10f      	bne.n	800216c <HAL_TIM_Base_Stop+0x38>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6a1a      	ldr	r2, [r3, #32]
 8002152:	f240 4344 	movw	r3, #1092	@ 0x444
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_TIM_Base_Stop+0x38>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a3a      	ldr	r2, [pc, #232]	@ (8002280 <TIM_Base_SetConfig+0xfc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00f      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a2:	d00b      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a37      	ldr	r2, [pc, #220]	@ (8002284 <TIM_Base_SetConfig+0x100>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a36      	ldr	r2, [pc, #216]	@ (8002288 <TIM_Base_SetConfig+0x104>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d003      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a35      	ldr	r2, [pc, #212]	@ (800228c <TIM_Base_SetConfig+0x108>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d108      	bne.n	80021ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002280 <TIM_Base_SetConfig+0xfc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01b      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021dc:	d017      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a28      	ldr	r2, [pc, #160]	@ (8002284 <TIM_Base_SetConfig+0x100>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a27      	ldr	r2, [pc, #156]	@ (8002288 <TIM_Base_SetConfig+0x104>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00f      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a26      	ldr	r2, [pc, #152]	@ (800228c <TIM_Base_SetConfig+0x108>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00b      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a25      	ldr	r2, [pc, #148]	@ (8002290 <TIM_Base_SetConfig+0x10c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a24      	ldr	r2, [pc, #144]	@ (8002294 <TIM_Base_SetConfig+0x110>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a23      	ldr	r2, [pc, #140]	@ (8002298 <TIM_Base_SetConfig+0x114>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d108      	bne.n	8002220 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a0e      	ldr	r2, [pc, #56]	@ (8002280 <TIM_Base_SetConfig+0xfc>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f023 0201 	bic.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
  }
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800
 800228c:	40000c00 	.word	0x40000c00
 8002290:	40014000 	.word	0x40014000
 8002294:	40014400 	.word	0x40014400
 8002298:	40014800 	.word	0x40014800

0800229c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e042      	b.n	8002334 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fd72 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	@ 0x24
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fd11 	bl	8002d08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d121      	bne.n	800239a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_UART_Transmit_IT+0x26>
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e01a      	b.n	800239c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2221      	movs	r2, #33	@ 0x21
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002394:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
  }
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d112      	bne.n	80023e8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_UART_Receive_IT+0x26>
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00b      	b.n	80023ea <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	461a      	mov	r2, r3
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 faba 	bl	8002958 <UART_Start_Receive_IT>
 80023e4:	4603      	mov	r3, r0
 80023e6:	e000      	b.n	80023ea <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b0ba      	sub	sp, #232	@ 0xe8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_UART_IRQHandler+0x66>
 8002446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fb99 	bl	8002b8a <UART_Receive_IT>
      return;
 8002458:	e25b      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800245a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80de 	beq.w	8002620 <HAL_UART_IRQHandler+0x22c>
 8002464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002474:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80d1 	beq.w	8002620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800247e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_UART_IRQHandler+0xae>
 800248a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	f043 0201 	orr.w	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_UART_IRQHandler+0xd2>
 80024ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f043 0202 	orr.w	r2, r3, #2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_UART_IRQHandler+0xf6>
 80024d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d011      	beq.n	800251a <HAL_UART_IRQHandler+0x126>
 80024f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f043 0208 	orr.w	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 81f2 	beq.w	8002908 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_UART_IRQHandler+0x14e>
 8002530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fb24 	bl	8002b8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <HAL_UART_IRQHandler+0x17a>
 8002566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d04f      	beq.n	800260e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa2c 	bl	80029cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257e:	2b40      	cmp	r3, #64	@ 0x40
 8002580:	d141      	bne.n	8002606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3314      	adds	r3, #20
 8002588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002590:	e853 3f00 	ldrex	r3, [r3]
 8002594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800259c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025be:	e841 2300 	strex	r3, r2, [r1]
 80025c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1d9      	bne.n	8002582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d013      	beq.n	80025fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	4a7e      	ldr	r2, [pc, #504]	@ (80027d4 <HAL_UART_IRQHandler+0x3e0>)
 80025dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fe73 	bl	80012ce <HAL_DMA_Abort_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025f8:	4610      	mov	r0, r2
 80025fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	e00e      	b.n	800261c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f994 	bl	800292c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	e00a      	b.n	800261c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f990 	bl	800292c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	e006      	b.n	800261c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f98c 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800261a:	e175      	b.n	8002908 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800261c:	bf00      	nop
    return;
 800261e:	e173      	b.n	8002908 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	2b01      	cmp	r3, #1
 8002626:	f040 814f 	bne.w	80028c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800262a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8148 	beq.w	80028c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8141 	beq.w	80028c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002666:	2b40      	cmp	r3, #64	@ 0x40
 8002668:	f040 80b6 	bne.w	80027d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8145 	beq.w	800290c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800268a:	429a      	cmp	r2, r3
 800268c:	f080 813e 	bcs.w	800290c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002696:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026a2:	f000 8088 	beq.w	80027b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	330c      	adds	r3, #12
 80026ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026b4:	e853 3f00 	ldrex	r3, [r3]
 80026b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	330c      	adds	r3, #12
 80026ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026e2:	e841 2300 	strex	r3, r2, [r1]
 80026e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80026ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1d9      	bne.n	80026a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3314      	adds	r3, #20
 80026f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026fc:	e853 3f00 	ldrex	r3, [r3]
 8002700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3314      	adds	r3, #20
 8002712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800271a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800271e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e1      	bne.n	80026f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3314      	adds	r3, #20
 8002734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800273e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e3      	bne.n	800272e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800277e:	e853 3f00 	ldrex	r3, [r3]
 8002782:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002786:	f023 0310 	bic.w	r3, r3, #16
 800278a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	330c      	adds	r3, #12
 8002794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002798:	65ba      	str	r2, [r7, #88]	@ 0x58
 800279a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800279e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e3      	bne.n	8002774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fd1c 	bl	80011ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4619      	mov	r1, r3
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f8b7 	bl	8002940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027d2:	e09b      	b.n	800290c <HAL_UART_IRQHandler+0x518>
 80027d4:	08002a93 	.word	0x08002a93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 808e 	beq.w	8002910 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8089 	beq.w	8002910 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002808:	e853 3f00 	ldrex	r3, [r3]
 800280c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800280e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002810:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002814:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002822:	647a      	str	r2, [r7, #68]	@ 0x44
 8002824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002828:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e3      	bne.n	80027fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	623b      	str	r3, [r7, #32]
   return(result);
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3314      	adds	r3, #20
 8002856:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800285a:	633a      	str	r2, [r7, #48]	@ 0x30
 800285c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e3      	bne.n	8002836 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	e853 3f00 	ldrex	r3, [r3]
 800288a:	60fb      	str	r3, [r7, #12]
   return(result);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0310 	bic.w	r3, r3, #16
 8002892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	330c      	adds	r3, #12
 800289c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028a0:	61fa      	str	r2, [r7, #28]
 80028a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	69b9      	ldr	r1, [r7, #24]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	617b      	str	r3, [r7, #20]
   return(result);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e3      	bne.n	800287c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f83d 	bl	8002940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028c6:	e023      	b.n	8002910 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_UART_IRQHandler+0x4f4>
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f8ea 	bl	8002aba <UART_Transmit_IT>
    return;
 80028e6:	e014      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00e      	beq.n	8002912 <HAL_UART_IRQHandler+0x51e>
 80028f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f92a 	bl	8002b5a <UART_EndTransmit_IT>
    return;
 8002906:	e004      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
    return;
 8002908:	bf00      	nop
 800290a:	e002      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
      return;
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <HAL_UART_IRQHandler+0x51e>
      return;
 8002910:	bf00      	nop
  }
}
 8002912:	37e8      	adds	r7, #232	@ 0xe8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	88fa      	ldrh	r2, [r7, #6]
 8002970:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2222      	movs	r2, #34	@ 0x22
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800299c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b095      	sub	sp, #84	@ 0x54
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029de:	e853 3f00 	ldrex	r3, [r3]
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80029f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e5      	bne.n	80029d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3314      	adds	r3, #20
 8002a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e5      	bne.n	8002a08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d119      	bne.n	8002a78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	330c      	adds	r3, #12
 8002a4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	e853 3f00 	ldrex	r3, [r3]
 8002a52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f023 0310 	bic.w	r3, r3, #16
 8002a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	330c      	adds	r3, #12
 8002a62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a64:	61ba      	str	r2, [r7, #24]
 8002a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a68:	6979      	ldr	r1, [r7, #20]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	e841 2300 	strex	r3, r2, [r1]
 8002a70:	613b      	str	r3, [r7, #16]
   return(result);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1e5      	bne.n	8002a44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a86:	bf00      	nop
 8002a88:	3754      	adds	r7, #84	@ 0x54
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f7ff ff3d 	bl	800292c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b21      	cmp	r3, #33	@ 0x21
 8002acc:	d13e      	bne.n	8002b4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad6:	d114      	bne.n	8002b02 <UART_Transmit_IT+0x48>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d110      	bne.n	8002b02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	1c9a      	adds	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	621a      	str	r2, [r3, #32]
 8002b00:	e008      	b.n	8002b14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	1c59      	adds	r1, r3, #1
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6211      	str	r1, [r2, #32]
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4619      	mov	r1, r3
 8002b22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10f      	bne.n	8002b48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fecc 	bl	8002918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b08c      	sub	sp, #48	@ 0x30
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b22      	cmp	r3, #34	@ 0x22
 8002b9c:	f040 80ae 	bne.w	8002cfc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ba8:	d117      	bne.n	8002bda <UART_Receive_IT+0x50>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d113      	bne.n	8002bda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd2:	1c9a      	adds	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bd8:	e026      	b.n	8002c28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bec:	d007      	beq.n	8002bfe <UART_Receive_IT+0x74>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <UART_Receive_IT+0x82>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e008      	b.n	8002c1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4619      	mov	r1, r3
 8002c36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d15d      	bne.n	8002cf8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0220 	bic.w	r2, r2, #32
 8002c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d135      	bne.n	8002cee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	613b      	str	r3, [r7, #16]
   return(result);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f023 0310 	bic.w	r3, r3, #16
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca8:	623a      	str	r2, [r7, #32]
 8002caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	69f9      	ldr	r1, [r7, #28]
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	e841 2300 	strex	r3, r2, [r1]
 8002cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d10a      	bne.n	8002ce0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fe2a 	bl	8002940 <HAL_UARTEx_RxEventCallback>
 8002cec:	e002      	b.n	8002cf4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd fe00 	bl	80008f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	e002      	b.n	8002cfe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3730      	adds	r7, #48	@ 0x30
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d0c:	b0c0      	sub	sp, #256	@ 0x100
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	68d9      	ldr	r1, [r3, #12]
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	ea40 0301 	orr.w	r3, r0, r1
 8002d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002d60:	f021 010c 	bic.w	r1, r1, #12
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002d6e:	430b      	orrs	r3, r1
 8002d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	6999      	ldr	r1, [r3, #24]
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	ea40 0301 	orr.w	r3, r0, r1
 8002d8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b8f      	ldr	r3, [pc, #572]	@ (8002fd4 <UART_SetConfig+0x2cc>)
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d005      	beq.n	8002da8 <UART_SetConfig+0xa0>
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b8d      	ldr	r3, [pc, #564]	@ (8002fd8 <UART_SetConfig+0x2d0>)
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d104      	bne.n	8002db2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002da8:	f7ff f906 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002dac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002db0:	e003      	b.n	8002dba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002db2:	f7ff f8ed 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8002db6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dc4:	f040 810c 	bne.w	8002fe0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002dd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002dd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	1891      	adds	r1, r2, r2
 8002de0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002de2:	415b      	adcs	r3, r3
 8002de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002de6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dea:	4621      	mov	r1, r4
 8002dec:	eb12 0801 	adds.w	r8, r2, r1
 8002df0:	4629      	mov	r1, r5
 8002df2:	eb43 0901 	adc.w	r9, r3, r1
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0a:	4690      	mov	r8, r2
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	4623      	mov	r3, r4
 8002e10:	eb18 0303 	adds.w	r3, r8, r3
 8002e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e18:	462b      	mov	r3, r5
 8002e1a:	eb49 0303 	adc.w	r3, r9, r3
 8002e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e36:	460b      	mov	r3, r1
 8002e38:	18db      	adds	r3, r3, r3
 8002e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	eb42 0303 	adc.w	r3, r2, r3
 8002e42:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002e48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002e4c:	f7fd f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4b61      	ldr	r3, [pc, #388]	@ (8002fdc <UART_SetConfig+0x2d4>)
 8002e56:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	011c      	lsls	r4, r3, #4
 8002e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002e6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e80:	4641      	mov	r1, r8
 8002e82:	eb12 0a01 	adds.w	sl, r2, r1
 8002e86:	4649      	mov	r1, r9
 8002e88:	eb43 0b01 	adc.w	fp, r3, r1
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ea0:	4692      	mov	sl, r2
 8002ea2:	469b      	mov	fp, r3
 8002ea4:	4643      	mov	r3, r8
 8002ea6:	eb1a 0303 	adds.w	r3, sl, r3
 8002eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	eb4b 0303 	adc.w	r3, fp, r3
 8002eb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ec8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	18db      	adds	r3, r3, r3
 8002ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	eb42 0303 	adc.w	r3, r2, r3
 8002ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ede:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ee2:	f7fd f979 	bl	80001d8 <__aeabi_uldivmod>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	4b3b      	ldr	r3, [pc, #236]	@ (8002fdc <UART_SetConfig+0x2d4>)
 8002eee:	fba3 2301 	umull	r2, r3, r3, r1
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2264      	movs	r2, #100	@ 0x64
 8002ef6:	fb02 f303 	mul.w	r3, r2, r3
 8002efa:	1acb      	subs	r3, r1, r3
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f02:	4b36      	ldr	r3, [pc, #216]	@ (8002fdc <UART_SetConfig+0x2d4>)
 8002f04:	fba3 2302 	umull	r2, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f10:	441c      	add	r4, r3
 8002f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	1891      	adds	r1, r2, r2
 8002f2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f2c:	415b      	adcs	r3, r3
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f34:	4641      	mov	r1, r8
 8002f36:	1851      	adds	r1, r2, r1
 8002f38:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	414b      	adcs	r3, r1
 8002f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	00cb      	lsls	r3, r1, #3
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f56:	4651      	mov	r1, sl
 8002f58:	00ca      	lsls	r2, r1, #3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4642      	mov	r2, r8
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f68:	464b      	mov	r3, r9
 8002f6a:	460a      	mov	r2, r1
 8002f6c:	eb42 0303 	adc.w	r3, r2, r3
 8002f70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002f84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f88:	460b      	mov	r3, r1
 8002f8a:	18db      	adds	r3, r3, r3
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f8e:	4613      	mov	r3, r2
 8002f90:	eb42 0303 	adc.w	r3, r2, r3
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002f9e:	f7fd f91b 	bl	80001d8 <__aeabi_uldivmod>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002fdc <UART_SetConfig+0x2d4>)
 8002fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	2164      	movs	r1, #100	@ 0x64
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	3332      	adds	r3, #50	@ 0x32
 8002fba:	4a08      	ldr	r2, [pc, #32]	@ (8002fdc <UART_SetConfig+0x2d4>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	f003 0207 	and.w	r2, r3, #7
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4422      	add	r2, r4
 8002fce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fd0:	e106      	b.n	80031e0 <UART_SetConfig+0x4d8>
 8002fd2:	bf00      	nop
 8002fd4:	40011000 	.word	0x40011000
 8002fd8:	40011400 	.word	0x40011400
 8002fdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002fea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ff2:	4642      	mov	r2, r8
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	1891      	adds	r1, r2, r2
 8002ff8:	6239      	str	r1, [r7, #32]
 8002ffa:	415b      	adcs	r3, r3
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003002:	4641      	mov	r1, r8
 8003004:	1854      	adds	r4, r2, r1
 8003006:	4649      	mov	r1, r9
 8003008:	eb43 0501 	adc.w	r5, r3, r1
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	00eb      	lsls	r3, r5, #3
 8003016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800301a:	00e2      	lsls	r2, r4, #3
 800301c:	4614      	mov	r4, r2
 800301e:	461d      	mov	r5, r3
 8003020:	4643      	mov	r3, r8
 8003022:	18e3      	adds	r3, r4, r3
 8003024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003028:	464b      	mov	r3, r9
 800302a:	eb45 0303 	adc.w	r3, r5, r3
 800302e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800303e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800304e:	4629      	mov	r1, r5
 8003050:	008b      	lsls	r3, r1, #2
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003058:	4621      	mov	r1, r4
 800305a:	008a      	lsls	r2, r1, #2
 800305c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003060:	f7fd f8ba 	bl	80001d8 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4b60      	ldr	r3, [pc, #384]	@ (80031ec <UART_SetConfig+0x4e4>)
 800306a:	fba3 2302 	umull	r2, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	011c      	lsls	r4, r3, #4
 8003072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003076:	2200      	movs	r2, #0
 8003078:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800307c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003080:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003084:	4642      	mov	r2, r8
 8003086:	464b      	mov	r3, r9
 8003088:	1891      	adds	r1, r2, r2
 800308a:	61b9      	str	r1, [r7, #24]
 800308c:	415b      	adcs	r3, r3
 800308e:	61fb      	str	r3, [r7, #28]
 8003090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003094:	4641      	mov	r1, r8
 8003096:	1851      	adds	r1, r2, r1
 8003098:	6139      	str	r1, [r7, #16]
 800309a:	4649      	mov	r1, r9
 800309c:	414b      	adcs	r3, r1
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030ac:	4659      	mov	r1, fp
 80030ae:	00cb      	lsls	r3, r1, #3
 80030b0:	4651      	mov	r1, sl
 80030b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b6:	4651      	mov	r1, sl
 80030b8:	00ca      	lsls	r2, r1, #3
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	4642      	mov	r2, r8
 80030c2:	189b      	adds	r3, r3, r2
 80030c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030c8:	464b      	mov	r3, r9
 80030ca:	460a      	mov	r2, r1
 80030cc:	eb42 0303 	adc.w	r3, r2, r3
 80030d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80030ec:	4649      	mov	r1, r9
 80030ee:	008b      	lsls	r3, r1, #2
 80030f0:	4641      	mov	r1, r8
 80030f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030f6:	4641      	mov	r1, r8
 80030f8:	008a      	lsls	r2, r1, #2
 80030fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80030fe:	f7fd f86b 	bl	80001d8 <__aeabi_uldivmod>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4611      	mov	r1, r2
 8003108:	4b38      	ldr	r3, [pc, #224]	@ (80031ec <UART_SetConfig+0x4e4>)
 800310a:	fba3 2301 	umull	r2, r3, r3, r1
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2264      	movs	r2, #100	@ 0x64
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	1acb      	subs	r3, r1, r3
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	3332      	adds	r3, #50	@ 0x32
 800311c:	4a33      	ldr	r2, [pc, #204]	@ (80031ec <UART_SetConfig+0x4e4>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003128:	441c      	add	r4, r3
 800312a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800312e:	2200      	movs	r2, #0
 8003130:	673b      	str	r3, [r7, #112]	@ 0x70
 8003132:	677a      	str	r2, [r7, #116]	@ 0x74
 8003134:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003138:	4642      	mov	r2, r8
 800313a:	464b      	mov	r3, r9
 800313c:	1891      	adds	r1, r2, r2
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	415b      	adcs	r3, r3
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003148:	4641      	mov	r1, r8
 800314a:	1851      	adds	r1, r2, r1
 800314c:	6039      	str	r1, [r7, #0]
 800314e:	4649      	mov	r1, r9
 8003150:	414b      	adcs	r3, r1
 8003152:	607b      	str	r3, [r7, #4]
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003160:	4659      	mov	r1, fp
 8003162:	00cb      	lsls	r3, r1, #3
 8003164:	4651      	mov	r1, sl
 8003166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800316a:	4651      	mov	r1, sl
 800316c:	00ca      	lsls	r2, r1, #3
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	4603      	mov	r3, r0
 8003174:	4642      	mov	r2, r8
 8003176:	189b      	adds	r3, r3, r2
 8003178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800317a:	464b      	mov	r3, r9
 800317c:	460a      	mov	r2, r1
 800317e:	eb42 0303 	adc.w	r3, r2, r3
 8003182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	663b      	str	r3, [r7, #96]	@ 0x60
 800318e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800319c:	4649      	mov	r1, r9
 800319e:	008b      	lsls	r3, r1, #2
 80031a0:	4641      	mov	r1, r8
 80031a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031a6:	4641      	mov	r1, r8
 80031a8:	008a      	lsls	r2, r1, #2
 80031aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031ae:	f7fd f813 	bl	80001d8 <__aeabi_uldivmod>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4b0d      	ldr	r3, [pc, #52]	@ (80031ec <UART_SetConfig+0x4e4>)
 80031b8:	fba3 1302 	umull	r1, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	2164      	movs	r1, #100	@ 0x64
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	3332      	adds	r3, #50	@ 0x32
 80031ca:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <UART_SetConfig+0x4e4>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	f003 020f 	and.w	r2, r3, #15
 80031d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4422      	add	r2, r4
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80031e6:	46bd      	mov	sp, r7
 80031e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ec:	51eb851f 	.word	0x51eb851f

080031f0 <memset>:
 80031f0:	4402      	add	r2, r0
 80031f2:	4603      	mov	r3, r0
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d100      	bne.n	80031fa <memset+0xa>
 80031f8:	4770      	bx	lr
 80031fa:	f803 1b01 	strb.w	r1, [r3], #1
 80031fe:	e7f9      	b.n	80031f4 <memset+0x4>

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4d0d      	ldr	r5, [pc, #52]	@ (8003238 <__libc_init_array+0x38>)
 8003204:	4c0d      	ldr	r4, [pc, #52]	@ (800323c <__libc_init_array+0x3c>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	2600      	movs	r6, #0
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	4d0b      	ldr	r5, [pc, #44]	@ (8003240 <__libc_init_array+0x40>)
 8003212:	4c0c      	ldr	r4, [pc, #48]	@ (8003244 <__libc_init_array+0x44>)
 8003214:	f000 f818 	bl	8003248 <_init>
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	2600      	movs	r6, #0
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f855 3b04 	ldr.w	r3, [r5], #4
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	080032a0 	.word	0x080032a0
 800323c:	080032a0 	.word	0x080032a0
 8003240:	080032a0 	.word	0x080032a0
 8003244:	080032a4 	.word	0x080032a4

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
